[[{"i":"#","p":["Personal blog about Powershell this is my first blog page and talks about who I am and why I got into Powershell scripting.","Blogs with great comic references"]},{"l":"My Personal Powershell Blog"},{"i":"a-bit-about-me","l":"A bit about me \uD83D\uDE10","p":["Great book I have read all my kids","Well I turned 40 this year \uD83E\uDD2F I thought damn that's come about quick ⏳. Just seems the other day I was 26 \uD83C\uDFC4‍♂️. My eldest daughter is 14 this year, and I got 4 daughters \uD83D\uDC6A. It is just mad how quickly time can fly-past ⏰. However I remember when I was becoming a dad for the first time \uD83E\uDD14 I was trying to better my IT career \uD83D\uDCB7. Powershell had just come out as version one, renamed from Monad. I knew a bit about coding DOS, so I thought I would jump in the deep-end \uD83C\uDF0A and learn this new object orientated language Microsoft had just released. So I went and bought \uD83D\uDCDA books on learning Powershell, and well tried to understand what the heck they were trying to explain \uD83D\uDE15 as I got to say at first none of it really made any sense."]},{"i":"why-bother-with-scripting","l":"Why bother with scripting..? \uD83D\uDE15","p":["I remember a long time ago providing 2nd-line support, and I was invited to do some over-time. As I was contracting it was a pretty good hourly rate as it was. Having that at time and a half \uD83E\uDD11 was really good. So I think about 5 of us turned up for the over-time, and to make the deal even better, the boss bought every-one lots of pizza \uD83C\uDF55 to make up for all the installs we had to do across all the different sites. Anyways by the time we had finished eating this pizza this one particular guy had pretty much finished coding the whole install, to run across all the different sites.","I was like no way!","He just pressed the enter button on the keyboard, and all the installs kicked off, and ran on each computer at each site. This one guy had just saved the rest of us like 4+ hours of work. I was totally astonished \uD83D\uDE32 that a mere human had just made the computers at each site do the job automatically. This was before Powershell even existed. Pretty much from that day forward I wanted to be that person who could make the computers do the hard work for a change instead of me."]},{"i":"my-first-script","l":"My first script \uD83E\uDDFE","p":["At the time I was working for local council providing 2nd-line support to over 700 schools \uD83C\uDFEB in the south east of England \uD83C\uDDEC\uD83C\uDDE7. My job role did change several times, from being remote support, \uD83D\uDCBB to being the main on-site support for 14 different schools, \uD83D\uDC68‍\uD83D\uDCBB then moving to supporting various other aspects of the services the council provided. It was during this time they planned a much needed update of Windows XP which was and had been the solution for quite some-time. It was taking 4 to 5 consultants one whole week or more to visit the school or college who was interested in the upgrade. Then physically and manually check certain aspects of each machine, each monitor, each printer to then collate this information to be able to provide a quote to the school or college on which equipment would need to be replaced, or upgraded to meet the requirements of running Windows 7.","One week wage of 4 to 5 people to complete this task","I had finished reading my \uD83D\uDCD8 first book, and was feeling that this was a calling from above \uD83C\uDF2C️ to write a script to automate the process of collecting this information, ℹ️ and more importantly removing human error \uD83D\uDC7D from the equation, as if you have done IT support, you know how tiny those serial numbers are, and trying to tell the difference between a 8 and a B can mean all the difference when you need support from Dell and provide an invalid serial. In my own personal time I had written a long script which would collect all the information they required using WMI, plus some bonus information like knowing how many memory slots were free to be used, doing all this without opening the computer or even needing to visit the school or college. I was able to audit 500+ computers and have all this information in Excel within 45 minutes. Just me one person on my own. \uD83E\uDD29 Even though I had to jump through lots of burning hoops to get to use my script, and write various emails to explain this no-brainer \uD83E\uDDE0 process that they would save money and save time. Lots of it too\uD83D\uDCB0 To me it reminded me that day of eating free pizza \uD83C\uDF55 and getting paid decent money to sit there and well not do a lot. Although it took me a lot longer than the DOS script written years previously, I had felt I had now achieved \uD83C\uDF9A️ a new level, and was more than just a point-and-click administrator \uD83D\uDDB1️"]},{"i":"more-scripting","l":"More scripting ♻️","p":["Thankfully my next job was a lot more challenging than my previous and there was no change management in-place so I had a lot of free regin to choose how to fix a given problem. Previously a lot of my IT jobs were providing IT support for something that was broken or had stopped working. However this job a lot of people seemed to expect you to know how to do their job and write Excel formulas to solve their spreadsheet issues. As well as doing lots of SQL querying for various different departments producing reports, as well as supporting all the IT in the business and 7 remote sites. This was just screaming automation to me, and although I wasn't great at Excel or SQL at the time, it was a great opportunity to become the best I could be. So I was very grateful \uD83D\uDE01 when the company I was working for brought me a copy of Powershell Studio this then allowed me to make my scripts point and click (yes I know I was trying to get away from that) which in-turn allowed me to develop scripts that would essential automate a particular task or job within the business. I remember how one lady had stacks and stacks of paper on her desk, and was manually holding these up and cross-checking them with the results on the \uD83D\uDDA5️ screen \uD83E\uDD96 I was able to get the customer to send the required data via CSV format and automate the whole process for this staff member. I also had managed to solve a critical business issue that had been outstanding for about 5 years that no-one who had previously looked at it had managed to solve, by writing my own SQL stored procedures and running this from a GUI application I built to then display the results. Again this saved the company a massive amount of money, from solving this outstanding problem. So the one thing really bugging me at this point was no matter how much I tried, these windows forms I was producing with Powershell Studio always looked like Windows 95 forms to me. OldSkool So after looking about on the internet for something to help me improve the GUI aspect of my application, and find something better to do reporting in powershell with other than having to rely on Excel all the time to compile the finished result, even if I gathered the data all via Powershell and exported to CSV, it was still Excel as the end thing being displayed with the data. I wanted this to all be \uD83E\uDD14 Powershell. Then Universal Dashboard aka Powershell Universal had just been released by the very talented Adam Driscoll. Again this was like a calling from above, and I needed to get on this new hype-train \uD83D\uDE85 right away. Then began a whole new experience with \uD83D\uDC95 Powershell and \uD83D\uDE0D React. Universal Dashboard was the best thing since \uD83C\uDF5E sliced bread. It was just so amazing \uD83E\uDD2F what you could do, like the only thing holding you back was your imagination. For me this really did take my Powershell to another new level, I started to release module after module, and create a blog site dedicated to this amazing software for a good few years. https://psdevuk.github.io/ud-flix/ My UDFLIX Blog Site \uD83D\uDC49"]},{"i":"100-powershell-modules","l":"100+ Powershell Modules \uD83C\uDF96️","p":["I was very active on the forum for Universal Dashboard, and had seen it change and grow in-size of community members. This software was going to a whole new level, and it did, it became Powershell Universal. As mentioned I was very active in the forum, and being the kind \uD83D\uDC97 hearted person I am I tried to make as many of these new web page components I could for other community members to bring some new way of displaying data or navigating the web-pages you could produce. Before I knew it, I had published over 100 modules to the Powershell gallery."]},{"i":"recent-modules","l":"Recent Modules \uD83D\uDD2E","p":["Not that long ago on twitter where I feel privlidged to have so many \uD83D\uDE0E cool connections in the Powershell \uD83C\uDF0E world I replied to a tweet about how come Powershell didn't have the equivalent of a hidden gem of a tool from Microsoft aka Logparser. I had some IIS log files I wanted to gather information from and instead of using Powershell I had to rely on an unknown gem from Microsoft, using the command line. Another tweet was posted something along the lines of","Just find a C# library that does the heavy lifting and turn that into a module","So I was super \uD83D\uDE03 happy when I came back to check on twitter to find a very talented person had only gone and smashed it in about an hour! IISParser Module \uD83D\uDE80 First I was totally amazed at the fact someone had done this, but secondly they had used a method I did not have knowledge on, making this into a binary module. I was thinking damn \uD83D\uDE27 I have read so many \uD83D\uDCD6 books on Powershell and purchased a good amount of training videos \uD83D\uDCFC but had not come across this \uD83E\uDDD9 Powershell magic before. Again the very talented Adam Driscoll had recently published the Sysinternals module for Powershell and had hosted the template on git which uses Crescendo. He also was kind enough to share a link to a youtube video on the process of making binary modules in Powershell that he uses. Again I felt this was a calling and the time to try and up my Powershell skill to yet another level and find time to learn this process and produce some new modules, as it had been a while since I had posted anything to the Powershell gallery. So I got busy in the evenings and cooked up some new modules, one of them being the Retype module I used to produce this website. Recent Powershell Modules"]}],[{"i":"#","p":["Personal blog about really tought problems that have fallen on me to solve or provide a solution. Most of these solutions have a happy Powershell ending, and for others I have used other tools of the trade to get the job done."]},{"l":"Mission Impossible"},{"l":"Mission Impossible","p":["Sometimes you may feel like this when tackling an issue that just cannot be solved","Well I figured this would be a good section on the website to breifly mention issues or projects that I have been involved in, that have either come to me as no-one else was able to previously solve the issue, or I have developed a way to stream-line the process to either automate the job or to put a process in place which would allow the user to use a bespoke application to solve the problem. I'm not saying I provided the best solution, but I was able to provide a solution to fix the given problem which no-one else had seemed able to do."]},{"i":"i-been-doing-it-a-long-time","l":"I been doing IT a long time \uD83D\uDD79️","p":["Too many years have past since I started IT that I kind of feel I should have been able to retire about now. Sadly not, as I haven't even paid into a pension, I was just hoping to get super-rich from doing IT, but it seems in hindsight that being a lorry driver would have earnt me much more money with a lot less stress. However after investing just over half my life to working in the IT industry I do not want to give up on it just yet. My initial start in IT was off of a Government apprentince scheme, where I got paid a whole £50 a week to learn IT. After a few months you got work placement, where sadly you still only got paid £50 a week, and I had to use a large proportion of that money just to travel to work. So essentially this was me doing charity work, as I wasn't even earning anything from working 9 to 5 for five days a week. I got out of the apprentince scheme as it felt more like slave labour. So when I started out in IT, Windows NT was about as a server OS, Windows 2000 clients, or Windows 98 running some weird DOS programs to manage the business. Oh how times have changed. Like the first IT job I got after leaving the IT apprentince scheme, it was for a plumbing company. I was situated upstairs in this small office with an even smaller window which didn't open. I was allowed to smoke in that office whilst working with a non-smoker. Wow times really have changed. I mean when I was in my early 20s I was doing a lot of work in London going to banks and installing and configuring Remedy. I remember the company I was working for was charging £800 a day to the client for my services, yet I was only taking home £880 a month! I use to spend at least half of every month working in London, damn they were some really long 14+ hour working days, I never really thought about it at the time, but that company was getting my yearly salary in like just under half a month. I moved onto doing Helpdesk work, then onto second line support work and then onto third line support. Although IT support has helped me pay the bills over the years I do not really feel like I belong there anymore as it seems every-other support person out there is still pointing and clicking there way through the solution. Just so much time is wasted pointing and clicking, if you actually dedicate sometime to the actual problem you could put a proper solution into place. Then again this might end-up putting a lot of IT support people out of business, if computers had decent scripts running on them which would automatically fix the problem. I am a very strong believer in letting the computer do the hard work, not because I am lazy, but because computers were built and designed to process tasks far more quickly and efficiently than any human-being could process, and remove the human-error element from the situation as well. Thankfully I have had some opportunities to be able to produce my own soluition to the problem, which had landed my way. So I thought that this should get a little blog section of it's own to hopefully demonstrate I can do more than just create quirky modules. When I am working for a company I don't post any scripts I write in worktime to my own github account. I have regretted this at times, especially when you know you have already written a script to fix that problem, but it's at your last job. Well I think this makes you a better scripter by re-writing similar scripts you may have done in the past, as you can always improve the scripts you write. By doing simple things like error handling, logging of scripts output, emailing the outcome to yourself and many other things."]},{"i":"daily-tasks","l":"Daily Tasks \uD83D\uDCC6","p":["I done this in several jobs now, where on a daily basis you need to check X, Y and Z to make sure everything is running smoothly on the network or what-ever checks you need to do. Most recently the daily checks tasks was pretty big, big enough that the company had employed a sole person to do this task. This seemed a bit crazy to me, as after a few simple internet searches I saw that the various web-based applications you had to log into all had API or Powershell modules I could use to interact with these applicaitons. So instead of having to log into 6 or 7 different applications clicking here and clicking there to obtain the information I wrote a function. In the function I collected all the required information and placed this into various HTML tables, and emailed this to myself each day. This meant that before I even made it into the office, I had an email that contained all the information the person doing the daily checks would need to check. I could easily view the uptime of over 100 servers, backup information on numerous servers, storage information, health information on hardware, and lots more. Previously to this HTML email report, I had actually designed a full on IT dashboard monitoring various aspects of the network and user consumption of server processes. As well as automatic security warnings on accounts expiring or not logging in. Although by no means is this one of my greatest achievements but the fact that it had ever been done before, and it basically automated one persons' job that to me is a mission impossible, as I guess no one thought it was possible hence doing it manually."]},{"i":"netscaler","l":"Netscaler ⚖️","p":["Again the company I was at was using Netscaler and they knew it had API capabilities but didn't know how to use them. This was quite mad as we are talking a big company with lots of employees, and lots of different departments with even more people in, people paid to develop solutions yet here I was at 3rd line being asked to automate the processes of several netscaler tasks mainly relating to load-balancing. This allowed me to write a script to reboot 3 critical servers that were constantly having issues on a daily basis to remove some of the errors happening on a daily basis. Again this used to be done by the on-call person at silly-o-clock in the morning or evening. This meant that the person on-call was also getting paid for this time. By implementing this Netscaler API to reboot these servers daily got rid of the constant out of hour calls, which in-turn was saving the company money not having to constantly pay the on-call person over-time. As well as focusing on these specific problematic servers, I also created a bespoke GUI application to allow the developers to upgrade their own websites which usually was consuming one hour of my day load balancing the webservers to allow them to do the upgrade. I made the GUI so simple to use, and as well as being super easy to use, I also built in a log to record who used it and when (incase something went wrong, or for auditing purposes), as well as preventing the user from making an error, by having advanced coding in the background verifying correct information before letting the user continue. This then meant the developers could do their own upgrades instead of me dedicating time to do something they could easily do if they had a specific application that only allowed them to do what they needed. Again saving time, money and resources."]},{"i":"server-issue","l":"Server Issue \uD83D\uDE32","p":["I was speaking to a techinical architect on this server issue. He informed me to fix it you needed to restart a particular service not once but twice to fix the issue. The problem was they didn't know when to restart it as the service never stopped running, but the service the server was providing became unreponsive to the end user. The software supplier had confirmed there was a bug in the release we was using and basically to restart the service at a random time in the day to hopefully fix the issue. This was the lamest excuse or fix I had heard in quite sometime. The craxy thing in my head was I was speaking to someone more senior than me and they didn't seem to have a scooby-doo on how to fix it. Looking in the applivation event log (using powershell) I could see a speicific error code happening everytime the service on the server needed restarting twice. So now I had the information I needed, I wrote a script in about 15 minutes to run every few minutes on the server to check the application log, check if this particular error had occured then if it had to restart the particular service twice. Even more suprising was when I had to inform a developer how I had developed a solution to the software bug until the software supplier could provide a fix. So again by no means my best mission impossible, but just the fact you got senior architects, developers and an entire software company who cannot fix their own software issues. This particular problem was happening numerous times a day and at anytime of the day. Again by me implementing this script and recording the activity in the eventlog allowed me to inform the developer how many times my script had saved the day, and stopped the on-call person getting called at silly-o-clock. Again saving time and saving money, it's just a bit mad that I came up with the solution to the problem in like 15 minutes, when all these other more senior people couldn't provide any solution."]},{"i":"citrix","l":"Citrix \uD83D\uDCC0","p":["Not claiming to be a citrix master by any-means but when a colleague is asking another colleague to literally point and click over a hundred different machines to put them into maintenance mode, this to me is just screaming automation. So although this task didn't directly fall to me, just the crazyness of someone asking someone else to help them point and click a load of servers, it just seems so prehistoric to me of doing things that way. Again I was able to smash a script together to then turn this into a function so you could query one or more ESXI boxes to then put all the virtual servers on that device into maintenance mode so the box could be taken down without any end users suffering loose of data. Again I made another function to then take all the virtual machines out of maintence mode. To me this is just how hours and hours of IT time is wasted, by pointing and clicking. To make it worse it was normally taking two people to complete this task, due to the sheer amount of pointing and clicking. Instead I supplied a couple of Powershell functions that could complete this task in a few mere seconds instead of up to an hour."]},{"i":"sql-dba","l":"SQL DBA ♟️","p":["Dealing with databases does require a lot of attention and detail. I guess that's why some people think it would be better to do it manually. Not me, I think of you write a good script properly once, and make that into a function you can then use that on every SQL server going forward. So this particular task was making sure certain jobs were setup and configured on each SQL server. As this was repeating the same process on each SQL box, to me this was needing to be automated, else this was going to take such a long time to complete with the list of servers this needed applying to. Thankfully Powershell has the dbatools module which allows you to automate anyhting you would do in SSMS you can do using the Powershell module. Whilst deploying the function to various SQL servers I discovered a server in urgent need of TLC. This to me was mission impossible as no-one else would have been able to script this task, as the instructions were all manual. To me this was another big winner as saved me so much time in repeating the same processs over and over again, without making human mistakes."]},{"i":"vmware","l":"VMWare \uD83D\uDCBF","p":["I remember way back when I was working at the council how vitual machines were going to be the future of IT. Sure enough this one company I was at had thousands and thousands of virtual machines. So to me this meant that I needed to be using Powershell instead of VSphere as it would be a lot quicker, as I wouldn't need to point and click to find the VM. Using various VM Tools modules I was able to script several documented processes such as increasing disk size of a VM. Each task I automated meant that I no longer had to do this manually, which mean time and money being saved. I ended up writing serveral VMWare scripts to automate the most frequent problems that occured. Again no-one had asked me to do this, but as I was having to do various tasks such as high CPU on numerous virtual machines throughout the day. Instead of manually going through the process of logging onto VSphere, searching for the machine, logging on remotely to the machine and then looking at the problem, by the time I you done all that I had already invoked the function on the machine from my Powershell session and fixed the problem."]},{"i":"iis","l":"IIS \uD83D\uDD78️","p":["Although I am not a dedicated web administrator I do have a good understanding of it, and how to fix various issues that may occur. Especially using a few powershell modules to automate the task. Althogh the IISAdministration module is good for identifying the sites, and application pools remotely. Sometimes the information you need is in the actual IIS log file for that website. This led to me using a Mirosoft tool to parse the log files to find the issue. This got me thinking why had this not been done in Powershell? Not long after a binary module was published which then got me into binary modules. Again I took this a step further by placing all the data into Excel and making pivot-table reports. I was even more shocked when the developer said they never check the logs, but from the information I had extracted he could automatically tell why those errors were happening, so was of great use to the developer in the end. IIS is great for logging events from the websites it is monitoring, but who is monitoring the logs? This was the case for a lot of webservers I found, that the IIS logs were not being cleaned up. This resulted in one webserver nearly flooding the main operating system drive on a live webserver. This lead to me writing my own function and deploying this through solarwinds to have something in place to monitor all the log files and to make sure that no webserver would have the disk drives flooded by log files."]},{"i":"active-directory","l":"Active Directory \uD83E\uDDD1‍\uD83E\uDD1D‍\uD83E\uDDD1","p":["Having used Active Directory from before I could script has shown me how much time I could have saved. I am more than capable of writing scripts to onboard users from a spreadsheet, or more complex scripts to find the difference in security groups of specific users. As well as updating advanced settings of user accounts, managing user accounts from a security perspective, to finding rogue accounts that should have been deleted or disabled. Using Powershell to accomplish these tasks means I can get the job done much quicker, and making my scripts into advanced functions mean they are much more versatile to either be adapted or re-used. I was able to identify over 400 hundred live accounts that had not been logged onto in over one year, as this employer had over 6,000 accounts. It wasn't my specific job to find this information, but this proved to me that this was not being monitored and could lead to massive data breach. I reported my findings to the security team, who I also helped when there was a compromised email account. As I was the only person to identify that they had not disabled outlook web access and this particular user had 8 mobiles registered to their account. By me doing these two things, no further emails were sent from the compromised account. Even though there was a dedicated security team and I heard of this compromised account by chance I was the person to fix the problem. I have also designed my own Active Directory dashboards, to monitor various aspects of user accounts and report these using various different components on the dashboard page."]},{"i":"office-365","l":"Office 365 \uD83C\uDFE2","p":["Even though Office 365 seems to be the normal for most companies these days, it is amazing again when it comes to Administration. As no-one seems to know how to use Powershell to manage your Office 365. So why is this important, well it has happened to me on more than one occasion where Microsoft services are unavailable and you cannot use the Microsoft management portal to manage your Office 365 via point and click in a webpage. Managing Office 365 via Powershell was extremely important when I was having to deal with lots and lots of email accounts that had not migrated correctly. When I was shown how the current senior architect was fixing these issues, the demo lasted just over an hour. Then 4 hours later he had actually migrated the mailbox. I even remember my boss at the time writing to the head of IT explaining that the team I was working in did not have enough time to solve all these mailbox migration issues as it took so long to fix even one mailbox manually how we were shown, 4 hours or more. As this particular task did fall to me to fix, there was no-way I had the time to manually fix each of these mailboxes. So I spent 4 hours writing numerous functions to fix each given mailbox problem. I was then able to group the problems and apply the functions to fix those groups of issues. Within a day I had completely cleared this list, that I was expecting to take me weeks or more had I tackled the problem manually. I was also able to document the whole procedure and upload the scripts to the GIT server. This then meant anyone on the team could follow a set process which was taking the fraction of the time it took to solve the problems, from the demo we had of the senior technical architect who was originally doing this. Again this was a massive win for me, as I had also been informed there were 2,000 more mailboxes to migrate, and if they had of carried on manually fixing those issues, it probably would of created a full-time job for someone else to solely deal with. As I had written advanced functions I was able to pipe in as many mailboxes as I needed to fix. Saving lots of time and money. There was a major security breach where a particular user had their 2 factor authentication breached, and rogue emails were being sent from this end-user to lots of people within the organisation."]},{"i":"network-slowness","l":"Network slowness \uD83D\uDC22","p":["This particular problem had been originally logged about 2 years before I even joined this company. At least I knew the problem was not my fault. However that wasn't an answer to the problem. For this problem I actually used WireShark to solve, which was kind of my motivation for making the TShark Crescendo Powershell module I made. I did a fair amount of video training for Wireshark to feel fully comfortable on running the trace and analysing it. So although I had been told that Wireshark traces had been done before and nothing was found this did not deter me from using it. Prior to using Wireshark I actually used the Sysinternals Process 3Monitor to try and find the culprit. Although I was able to obtain useful information from the tracefile and I could see delays I knew that this was a remote site accessing the data about 8 hops away. As I couldn't find the definitive problem in the process monitor trace I turned to Wireshark. The information I obtained from Wireshark gave me such granular information on the application and how it was interacting with the network. I was able to find the delay in the program and what was causing it. Sadly the backend tech for this rather expensive equipment was over 20 years old, running a single threaded application. There was also a known SMB issue with the network card in use, so I was able to swap that for a USB-C external network card. Although this did not completely solve the problem I was able to pinpoint where the latency was happening and prove to improve the latency that they needed the backend to be locally hosted as this going across 8 hops and taking up to 5 seconds to read the file on the server was causing the delay of the spinning circle and not responding on the main application. The backend solution was designed to be hosted locally which it was not, and all the reading and writing of the same file over SMB was causing severe delays."]},{"i":"intune","l":"Intune \uD83C\uDF9B️","p":["Although I had never used Intune before, but as I understood it essentially just ran Powershell scripts on end-client computers. This particular problem had been open for months and months as no-one at the company knew how to script something in Intune to deploy a specific printer to specific people. I had never deployed a printer automatically using Intune and there were other aspects to take into consideration like getting the driver installed. After a bit of testing I had pacakged a solution and rolled it out. To my delight this external company could finally use the printer. The same company had also purchased loads of USB adapters to allow multiple monitors. Again none of these were working as although they were USB, they were not plug and play, and getting hold of the correct driver was a little tricky. Again using Intune I was able to deploy the driver to all the laptops on-site automatically, so that these USB multiple monitor devices would automatically work for end-users. This problem had also been open for a long time without a given solution, hence I think it is worthy of making the mission impossible list as no-one else in the company was cabaple of pulling it off."]},{"i":"datto","l":"Datto \uD83C\uDF9A️","p":["One company I was at was expecting me as the sole NOC engineer to go through and fix over 300 calls a day. Yes a day, as well as record all my time for each call I closed. It almost seemed I was spending more time recording my time, than time I could use to focus on problems. Although this company had Datto they didn't have anyone in the company capable of writing Powershell scripts to use within Datto to fix the problem. Not long into the job I had written numerous Powershell datto functions I could deploy to the machine with the problem to automatically fix the problem. This then actually gave me the chance to close up to 300 calls a day, by using scripts to automatically fix the problem. This job seemed mission impossible from the get-go with the sheer volume of calls I was expected to close manually, as well as recording all my time, documenting the scripts I was writing, and writing the scripts and closing the 300+ daily calls. This was only possible through me writing bespoke scripts for each category of the problems I was solving. I was also able to change the automatic fixes they had in-place which were not configured correctly to run the scripts I had written instead. This allowed the call queue to be dramtically reduced, and to almost be in a managable state for one person to deal with. I was initially working over-time for free each evening to even make the volume of calls possible, but once the scripts were in-place, and the Datto system was being used more effectively this enabled me to stop working over-time. I was also able to provide other Datto solutions such as Blue Screen Of Death, to automatically download and install the software required to read the dump file, and display the reason why the blue screen happened on the particular machine."]},{"i":"complaint-system","l":"Complaint System \uD83D\uDE21","p":["At this work place, one of the directors came up to me telling me the company needed a complaint system in order to gain certain certification of providing customer care. He literally scribbled me two whole sentences of this complaint system. These two sentences were not readable at best, and didn't take into account any of the front-end design or more importantly back-end design of how all this relational database was going to be built, and the informaiton it would record. So one week later I had designed a back-end relational database to store all the data, and I had created a front-end web dashboard, that had it's own security group in active directory so when logging into the complaint system you were authenticated against this active directory security group. I also hosted this as a HTTPS site creating the certificate and rolling this out via GPO. This then allowed the call-handlers in the company to record any given complaint via phone or email, and then assign it to the appropriate manager, and all this informaiton was recorded into the database, so I was also able to generate various graphs and reports from this data. When-ever a complaint was assigned to a manager for further investigation an email would also be sent to notify that manager."]},{"i":"purchase-order-system","l":"Purchase Order System \uD83D\uDE0A","p":["Normally purchase orders were being recorded on paper, which then sometimes went missing. To my knowledge no-one was collating this information, so there was no-way of knowing which department was spending what, as it was all on bits of paper. Again from having brief discussions with the Finance director I was able to put together a fully relational back-end database, as well as a front-end web-based dashboard application that was again linked to Active Directory hosted on IIS using HTTPS and issuing the correct certificate to end-clients. This then allowed the company to have a complete over-view on all the purchase orders being raised within the company, and no chance of bits of paper going missing. I designed the system with create, read, update and delete in-mind to allow users the opportunity to cancel their purchase order should it no longer be required. I was also able to build in complex business rules to decide automatically who the purchase order should go to based on the information within the purchase order."]},{"i":"vehicle-management-system","l":"Vehicle Management System \uD83D\uDE9A","p":["At this particular company they had lots and lots of vehicles. All the milage and repairs and various other bits of data was all held on different spreadsheets located in different directory shares, which various people would update as an when. My mission was to get all this informaiton into one place, so you could manage all vehicle data from one application instead of 20 different spreadsheets. Again I put together a back-end database and a front-end dashboard to display and record all this information. Once I had completed the project and demonstrated it to the end-users there was big delight on the faces, as this meant no longer having to open numerous spreadsheets to record this information"]},{"i":"vat","l":"VAT \uD83D\uDCB8","p":["Believe it or not one project I was assigned was to find the missing VAT the finance system had not claimed for. Now this particular issue had been going on for about 5+ years, and all the senior people in the company had looked at it, but no-one had been able to solve this issue. After much SQL querying I had found the missing link. I was able to write a complex T-SQL query and then display that data into a table grid in a GUI application I built using Powershell, the outputted table was able to show everything that had been claimed and not claimed. I conclusively proved these un-claimed VAT were truely unclaimed, by using the SQL queries and the previous sent tax forms. The company was able to claim back just over £100,000 with this information I had provided. I was then able to modify the T-SQL query and the GUI to reflect this year on year going forward. This to me was a massive win as when I initially started this project I knew VAT stood for value added tax and that was about it. Then to conclusively prove what had not been claimed, and the fact the finance software or any add-ons the company was selling for this product couldn't do what I had done, this to me was mission impossible accomplished.","More stories for bedtime coming soon"]}],[{"i":"#","p":["Been a while since I wrote a blog so thought I should get in another one before the end of the year.","I was on Santas good list and was lucky enough to get this in CGC"]},{"i":"my-personal-powershell-blog","l":"\uD83C\uDF85 My Personal Powershell Blog"},{"i":"blog-update","l":"Blog Update \uD83D\uDE10","p":["First off apologies, for well stopping the very frequent blogs I was managing to publish. I was certainly on a roll I felt. Almost felt like I was becoming a crazy preacher trying to convert the non-powershellers out there.","It was great to read a blog the other night, where I even got a mention, and hopefully inspired that person to write that blog. I been contacted by people to say they really liked the podcast I done, which was massive to me, that people had not only listened to it, but the fact it obviouisly touched on what they had experienced or going through.","2022 was a pretty crazy year, I mean I had my fair share of problems, like the gear-box falling out my car on the motor-way, my boiler breaking more times than I can count. The over-flow in the loft pipe broke, which then flooded the loft and resulted in my ceiling collapsing. Getting another dog, loosing a cat to a dangerous driver, and various other life happenings.","Amazingly even though it seemed a lot of bad luck was coming my way through"]}],[{"i":"#","p":["Powershell module I made after people discussing this at work and them using various websites to identify the information required. Now you can do this all in the shell. Find out in this blog I did here","The Kill Lock an Amazing comic"]},{"i":"get-macaddressvendor","l":"Get-MacAddressVendor \uD83D\uDDA5️","p":["Module Located Here"]},{"i":"just-saying","l":"Just saying ☀️","p":["me enjoying the sun yesterday","At the moment in the U.K \uD83C\uDDEC\uD83C\uDDE7 it is hot \uD83C\uDF1E like really super hot \uD83E\uDD75 and I guess we are just not used to it. Hence pretty much no-where has air-con so we all just melt, or maybe that's just our air-ports ✈️ yep that really did happen yesterday. Despite all this heat, I managed to cook up a module and a Github repository and this web-page all before starting work \uD83C\uDFCB️ just for fun \uD83E\uDD73 and to hopefully demonstrate how awesome this Retype module is for documenting your work."]},{"i":"links-to-module","l":"Links to Module \uD83D\uDC47","p":["So as mentioned this is on the Powershell gallery:-","Powershell Gallery Link \uD83D\uDC49","I also published a quick repository on Github as well:-","My Github Repository \uD83D\uDC49","Don't forget there is also this amazing website \uD83D\uDE01 This Website \uD83D\uDC49"]},{"i":"why-do-this-module","l":"Why Do this module? \uD83D\uDCAD","p":["Well the other day at work someone from a different team showed a member in the team I work in a MAC address. The colleague I work with automatically said that this was vendor name MAC address. This other person didn't believe him, so the colleague I work with went to some website to verify it really was the vendor name he said it was. So late last night a bit before going to bed I was thinking about this conversation again, and thought yeah I know I could probably obtain this information via WMI or CIM or point and click device manager. However I thought this would be a great opportunity to show how to do this via an API, so I wrote the function last night just before going to bed. I also had a quick butchers on the Powershell Gallery and well I personally couldn't find anything like this on the Powershell Gallery. Maybe it's something that does not get talked about a lot in other offices? Anyways upon shutting down my laptop, I just thought lets make it a mission tomorrow morning (today) to write a quick blog, make a repository and publish to the Powershell Gallery to hopefully inspire other coders out there that you can do all of this before you even start work \uD83D\uDE04 if you so wish \uD83D\uDD2E"]},{"i":"code","l":"Code \uD83D\uDCAC","p":["Sadly there really isn't much code behind this module, it's a magic ✨ Powershell one-liner that does all the hardwork","Thanks for reading, hope you enjoyed"]}],[{"i":"#","p":["Powershell module which allows you to obtain URLs to GIFs for the phrase you search for. This is similar to what is provided on social media sites, and I thought it would make a cool module to build. Read about it in this blog I wrote"]},{"l":"Find-Gif Powershell Module","p":["Download Find-Gif","How fast is this guy going? Find out in MPH image comics"]},{"i":"just-an-idea","l":"Just an idea \uD83D\uDC7E","p":["Find-Gif -SearchPhrase \"Hulk smash\" -NumberOfResults 5","So yesterday was Sunday, some people think Sunday is like the most boring day of the week, or I certainly did when I was younger. Nothing ever interesting seemed to happen on a Sunday.","Find-Gif -SearchPhrase \"Boring\" -NumberOfResults 1","You like the subtle demos I am chucking in\uD83D\uDE01","Find-Gif -SearchPhrase \"FastFoward\" -NumberOfResults 1","Fast-Forward a number of years and Sunday is probably my favourite day, as I do like to just chill on a Sunday and try to relax (with 4 daughters). As it turned out this Sunday was pretty busy, with only 4 hours sleep \uD83E\uDD71 I hit the car boot in the morning with my family to see what bargins we could \uD83D\uDD0D find. Came home with some \uD83E\uDDF8 toys for my girls. Had a mate come over to catch-up on in the week, and for some good cup of ☕ Yorkshire Tea. Then I mowed the lawn, weeded the front and back garden :male_farmer:, \uD83E\uDDFD washed my car \uD83D\uDE98, checked all my car levels \uD83D\uDEE2️, went to the garage to check tyre pressure and give it a good hoover. Came back home took the kids and dogs \uD83D\uDC15‍\uD83E\uDDBA out for a good hour \uD83D\uDEB6 walk. Helped the wife with preparing dinner, then thought I need to write the blog for the ChartImage module. It was whilst writing this blog I got thinking abut the cool GIF images you can insert on tweets, and well I thought it would be something else cool to add to the website. So I went on the Powershell gallery, but to my suprise I could not find one. So even though I might have been feeling like a \uD83E\uDDDF I still wanted to \uD83E\uDD73","Find-Gif -SearchPhrase \"sign from above\" -NumberOfResults 1","Okay for me this was a calling to find an API which would allow me to make a function that I could turn into a module and publish to the Powershell gallery. One quick duckduckgo search later I just selected the top website which was tenor.com it seemed to contain all the information I needed to get coding. I saw that in the example they provided, you just needed to parameters, one parameter would be the search term and the second parameter would allow the number of results to be returned for the search term specified. Armed with this information I just opened ISE (because it loads quicker than VS Code on my crappy x86 laptop) and got writing the function. As I have learnt the art of multi-tasking having 4 daughters, I carried on writing the blog and developing the function. Now I know how APIs work and how to use them within Powershell. However the URL provided in the example just seemed to return me the GIF image hosted on he actual tenor.com site. This got me thinking that if I was to use that URL it would most likely just get redirected to that whole website page. All I was really interested in was the actual raw GIF file and where that was hosted, so I could embed that image on my website. One of the many great things about Powershell is it fjust makes sense. Like the way it is written and the cmdlets used, it's almost like you are talking (well to me anyway) secondly is the ability to pipe things along the command-line to join commands together. This allowed me to convert the JSON data returned and obtain the raw GIF image I was after."]},{"i":"function-code","l":"Function Code \uD83D\uDCBE","p":["I hope you don't find this boring"]},{"i":"how-did-you-turn-it-into-a-module","l":"How did you turn it into a Module? \uD83D\uDE35","p":["If you been doing Powershell for a little while you have probably got yourself into functions, and how cool they. But how do you turn or make a Powershell function into a module? I got to say it took me a long, long time to approach this cross-road. Mainly due to the Powershell I was writing was pretty unique to the given problem I was solving. Secondly it just seemed daunting, to be creating a module, like how did it all work, was I going to have to buy another book to learn how to make modules? Well no, the short and simple is for this particular module I created and empty folder called Find-Gif I then did a few lines of code, turned that into a function, but instead of saving as a .PS1 file I saved it as a Find-Gif.PSM1 then in the powershell console I navigated to the Find-Gif folder (as you can dot source items into the main module psd1 file), then used the New-ModuleManifest cmdlet to then create the module","Boom your done, you got a module. You just now need to copy that Find-Gif folder (or rather your module named folder) into one of the module paths easy way to find you Powershell module paths","Thanks for reading this latest blog post, I know this particular module maybe won't be very useful for well probably the majority of the Powershell community but I thought it would be cool to use Gifs on my static website to bring some motion to the static-ness. Hopefully this might even encourage you to delve into APIs \uD83D\uDCA1 as now you seen how useful they can be \uD83D\uDE04","Find-gif -SearchPhrase \"till next time\" -NumberOfResults 1"]}],[{"i":"#","p":["Powershell module to retrieve the geolocation of a given address. I have previously used websites to obtain this type of information, now I am using Powershell with this module I made. Read more on it in this blog I wrote"]},{"l":"Find-Geolocation Powershell Module","p":["Link To Download Module","Undiscovered Country is another great read Find geolocation information on IP address or Domain name"]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDC68‍\uD83D\uDCBB","p":["Yep so this time round I just boshed together an advanced function that uses a simple API call to retrieve the geolocation of either the IP address supplied, or the Domain Name supplied. So why did you bother doing this module? Well just because I love doing Powershell, hopefully keep dementia at bay, and is almost like my daily work-out instead of pumping iron and getting big muscles, I am making my brain into a sponge to absorb as much as I can. Like what can I do today that would be pretty cool but also useful not just for me, but to hopefully help someone else out in their job too, making their life easier.","I mean a good number of years ago I did look into Kali Linux quite a lot, and even had a duel booted laptop at one stage. So within the OS of Kali you have at the time I think it was like 300 tools built into this OS to make it like the ultimate hacking OS. Obviously I was using this to train myself to join the world of white hat hackers out there, but yeah it really opened my eyes to the types of useful tools out there. From memory a lot of these tools were reconnaissance tools. Tools that would gather you information about your target. Enough information gathered through reconnaissance and then you know all the weak spots that target could potentially have and the type of attack you could prevent with this knowledge.","So I don't know exactly why this particular random idea for a module popped into my head but it did. So once it did I was then on a mission to make this as user friendly as possible but also try to be a bit unique. So originally I searched on the Powershell Gallery to make sure there were not bucket loads of these type of modules out there already. Like I could only find a few, like literally a few. Each one of these modules only let you search via IP address. In my head that goes against what us mere humans can remember. Why? Well else they wouldn't have invented DNS and let everyone surf the web using domain names instead of ip addresses. Because it is easaier for us mere mortals to remember a domain name as opposed to an IP address. Thankfully the API I was looking at did support both IP address and Domain name. In my opinion that makes this module pretty unique and well worth building as it would be the only module to my knowledge offering both ways of obtaining the geolocation off of either one of these bits of information."]},{"i":"api","l":"API ℹ️","p":["You may or may not know about API aka Application Programming Interface. So here is some brief documentation","API An application programming interface is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer","So come on Adam what does that mean in cave man talk. Well to a simple person like me it would be like going to a McDonalds drive through with no queue and everything just waiting to be given to you. Still not making sense? Okay to me it is the fastest way you can possible achieve the specific answer you are looking for. So yeah maybe I could have downloaded some software to run this for me, but trust unless the program is using an API then this will give you results quicker than the program could. Or like if I was to do this manually, just the processing power and memory that firefox.exe uses on my laptop, it would be slower going via the web than it would for me to make the API call, the result is instant. I know not everyone out there has a 10 year old crappy x86 laptop to do all this experimenting on, but trust if it runs super fast on my laptop (which it does) it should be lightning fast on your nice x64 solid state drive stupid amount of ram machine. In a nutshell that is why to use an API for the task, and secondly to my knowledge APIs are normally only serving one purpose to keep them super fast. By one purpose I mean an API to find train times...It is not going to tell you what the weather will be like, or the services available on each train, it will just give you train times. I hope this paragraph has maybe made more sense than the official wiki guide above."]},{"i":"find-geolocation","l":"Find-Geolocation \uD83D\uDD0D","p":["Find out more about a geolocation the results may surprise you","Well in my last blog, I had to update it after publishing it, due to a topic that arose. That topic was my incorrect use of the GET verb, when in hindsight I should have used NEW. The awesome Steve, who I am on first name basis with (as in I know his first name) from the official Microsoft Powershell team was kind enough to tell me so backing up the other twitter user who had suggested it. So I was feeling a bit paranoid about using GET for this one, although that was my original choice of verb. The NEW verb just didn't seem appropriate for the task, as I am not producing anything new, I am showing existing information gathered from the API. I know that just like the common man I am, that FIND verb is also a common approved verb. I do like to read documentation but I didn't want to waste time from building the project. So as I figured people are using this module to find out information on the given IP address or Domain name, that FIND was the verb of choice for this module. Just to make sure so I can justify my choice of verb for the job:-","Approved Verb Documentation"]},{"i":"top-tip-add-decent-help","l":"Top Tip Add Decent Help \uD83D\uDCDD","p":["Due to the UK \uD83C\uDDEC\uD83C\uDDE7 still being incredibly hot at the moment, and the fact we don't have fancy air-conditioning it has meant me getting to sleep has taken a bit longer than usual. So instead of just laying there thinking I'm hot, I'm hot, I'm really hot. I been spending my evenings making some new modules, then writing a blog on it. I do feel very creative late at night, so try to use that creativity to do something positive, I can over-look certain things. Like adding a proper help to the module. So this time round I made sure I added a decent help message for each parameter to be used.","Please see the description in the module and do not take the biscuit on this free service. Thank you for coding responsibly."]},{"i":"until-next-time","l":"Until Next Time \uD83D\uDC4B","p":["Hopefully this module will reach out to more users than previous module may have. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product. It has kind of got me thinking about when I was building Universal Dashboard modules, like I mean that is such an awesome community with really good posts examples etc...but apart from a few no-one else really got developing Powershell React components. I mean on the forums people would be like","I wish this component existed to display on my dashboard...","For me this is like when you were young and one of your mates would double-dare you to do something really stupid, maybe even life-threatning but to turn down a double-dare was just un-heard of. Thankfully these requests were not life threatning and I gladly accepted the challenge, as most of these ideas were really cool. Anyways back to the subject, I mean I know there is like loads and loads of modules on the gallery, but you...yes you sitting there reading this, have you put a module on the gallery yet? I am not daring anyone to do any stupid challenges but if you have not uploaded a module I am sure you got some cool script you use all the time, that you could then turn into a function, maybe even an advanced function, then all you have to do is create the PSD1 file using the New-ModuleManifest cmdlet just fill in as much as the parameters as you can, and then you just need an API key to publish it. As I am always telling my 4 daughters, sharing is caring, so hopefully one of these blogs has been semi-useful or even partly-helpful to you. Thank you for reading this far.","I know times are tough, but once again. Thankfully the times we live in have not yet gone apocalyptic"]}],[{"i":"#","p":["Powershell module that allows you to generate a shorter URL for the given link you want to share. Again I know you can do this from websites, but now you can do it in the console shell. Read this blog I did to find out how","Revival is another amazingly good comic read"]},{"l":"New-ShortURL Powershell Module","p":["Link To Download New-ShortURL Module","Look what happened to this poor sole, if only they had used New-ShortURL they could have saved time typing that long URL and saved themself from this fate","Simple yet no module is currently publically available for this"]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDC68‍\uD83D\uDCBB","p":["Pow, again I just boshed together an advanced function that uses a simple API call to retrieve a brand new short URL link from hideuri.com to turn a full length URL into a very short URL. Again I find an API where you do not need to sign up to obtain a key to be able to use the API. The good folks who provide this API for free just have one limitation, which is 100 calls per minute. Which I think is more than reasonable.","So why have you gone and done another module? Well dear reader, I spotted a gap on the gallery. I personally could not find any modules offering to make a full length URL into a short URL. So I was like damn really? No-one has done this yet? Nope not from what I could find.","This got me straight on the case, to find an API which would allow me to do this and without having to sign up to anything, as no offense I thank you for reading my blog, but to me giving out an API key is like giving you my car keys, and I need my family motor. No offense to your driving skills or nothing, just like I am sure you would not want me to randomly borrow your car. Get what I am saying? It took me more time to find the website I needed, than it took to build the module. Yeah so already in my head on productivity I was down a bit as I needed to make up time for the time it took to find the API which did not require a key.","I have used sites in the past if I am running out of space on a tweet, or something similar to make the full length URL into something smaller to allow me to make the post. I am sure you may have also found yourself in this very same predicament. Like me you probably opened a browser found a site and got the web browser you were using to do the dirty work","Kids look what will happen to you if you do not go to bed when your parents tell you to","Again not that I am against using a browser, but it is wasting time at the end of the day. I do not do this all the time crunching long URLs into short URLs, but I have done it more than once, and as I am writing more blogs I will probably be doing it more often. This to me then gets a brain cell activated one of the few I have, to then make this task into an automated task, so I can do it in a jiffy as I mention in the help description.","Just in-case you missed the last blog, or you are just reading particular blogs, or this could possile be your first blog let us just quickly go over an API again...Please skip if this if you already read it in the last blog..."]},{"i":"api","l":"API ℹ️","p":["You may or may not know about API aka Application Programming Interface. So here is some brief documentation","API An application programming interface is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer","So come on Adam what does that mean in cave man talk. Well to a simple person like me it would be like going to a McDonalds drive through with no queue and everything just waiting to be given to you. Still not making sense? Okay to me it is the fastest way you can possible achieve the specific answer you are looking for. So yeah maybe I could have downloaded some software to run this for me, but trust unless the program is using an API then this will give you results quicker than the program could. Or like if I was to do this manually, just the processing power and memory that firefox.exe uses on my laptop, it would be slower going via the web than it would for me to make the API call, the result is instant. I know not everyone out there has a 10 year old crappy x86 laptop to do all this experimenting on, but trust if it runs super fast on my laptop (which it does) it should be lightning fast on your nice x64 solid state drive stupid amount of ram machine. In a nutshell that is why to use an API for the task, and secondly to my knowledge APIs are normally only serving one purpose to keep them super fast. By one purpose I mean an API to find train times...It is not going to tell you what the weather will be like, or the services available on each train, it will just give you train times. I hope this paragraph has maybe made more sense than the official wiki guide above."]},{"i":"new-shorturl","l":"New-ShortURL \uD83E\uDD90","p":["Do you want to hang about typing a super long full length URL in an emergency like this?","Before I made a plonker of myself be using a verb like GET for this task, like I may have done for a certain secure password generator. I do not like to make mistakes, and making the same mistake more than once is not how I like to roll. Not that I needed it this time, but folks please remember don't mess up your verbs, they are important to help the person using the cmdlet or function what that cmdlet or function is going to do, by the verb in the name. If you are confused or thinking what the shell is this guy talking about then please check out the link below:-","Approved Verb Documentation","Shout out to my mate Sensei Steve at the Microsoft Powershell team"]},{"i":"top-tip-add-decent-help","l":"Top Tip Add Decent Help \uD83D\uDCDD","p":["Due to the UK \uD83C\uDDEC\uD83C\uDDE7 still being incredibly hot at the moment, and the fact we don't have fancy air-conditioning it has meant me getting to sleep has taken a bit longer than usual. So instead of just laying there thinking I'm hot, I'm hot, I'm really hot. I been spending my evenings making some new modules, then writing a blog on it. I do feel very creative late at night, so try to use that creativity to do something positive, I can over-look certain things. Like adding a proper help to the module. So this time round I made sure I added a decent help message for one parameter that is used. And a whole two examples.","Please see the description in the module and do not take the biscuit on this free service. Thank you for coding responsibly."]},{"i":"i-hope-you-had-fun","l":"I hope you had fun \uD83D\uDC4B","p":["Hopefully this module will reach out to more users than previous module may have. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product.","Well it has literally just gone past midnight so I really need to get my beauty sleep, as I now got to think about what I can do for my next blog, I am finding these a blast doing them, as it is so easy using this Powershell retype module to produce these documentation blog pages on the stuff I am working on. I do all the typing in notepad, so if you have noticed a good few spelling mistakes, that is why, because I literally sit and type out what is going on in my brain. So these blogs do not take to long to produce, as I like to think I can type at a decent speed, and it is far more quicker than me ever attempting to document this on paper then type it up. But weirdly I have worked with enough people who do things in such a fashion.","Maybe this last little paragraph might tempt you to get using this retype module and get creating weird and wonderful blogs like this one. Or maybe to use it as your in-house documentation product, potentially saving your company big bucks, and maybe earning you a new job to show the masses why are they doing things the hard way? Hopefully you will not loose your job in your proposal idea as I cannot afford to get sued by anybody.","Again thanks if you made it all the way here to the bottom of the blog, either you are a very dedicated reader, or maybe I just did not type enough content this time round to drag it out. Either way stay safe until next time.","Sorry what is that madam? You did not like this blog very much? Well I am sorry if I did disappoint you, but please put your bra back on, we might have kid readers out there"]}],[{"i":"#","p":["Powershell module to give you the power of the dictionary right from your Powershell console. No more needing to lift that heavy dictionary and scroll through it to find that word, use this module instead"]},{"l":"Search-Dictionary Powershell Module","p":["Link To Download Search-Dictionary Module","Imagine if we lived in todays world without technology. We might have to read the dictionary to pass the time","The English language is a great language, not just because this is my primary language, but because it has so many cool words to choose from"]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDCD6","p":["Yep same story been looking at existing public APIs out there that require no authentication or key to be used. I then stumbled across this website:-","The API I am using","Again I built this module because when checking the powershell gallery for dictionary I was not getting any results returned back to me. So I thought it would be a good idea to bring a built in Powershell dictionary I could use directly from the shell.","I know this is not a spell-checker so I did build in some basic error handling on the module to give you a meaningful error message should there be an issue with the word you are trying to search for.","As you may have noticed but I like to use a lot of comic pictures in my blogs from comics I have read. Well just so happens I also know some real-life super-heroes. You do not believe me?","A certain paladin I know actually owns this impeccable machine of fascination","Just in-case you missed the last blog, or you are just reading particular blogs, or this could possile be your first blog let us just quickly go over an API again...Please skip if this if you already read it in the last blog...or previous blog to that."]},{"i":"api","l":"API ℹ️","p":["You may or may not know about API aka Application Programming Interface. So here is some brief documentation","API An application programming interface is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer","So come on Adam what does that mean in cave man talk. Well to a simple person like me it would be like going to a McDonalds drive through with no queue and everything just waiting to be given to you. Still not making sense? Okay to me it is the fastest way you can possible achieve the specific answer you are looking for. So yeah maybe I could have downloaded some software to run this for me, but trust unless the program is using an API then this will give you results quicker than the program could. Or like if I was to do this manually, just the processing power and memory that firefox.exe uses on my laptop, it would be slower going via the web than it would for me to make the API call, the result is instant. I know not everyone out there has a 10 year old crappy x86 laptop to do all this experimenting on, but trust if it runs super fast on my laptop (which it does) it should be lightning fast on your nice x64 solid state drive stupid amount of ram machine. In a nutshell that is why to use an API for the task, and secondly to my knowledge APIs are normally only serving one purpose to keep them super fast. By one purpose I mean an API to find train times...It is not going to tell you what the weather will be like, or the services available on each train, it will just give you train times. I hope this paragraph has maybe made more sense than the official wiki guide above."]},{"i":"search-dictionary","l":"Search-Dictionary \uD83D\uDCD3","p":["The Dark Age where a modern world is rid of technology another great read","This time I went to the approved verb documentation, and for me this in my head I want to search the dictionary. I mean I could have done Find-Word but I wanted to let the user know they are using a dictionary, and Find-Dictionary to me sounds like I am looking for a dictionary. Hence I went with Search-Dictionary as I am finding a word (object) in a dictionary (container) at least that is how I justified this Search verb I used.","Find vs. Search Use the Find verb to look for an object. Use the Search verb to create a reference to a resource in a container.","Remember if you are unsure of what verb you can use, or what verb you should use, then please check out the link below for full explanation.","Approved Verb Documentation"]},{"i":"top-tip-add-decent-help","l":"Top Tip Add Decent Help \uD83D\uDCDD","p":["Good news, the heat-wave has finally stopped so no excuses for not writing some decent help the first time round. This is the help synopsis I wrote for this particular module.","Look I know this is not the worlds greatest module, and it will not earn me fame or fortune, but now I can find information on a particular word I might want to use to make sure it fits into context with what I am writing"]},{"i":"i-hope-you-had-fun","l":"I hope you had fun \uD83D\uDC4B","p":["Hopefully this module will make you think about what you can do with an API. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product.","Me riding off into the sunset after making another module to make the world a better place"]}],[{"i":"#","p":["Powershell module to give you a choice of avatars on the name you provide. You might not want to display your own picture online so why not use this Powershell module to find your perfect avatar"]},{"l":"New-Avatar Powershell Module","p":["Link To Download Search-Dictionary Module","Ever wondered what you could like as an avatar","If you need a new avatar, then this is the module for you, as you just provide a name for your new avatar and it is magically generated for you."]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDCD6","p":["Yep same now old story, I been looking at existing public APIs out there that require no authentication or key to be used. This is so if you do decide to download this module you do not need to sign up for an API key. I then found this website which generates 4 different types of avatars:-","The Avatar API I am using","Again I built this module because when checking the powershell gallery for an avatar I was not getting any results returned back to me (apart from the one I done for Universal Dashboard). So I decided it would be a good idea to make this this into a module, to allow others to be able to create custom awesome looking avatars all from the comfort of your own shell.","Another avatar type you can generate with this module","Just in-case you missed the last blog, or you are just reading particular blogs, or this could possile be your first blog let us just quickly go over an API again...Please skip if this if you already read it in the last blog...or previous blog to that, or maybe the one before that."]},{"i":"api","l":"API ℹ️","p":["You may or may not know about API aka Application Programming Interface. So here is some brief documentation","API An application programming interface is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer","So come on Adam what does that mean in cave man talk. Well to a simple person like me it would be like going to a McDonalds drive through with no queue and everything just waiting to be given to you. Still not making sense? Okay to me it is the fastest way you can possible achieve the specific answer you are looking for. So yeah maybe I could have downloaded some software to run this for me, but trust unless the program is using an API then this will give you results quicker than the program could. Or like if I was to do this manually, just the processing power and memory that firefox.exe uses on my laptop, it would be slower going via the web than it would for me to make the API call, the result is instant. I know not everyone out there has a 10 year old crappy x86 laptop to do all this experimenting on, but trust if it runs super fast on my laptop (which it does) it should be lightning fast on your nice x64 solid state drive stupid amount of ram machine. In a nutshell that is why to use an API for the task, and secondly to my knowledge APIs are normally only serving one purpose to keep them super fast. By one purpose I mean an API to find train times...It is not going to tell you what the weather will be like, or the services available on each train, it will just give you train times. I hope this paragraph has maybe made more sense than the official wiki guide above."]},{"i":"new-avatar","l":"New-Avatar \uD83D\uDCD3","p":["How about a monster avatar from a name you supply","So as I am generating a new random avatar based on the name supplied using this module. New seemed like the best module of choice to go for.","New vs. Add","Use the New verb to create a new resource. Use the Add to add something to an existing container or resource. For example, Add-Content adds output to an existing file. New vs. Set","Use the New verb to create a new resource. Use the Set verb to modify an existing resource, optionally creating it if it does not exist, such as the Set-Variable cmdlet.","Remember if you are unsure of what verb you can use, or what verb you should use, then please check out the link below for full explanation.","Approved Verb Documentation"]},{"i":"top-tip-add-decent-help","l":"Top Tip Add Decent Help \uD83D\uDCDD","p":["Good news, the heat-wave has finally stopped so no excuses for not writing some decent help the first time round. This is the help synopsis I wrote for this particular module.","Look I know this is not the worlds greatest module, and it will not earn me fame or fortune, but now I can now generate a random avatar to either keep my kids entertained for 5 minutes, or I can use them to produce pictures for avatars I may need.","When building this module instead of using switches as the parameter sets, I decided on ValidateSet to allow the choice for the parameter to be automatically generated, this to me me more sense then having to using Parameter Set Names to show that you could only supply one type of avatar to be generated. If you know of a better way, then please send me a post-card with your answer on it, or alternatively drop me a tweet, it would be great to hear from you."]},{"i":"i-hope-you-had-fun","l":"I hope you had fun \uD83D\uDC4B","p":["Hopefully this module will make you think about what you can do with an API. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product.","Yep this module is pretty pointless, but apart from the one I did for Universal Dashboard, which you either need that product or Powershell Universal to run, a module to create an avatar did not exist on the Powershell gallery hence I made this mini-project into a module.","Apparently this is what my name generates for a kitten avatar"]}],[{"i":"#","p":["Powershell module that allows you to find out all about the crime in your area. This only works for people living in the UK. Find out how I made this Powershell module in this blog"]},{"i":"find-crimeuk-powershell-module","l":"\uD83D\uDC6E Find-CrimeUK Powershell Module","p":["Link To Download Find-CrimeUK Module","Please do not take fighting crime into your own hands like this guy did","I believe members of the public have the right to know about crime in the area they live-in within the United Kingdom. Even the crime that is not reported in the papers. The UK police have a public API which can give you this information, however it is not easy enough for the general public to use or even know it exists. I want to bridge those gaps"]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDE93","p":["Yep same boring old story, I been looking at existing public APIs out there that require no authentication or key to be used. This is so if you do decide to download this module you do not need to sign up for an API key.","Information on the Police API I am using","I had a mate phone me about all these cops that were parked up down the road, seemed like a pretty big raid to have that much police and wagons involved. Anyways that got me thinking I wonder if this will be in the local paper? Will I ever know about what type of crime was happening around the corner? I feel like I had a right to know, but in reality it probably will not appear in the paper.","So a bit of internet searching later, and I found that the UK police force has an API which will allow me to obtain this information. Although this information might not be updated immediately I am confident that it will be on there once the police record it.","However if you look at the API instead of the Police making this easy enough for the general public to use, they made it so it would only accept the URL if it contained a latitude and longitude and the date in a YYYY-MM format. A bit like the internet us humans cannot remember long number of digits like random IP addresses or longitudes or latitudes. So I built in a sub-function to allow me to over-come this. For this I used the following API","API to produce latitude and longitude","Using this API as a sub-function it would allow me to use location names in the main-function, rather than getting the end-user to look up their latitude and longitude location to be able to use this function. So in my head this is what the police should have done to make this more user-friendly. I can only assume they did not, as when you specify a city name, this can return lots of different latitudes and longitudes for that destination.","Do not put yourself in danger"]},{"i":"did-you-miss-the-last-few-blogs","l":"Did you miss the last few blogs? ⚠️","p":["Just in-case you missed the last blog, or you are just reading particular blogs, or this could possile be your first blog let us just quickly go over an API again...Please skip if this if you already read it in the last blog...or previous blog to that, or maybe the one before that."]},{"i":"api","l":"API ℹ️","p":["You may or may not know about API aka Application Programming Interface. So here is some brief documentation","API An application programming interface is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer","So come on Adam what does that mean in cave man talk. Well to a simple person like me it would be like going to a McDonalds drive through with no queue and everything just waiting to be given to you. Still not making sense? Okay to me it is the fastest way you can possible achieve the specific answer you are looking for. So yeah maybe I could have downloaded some software to run this for me, but trust unless the program is using an API then this will give you results quicker than the program could. Or like if I was to do this manually, just the processing power and memory that firefox.exe uses on my laptop, it would be slower going via the web than it would for me to make the API call, the result is instant. I know not everyone out there has a 10 year old crappy x86 laptop to do all this experimenting on, but trust if it runs super fast on my laptop (which it does) it should be lightning fast on your nice x64 solid state drive stupid amount of ram machine. In a nutshell that is why to use an API for the task, and secondly to my knowledge APIs are normally only serving one purpose to keep them super fast. By one purpose I mean an API to find train times...It is not going to tell you what the weather will be like, or the services available on each train, it will just give you train times. I hope this paragraph has maybe made more sense than the official wiki guide above."]},{"i":"find-crimeuk","l":"Find-CrimeUK \uD83D\uDEA8","p":["Again I do not recommend fighting crime","As I want to find out information about crimes that had happened. Find seemed like the best choice of verb to use.","Find (fd) Looks for an object in a container that is unknown, implied, optional, or specified.","Remember if you are unsure of what verb you can use, or what verb you should use, then please check out the link below for full explanation.","Approved Verb Documentation"]},{"i":"top-tip-add-decent-help","l":"Top Tip Add Decent Help \uD83D\uDCDD","p":["Due to me not adding decent help on more than one occasion. I am now determined to make sure I include decent help to allow the average person like myself to understand how to get using the module in as little time as possible.","Doh! I just noticed I did not include specific help for each parameter. So maybe I should just write that now, to justify this human error. So this time I decided to give the -LocationName parameter a few alias names City, Town and Village just figured these alias names for the LocationName parameter might make more sense to you depending on where you live. Next the -Year parameter has a validate set parameter, as this API has not been around all that long I figured a paramter validate set would be best to use to force the end-user to only select one of three different years. Lastly the -Month parameter needed the month to be entered in a two digit format. Again to avoid human error I decided a validate set was best to use for this parameter, again forcing the end-user using this to select a correct value that would be accepted by the API.","Yes this is only available to people in the UK. So this will not bring back information for other countries just the UK, and from reading the API Scotland is not included."]},{"i":"i-hope-you-had-fun","l":"I hope you had fun \uD83D\uDC4B","p":["Hopefully this module will make you think about what you can do with an API. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product.","Output of API data returned"]}],[{"i":"#","p":["Powershell module to identify if a particular website is up or down. A random tweet inspired this module to be created, as that person wanted to know if this website was working or not. Well no more need for tweeting, just use this module to find out that information"]},{"i":"search-isitup-powershell-module","l":"\uD83D\uDC40 Search-IsItUp Powershell Module","p":["Link To Download Search-IsItUp Module","Something else I saw a gap in the gallery to fill","Yeah okay so it may have not been that big a gap, but still might stop people asking if a website is up or down."]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDC53","p":["Okay so the story behind this epic quest, was I was flicking through twitter, and saw someone asking if this particular website was working. Not that this is enough to make me jump out my chair flip on my cape and costume and fly off to save the day. But it did get me thinking if there was a module out there to check if a website is up or down. I did not find one, so that sparked \uD83D\uDCA1 an idea to look for something which would do this.","Official IsItUp.Org Site","I stumbled across this site above when looking for how to achieve this, and although I am not using an API to get this data, it involves a slightly different approach. As always in life there is more than one way to do something, it might not be the best way, but if it works, and is done in a quick time, then that is enough for me to go with that method.","So I found that by manually using this site, it changes the URL based on the website name you provide it. So in the below link I wanted to see if news.bbc.co.uk was up or down","Link to check if news.bbc.co.uk is up or down","I noticed that the URL had changed to the website I had provided, so I could use the term URL Hacking to provide the website name as a parameter and feed it to this URL isitup.org/param which would then produce the brief text that is displayed on the webpage after the check is complete","news.bbc.co.uk is up \uD83C\uDF89","It took 0.101 seconds to get a 200 status code from an IP address of 151.101.112.81.","Keep thinking about a plan"]},{"i":"figured-use-invoke-webrequest","l":"Figured Use Invoke-WebRequest \uD83C\uDFAF","p":["So I decided this was a good enough webpage to use to get this information so the next time someone is asking is this website up or down? I can point them to use this module which will then tell them the answer, and they then do not have to ask the whole world a question they can now answer themself. Yeah I know in reality that this will probably not happened, but I was now commited enough to try and solve some big-time first world problems with this idea \uD83D\uDCA1","So firstly I used the Invoke-WebRequest to connect to the site, and pass the website name I am interested in as a paramerter and get back the results. Now I know this is not the most complicated function out there, as it is only a few lines long. However, it will show those out there that do not know how to scrape webpages for data a nifty little trick.","As mentioned the data returned from the website is minimal, but the webpage itself is made up of HTML and I need to filter through that HTML to get just the bits of text I needed."]},{"i":"search-isitup-code","l":"Search-IsItUp Code \uD83D\uDD0E","p":["Just because I thought it would be cool to make this a module","As you see I have included a decent help file for this module, which also includes a few examples. I thought about the DomainName parameter, and the fact that people might want to check multiple websites at the sametime, so I allowed this parameter to accept pipeline input to make this happen. You also can see how I extracted the data I wanted from the HTML off of the website, and display this onto your console screen. I just hate leaving the console to do tasks, so this made that happen."]},{"i":"thank-you","l":"Thank you \uD83D\uDC4B","p":["Hopefully this module will make you think about what you can do with the data returned from any website and how you could scrape that data automatically. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product. The Powershell Gallery now has a module to see if any website or websites are up or down. Without even leaving the shell to obtain this information","Until my next blog"]}],[{"i":"#","p":["Powershell module that will keep a given process ID main focus. So will prevent any other windows going ontop of the selected PID"]},{"i":"alwaysontop-powershell-module","l":"\uD83D\uDCCC AlwaysOnTop Powershell Module","p":["Link To Download AlwaysOnTop Module","Link To Original Site","Time to cook up a new module to tackle a bigger probblem","This module came about after me joking to a tweet about creating a module for their problem which was frusting them."]},{"i":"quick-catch-up-on-life","l":"Quick Catch-up On Life ⏳","p":["Yep I had a mini-vaction of not writing so many blogs as often. Mainly due to being 100% focused on my new job and wanting to spend the time in the evening thinking about all the scripts and things I will be writing and stuff I need to do. On-top of having four daughters and an amazing wife, life keeps me pretty busy outside of work too.","I did want to write a blog last weekend, but think I was still in shock that Charles Olivera lost his fight in the main UFC event for last weekend. Like I think I was feeling down in the dumps for him. I was sure his BJJ was going to beat the Russian Sambo, but it wasn't to be his night, so fair-play to Islam for now being the title holder.","Then I got my own dilemma going on with my laptop, a mate who comes to visit on a Sunday for a cup of tea and a catch-up brought this dog along that he is dog-sitting, and it was a little dog. But damn this dog ran across my already decrepid laptop several times! Then the next day my laptop didn't even want to turn on, after resetting the memory and various other things, my laptop finally booted, wahoo! However I then only seemed to have the left-hand-side of my keyboard keys working. Doh! I mean yeah I can use on-screen keyboard to get over it, but not to write a whole blog, I need a fully functional keyboard.","Had to get my car to the garage as well, as not been driving quite right, plus I got an MOT coming up soon. Then find out I need to replace my front-tyres so got that done today, but yeah just one thing after another. Plus being half-term and trying to entertain the kids after I finish work, letting them stay up a bit later to watch movies, it doesn't leave a lot of time to write some blogs.","Went to play pool last night and like I enjoy English pool and the club I go to it is a great atmosphere and the same price to play for a game as what it was back in the day 50p. They recently had all the tables resurfaced, so really is amazing to only pay 50p a game. Makes a very cheap evenings entertainment. I managed to win a few games but lost over-all, I do always feel the main-score doesn't reflect just how close all the games were. But yeah fair-play to my mate he always seems to get the upper-hand.","I am still loving this job I have been working in since late September. I know I have not been there that long but there is just so many great things about this company I work for does for employees that no other companies I have worked for in the past have done for employees. Like it is just an amazing feeling to wake up each morning, knowing I will be doing scripting realted tasks for the majority of my day. Obviously for some-people this might be their nightmare, but for me it is just a dream job so it is an amazing feeling to have landed a position that wants me to automate tasks, and contribute ideas to the team. I have also got to use a few new modules I have been wanting to use for quite sometime but just not got round to it yet. So it was awesome to use ImportExcel and also Selenium which again I have wanted to try for a long-time but just not got round to it. So was awesome to use these modules recently to complete various tasks I had been asked to complete.","Great to use these new to me modules just like reading new comics"]},{"i":"back-to-the-problem","l":"Back To The Problem \uD83D\uDCAC","p":["So someone I know tweeted their frustration, with a GIF to say how annoying it is that when you are typing something and a pop-up window then suddenly steals the focus of the window and all your typing is lost. Yep this same thing has happened to me a number of times and yes it is irritating. Although these days I can touch-type so can keep a constant eye on the screen, but yeah it is still frustrating.","Anyways I jokingly replied to his tweet saying maybe I should make a module for that? Although I had jokingly suggested it, this suddenly drove me on a mission to find something, or some-way of easily making a given window of your choice that you currently have open, and make that the main focused window. I mean I couldn't find something obvious on the Powershell gallery already out-there (although I was later informed that there was a module out there that did include this functionality) and with that I used the mighty duckduckgo to find me the answer to this tweet problem.","Link To Actual Application"]},{"i":"so-why-did-you-not-use-crescendo","l":"So Why Did You Not Use Crescendo ❔","p":["Just because you can do crescendo doesn't mean you should do crescendo. What am I talking about? Well for starters to get the main benefit from making a CLI into a cresendo module is having that CLI given output in JSON or something similar so you can convert that into Powershell objects. Plus this application is just an excutable, it does not have a CLI to work with, or parameters you can pass it.","So as this excutable just runs as a background process therer was no need in my mind to use crescendo to get this job done."]},{"i":"read-the-manual","l":"Read The Manual \uD83D\uDC53","p":["Okay so there was no manual to read. It was a case of pressing the Ctrl+SPACEBAR on the selected window to make that have the focus","So this was enough information to get my brain ticking, and in my mind it was exactly as I read it on-screen. I needed to double click the application executable to start that as a process, select my window I want to have focus and then press the given hotkeys * Ctrl+SPACEBAR and bish-bash-bosh it is done.","I opened the good-old-faithful Powershell_ISE to get this task done. After about 15 minutes I figured this was the answer to the problem"]},{"i":"thanks-for-reading","l":"Thanks For Reading \uD83D\uDC4D","p":["Hopefully this module will make you think about what you can do with reading someone else's tweet dilemmas. As always I like to try and keep things interesting, and to try and make something unique and useful as the end module product.","Never Give Up Anything Can Be Done"]}],[{"i":"#","p":["Imagine a search engine on steriods then imagine that times 100"]},{"i":"powershellai","l":"\uD83E\uDD16 PowerShellAI","p":["What do you think about AI?"]},{"i":"amazing-module","l":"\uD83C\uDF81 Amazing module","p":["No, I cannot claim to fame of this module, but I can tell you it has got to be my favourite module I have come across in a long-long-time. I know I started a new job in September 2022 and since then I really have not done much blogging or designing modules, as well, I have just been 100% focused on this new job as it pays the bills and puts food on the table for my family, which to me is the number one priority in life. I know I have tweeted a lot about this job, and even said it on the PowerShell Podcast but like this is the best job I have ever had in my lifetime, and I do not want to do anything which would jeopardize my position. So was great to have blessings from my work to attend PSDayUK and to be given the opportunity to do the work I do. However, I have booked 4 days of holiday and well this is day 2, and I am thinking I have been so behind on writing blogs and creating modules. So, to make this happen I am writing this blog today whilst I have some free time on my hands. I feel blessed to have so many awesome contacts on Twitter and LinkedIn. One of these people is @clatent who has been posting some great one-liners for PowerShell and recommending modules to use. One of these posts was about using PowershellAI which was using ChatGPT which I had also read some articles in the paper on recently. Normally I skim read stuff but as this module was smashed together by Doug Finke, I figured it must be pretty-damned good. The results I got were mind-blowing. It was like having internet for the first time all over again. Honestly, I cannot type how amazing OpenAI is until you have tried it. As a man, and following the man-code in life of never reading the instructions and just figuring it out, I did decide to read up on the examples provided by OpenAI OpenAI I was thinking others who used this module might either be over-whelmed or just not knowing how to ask OpenAI the right type of questions. I put a few examples together and got Tweeting them. To my surprise I was getting the most likes I had ever got, and encouragement from the man himself Doug Finke to make this as an official contribution to the repository. I decided to get out of my hermit shell I had been living-in and make a fork of this repository then contribute to it. This is what I did right here:- Contribution","Come join the AI fun","If you have not got yourself a copy of this module get yourself a copy by visiting the gallery. I feel like I could publish a book on this module alone, so I really do not want to waffle on for ages about how great this module is. As I having a feeling that there will be many more blogs to come featuring either this module or using the tech behind this module aka OpenAI to open doorways to paths you never thought you could cross. Stay tuned for more adventures on PowerShell coming to this blogsite real soon!"]},{"l":"Written for me","p":["Have you ever faced a real-world problem that seemed unsolvable with traditional programming techniques? OpenAI may be your solution! OpenAI is a powerful tool that uses artificial intelligence to help you accomplish complex tasks. Whether you're working on natural language processing, image recognition, or machine learning, OpenAI can act as a superhero sidekick, providing you with the necessary tools to solve even the most challenging problems.","One of the key benefits of OpenAI is its ability to work with large data sets. Traditional programming techniques often require you to manually manipulate data, which can be time-consuming and prone to errors. OpenAI, on the other hand, can quickly and accurately process vast amounts of data, enabling you to work more efficiently and make better-informed decisions. With OpenAI, you can analyze complex data sets, identify patterns, and make predictions based on real-world data.","Another advantage of OpenAI is its ability to learn and adapt over time. Unlike traditional programming techniques, which require you to manually code each step of a process, OpenAI can continuously learn and improve its performance. As it learns more about a problem, it can adapt its approach to better solve the problem, making it an invaluable tool for tackling complex and ever-evolving real-world challenges.","Finally, OpenAI can act as a superhero sidekick by helping you automate mundane tasks. Many real-world problems involve repetitive tasks that can be time-consuming and tedious to perform manually. OpenAI can automate these tasks, freeing up your time to focus on more important tasks. With OpenAI as your sidekick, you can work more efficiently and effectively, allowing you to achieve your goals faster.","Do not worry sure it will be ok"]}],[{"i":"#","p":["World exclusive spellchecker for Powershell"]},{"i":"psnetspell","l":"\uD83D\uDD21 psNetspell","p":["Spelling reminds me of these guys, although they look much older now","Get psNetspell here"]},{"i":"super-spellchecking-module","l":"\uD83C\uDF81 Super Spellchecking Module","p":["things seemed to have changed on the street","I went on a massive drive last year with this website to get recognised. Mission accomplished! I have chatted live with Jason Helmick, got invited to several PowerShell events and Podcasts. Got offered to write a book, got offered my dream job. So many ticks in all the right boxes, it did not go without pain and struggle, as last year I was proper skint. I was looking for another job, and wanted to find the right job but this was taking longer than expected, and things were getting tight in the Bacon house-hold. Being able to support my family is key to me in life, but for I think the first-time we were all living off my wife’s wages. Thankfully I got a super-supportive-amazing wife, who kept encouraging me to wait for that perfect job, as I had turned down a few support jobs. I was just feeling fed-up in life, I guess working in a particular industry for so long, and having skills but not wanting to just take the first job that comes along as you will not be making full use of the skills you have or what you could be doing."]},{"i":"job-hunt-made-me-blog-more","l":"\uD83D\uDD0E Job Hunt made me blog more","p":["I was hungry","During this time in-between job hunting I found it helped me to blog, as I felt I was getting the word out there that I love PowerShell and I was looking for work, and it seemed like I was getting to know and talk to the right people, but I was doing all of my website work and design in good old trusted notepad.exe. Yes, that is right notepad. Using ReType to design the website meant I only needed to use Markdown and for me that is kinder-garden style HTML. Plus, if I have not stressed enough, I was totally skint, no office license, no spell check. This I felt was one of my downfalls to writing these blogs, was spelling mistakes. I know that may seem rather pedantic to you, but it would annoy the heck out of me if I realised then never got round to actually updating the mistakes annoyed me even more. I had made a few binary modules, but well never got round to making a module to do this."]},{"l":"PowershellAI to the rescue","p":["new ideas","That is until I discovered OpenAI and seeing what module I could cook-up with my ever-so helpful side-kick AI Chatbot. Again, this is one of those things that annoys me when the only examples Microsoft can provide is C# code. Which can either totally put you off reading the article, or make it extremely difficult to understand. However, I had asked OpenAI about a .Net spellchecker, and found a webpage showing this in a windows form but written in C#. This was actually one of the libraries of examples on nuget.org but could not figure out how to compile it. I remember even getting a reply from Steve Lee on the Microsoft PowerShell team saying he thought this was a good idea. So with wanting to write blogs again, but this time have a poor-mans spell-checker for free in PowerShell seemed like it was a project I must complete."]},{"i":"it-took-more-than-one-question-to-solve","l":"\uD83C\uDFC1 It took more than one question to solve","p":["I did not get to this point","This was not a one-hit wonder, as in I did not get the perfect code first time round, but with keeping the conversation history I was able to get the OpenAI chatbot to help in assisting correcting these errors. Then I finally had what I had dreamed of bringing to PowerShell psNetSpell a fully functional spellchecker that can check a document for spelling mistakes and correct them. I was super-pleased with the end-result, as I wanted this last year when I was blogging. Without the help of third-party software such as PowerShell Studio I would not have been able to do this on my own. That is the crazy thing about this OpenAI it can really work magic in helping you solve a real-world problem."]},{"i":"should-work","l":"\uD83E\uDD7C Should Work","p":["I did some testing","The module should automatically add the required .dll file and the dictionary file automatically, which are both stored in the same directory the function is running from, and calls that via the $PSScriptRoot built-in variable. So all you need to do is provide a path to the document you want to check for spelling mistakes. I did only include the en-GB dictionary, however if you were to download another dictionary file you can pass this in via the -DictionaryDirectory parameter to specify the directory that you have stored this dictionary file in. I hope this module finds its way into your PowerShell tool-kit of modules, and remember OpenAI helped me with this project. Maybe it can help you too."]},{"l":"Thanks for reading","p":["Grab the module using the link below Get psNetspell"]}],[{"i":"#","p":["Pure Powershell Ascii Art from image"]},{"i":"psasciiart-true-powershell","l":"\uD83D\uDD8C️ psAsciiArt True Powershell","p":["Get psNetspell here"]},{"i":"history-of-ascii-art","l":"\uD83D\uDC74 History of ASCII ART","p":["Here we go","ASCII art is a form of digital art that uses characters from the ASCII character set to create images. ASCII stands for American Standard Code for Information Interchange, which is a character encoding standard that assigns a unique code to each character. The art form was first developed in the 1960s, when computer art was in its early stages. The limited number of characters available in the ASCII character set made it a challenging medium for artists, but it also encouraged creativity and experimentation. ASCII art became popular in the 1980s with the rise of personal computers and bulletin board systems (BBSs), which were online communities that used ASCII art to decorate their messages and forums.","ASCII art has a rich history and has been used in various ways over the years. In the early days of computing, ASCII art was used for practical purposes, such as creating graphics for technical manuals and documentation. However, it soon became a popular form of self-expression and creativity, and artists began using it to create digital art. ASCII art has also been used in gaming, where it has been used to create characters, maps, and other game elements. Today, ASCII art continues to be used by artists and enthusiasts alike, and it has become a part of internet culture. Its popularity is a testament to the enduring appeal of this unique and versatile art form."]},{"i":"so-powershell-is-about","l":"\uD83D\uDE44 So Powershell is about...","p":["Powershell is a robust scripting language used for automation tasks in Windows environments. It provides an extensive set of cmdlets for carrying out system-level tasks, making it an excellent choice for IT professionals who want to streamline their workflows. A new Powershell module is being introduced on the Powershell Gallery, which will make creating ASCII art from images possible."]},{"i":"what-is-this-about","l":"\uD83D\uDE15 What is this about?","p":["The ConvertTo-AsciiArt function in the new module accepts a path to an image file, width, and height parameters, and produces ASCII art from the image. The function first loads the System.Drawing namespace, loads the image file using the FromFile method, resizes the image to fit the console, and then converts the image to ASCII art. It uses a series of if-else statements to assign ASCII characters to each pixel based on its brightness level. The resulting ASCII art is displayed in the console.","The ConvertTo-AsciiArtColor function is another function included in the module. Like the previous function, it accepts a path to an image file, width, and height parameters. The function resizes the image to fit the console and then converts each pixel to a corresponding ASCII character based on its brightness level, just like the previous function. However, it also sets the foreground color of each ASCII character based on the pixel color. This allows the function to create a more realistic representation of the image in the console."]},{"i":"code-behind-the-magic","l":"\uD83D\uDC07 Code behind the magic","p":["Hope that was some good bedtime reading"]},{"l":"Thanks for reading","p":["Grab the module using the link below Get psAsciiArt Here","Stay Safe"]}],[{"i":"#","p":["Powershell Binary module giving you the power to actually read the contents of PDF documents with-in the Powershell console window. So many possibilities with this module, read more on it in this blog I wrote"]},{"l":"ReadPDF Powershell Module","p":["ReadPDF Download","Happens to me everytime I use ReadPDF"]},{"i":"pdf-used-to-just-be-adobe-reader","l":"PDF used to just be Adobe Reader \uD83E\uDD16","p":["Nowadays there is so many different PDF readers and writers. I mean even Microsoft Word now allows you to save as PDF. The Portable Document Format has really exploded in the amount it is used. However have you ever tried to do something like:-","Then get returned something like this...","Believe me my CV does not look like how Powershell just output it to the screen. I even had a problem at a previous company where the 4000 invoices needed to go out but the system was broke that normally did it. This particular issue had to be sorted that day else no invoices were going out which could have led to the collapse of the business. No problem, right? I managed to get the one huge PDF, split it via book mark using some third party command line tool, then I had to import a .DLL textsharp and load that into Powershell, which allowed me to do a regular expression to match within the PDF of the email address, and email it to the right person. Thankfully this all worked and this method was used for several months until the underlying issue was resolved by third party software vendors."]},{"i":"pdf-pig","l":"PDF Pig \uD83D\uDC37","p":["Yes you did read that title correctly. So I went to nuget.org and I found I thought with the naming this would make an ideal first Powershell binary module. So this is the following .CS file I constructed which allowed me to make this into a Powershell module."]},{"i":"powershell-readpdf","l":"Powershell ReadPDF \uD83D\uDEE0️","p":["So after I built this into a module, you only get the .DLL file you have created, you need to manually make the .PSD1 and .PSM1 files yourself. Anyways I wanted to test the module I had built, so this module does one thing. It reads a PDF file, word by word, and outputs that to the screen. So that's not great, but using a bit of Powershell code I could now read my .PDF CV in Powershell console directly.","Boom I was now able to get all the text from my CV file","But what if you just want to see if the document contains a particular word? No problem","Okay but I need to know in what way this word was used. No problem","I think this was a perfect introduction for me to get into writing binary modules. I hope this post has enlightened you on this module \uD83D\uDE03"]}],[{"i":"#","p":["Powershell Binary module, possibly the coolest on earth. As this allows you to convert your online digital comics to your favourite format. Pretty neat right? I know not everyone is into comics but this is still totally worth reading....honest"]},{"l":"ComicConverter Powershell Module"},{"i":"comics-are-not-just-for-kids","l":"Comics are not just for kids \uD83D\uDEB8","p":["Get ComicConverter","Well you may have guessed by the pictures I posted I really \uD83D\uDE0D love reading comic books. It's sad but true \uD83D\uDE01 and now that is over and done with lets look at a comic that is a great bedtime read for your kids \uD83D\uDE32"]},{"i":"nuget-package","l":"Nuget Package \uD83D\uDCE6","p":["Again off I went to nuget.org to see what goodies could be made into awesome Powershell modules. See when building something for the Powershell gallery you kind of have to see if it has been done before, and if it has, does that mean it will be worth while? So I pretty much know all my Universal Dashboard modules were unique so that's cool, and thankfully for me, it doesn't seem there are many other comic fans out there, but I did find","So at least I had something to work with. Sure enough checking the Powershell gallery yeilded zero results. Off I went constructing this .CS file to include every possible conversion method this package offered","I know this is probably not the most effective use of C# to get the job done, but it all works, which in my book is a win."]},{"i":"powershell-gallery","l":"Powershell Gallery \uD83D\uDE0D","p":["After doing some tests on various comics I own I was able to verify that this all works, but sadly is probably not that useful to most of the community. On the plus side this is a world exclusive first comic book module to the Powershell gallery","Making dreams come true"]}],[{"i":"#","p":["Powershell Binary module for the Retype application which is a static website generator to produce beautiful looking MARKDOWN webpages. I used this module I created to build this website you are looking at. More information in this blog I done"]},{"l":"Retype Powershell Module","p":["Get Retype Here","Retype is an awesome static site generator using markdown"]},{"i":"super-easy-web-design","l":"Super easy web design \uD83D\uDC76","p":["You may have guessed this already but yes this whole site has been developed and done using the Install-Module Retype and plain Notepad just mainly typing what's in my head to document all the recent work I done. I even smashed a demo website last night which took me less than an hour and I had it published on the internet. Seriously this is so fast, it can build your entire website in seconds. All you need to provide is some simple markdown files with the information you want to display. I only really got to try this module out last night and was able to smash this demo website and have it published to the internet in under an hour","My Demo Retype Website \uD83D\uDC49"]},{"i":"please-give-it-a-go","l":"Please give it a go \uD83D\uDE4F","p":["I stumbled across this package by chance on nuget.org","Super Find","However I was thinking this would take me weeks, possibly months to build. Literally two evenings later after work I managed to pull it off \uD83D\uDE01","On the Powershell Gallery"]},{"i":"it-s-free-but","l":"It's free but... ❓","p":["There is two limitations to using this freebie gift of a module","Maximum of 100 pages can be built","The Powered by Retype branding cannot be removed All information about this application can be found on the main website Main Retype Website \uD83D\uDC49"]},{"i":"i-miss-powershell-universal","l":"I miss Powershell Universal \uD83D\uDE2D","p":["Sadly I have not used Powershell Universal in a long-time. Where I currently work I have dropped lots and lots of hints about purchasing it and how good it is, but I guess if they have budgets, and I am only a contractor then it's only as good as I say it is. Seriously though if you are impressed by this module then go check out Powershell Universal and honestly it is just so amazing \uD83D\uDC40 all you have to do is google Powershell Universal it is well worth purchasing this product as the only limitation is your imagination"]},{"i":"documentation","l":"Documentation \uD83D\uDC41️‍\uD83D\uDDE8️","p":["If you need to get something documented, and make it look all nice and fancy, and have some really nice built in features like dark or light mode. Search history, search capability. Then it's all built right in. It's so easy to use as well, this whole site was put together in an evening. Yes that's right one evening. How? Well all I had to do was type this text you are reading into notepad. So easy and such an elegant output of plain text. So if you need an awesome Powershell Module for generating static webpages Retype is your answer"]},{"i":"code-used","l":"Code Used \uD83D\uDCAC","p":["Again I know this is probably not the best coding for C# but it does all work and built without errors, and let me put this beautiful site together.","I included all the commands availble with this dotnet application. I would like to do a video on using this Powershell module. Maybe I might get an invite to demo it to the Powershell masses...?"]},{"i":"thanks-for-reading","l":"Thanks for reading \uD83D\uDE04","p":["I hope you have had a good time reading this blog of mine and if you want to get in contact then please tweet me on twitter. Thank you very much"]}],[{"i":"#","p":["Powershell module allowing you to produce image charts from Powershell data. How cool is that! If you need a picture to show your data in a chart, then this module is for you. Read all about it in this blog I did here"]},{"l":"ChartImage Powershell Module","p":["Get this module here","Pondering on what my next module should be?"]},{"i":"static-website","l":"Static Website \uD83D\uDC7E","p":["So I didn't think I would be making this many Powershell modules all in the month of July 2022. Guess it shows that if you are feeling productive you can be productive As I think I mentioned it is really easy to put a decent looking documentation site together using Retype. It's quite old-skool \uD83D\uDCFC but at the same time nicely presented. That got me thinking that the Retype template is ⭐ great looking out the box, and has enough easy-to-use components using simple markdown. I have also mentioned how much I miss Powershell Universal originally I got hooked on this program with the charts that it offered. They were just out of this world, and the fact you did it all in Powershell made it even better."]},{"i":"image-charts-com","l":"Image-Charts.com \uD83D\uDCA1","p":["How am I supposed to fight crime and produce those reports for my boss?","I wasn't looking for a new challenge or module to release, but when I stumbled on the C# library for image-charts.com I thought this would make an excellent binary module. Although essentially this is just API calling which could have been done with Powershell and Invoke-WebRequest or something similar. I just fancied trying to improve my non-existent C# skills. Before I got deep-diving into this project, I thought it would make sense to first have a butchers at the powershellgallery.com to make sure there wasn't already an image-charts module, and there wasn't. To my knowledge there isn't a lot apart from Powershell Universal that have lots of super cool charts (I know as I built a good number of charting modules for this product) but again I knew I couldn't have dynamic charts running on a static website. However I thought it would still make a page look even nicer if you had some data displayed on the page."]},{"i":"building-the-project","l":"Building the project \uD83D\uDC77","p":["Time to come up with a plan to make this happen","Originally I was thinking this was going to be super-easy to smash module. As I did a build and release and with the sample I found it just worked. Then the parameter list started to grow and grow \uD83C\uDF31 then me being me, I maybe had added these parameters without testing the build at each modification. So suddenly what I thought would work didn't quite work out as planned. Then all the parameters that I didn't specify as mandatory were expecting a value. I had to figure out how to pass a value to the variable for that parameter value should it be empty. I do not know C# so was happy when I got it all pretty much working to allow you as a potential end user to not be bombarded entering values for 13 different paramters. Instead I only made 3 mandatory paramters path chartType and dataPoints to me these were the 3 fundamental things you needed to specify to produce a chart of your choice and the data in it, and finally the output path to store the image of the chart."]},{"i":"help","l":"Help \uD83D\uDCE3","p":["Don't worry I added some good help for each parameter","Not sure why I didn't think about this in previous binary modules. Maybe it's because I only got building them this month, but I was thinking I should add as much help as I could to the parameters via the help message for each parameter. I did this as it wasn't super obvious to me how I could layout the data to the way I wanted it, or how to choose different colours or labels to be displayed. There were just so many possibilities to each chart you could make. The more parameters the more possibilities. So although I have not created all the possible parameters, depending on how popular this module becomes, will be the deciding factor on time spent developing it more."]},{"i":"two-commands","l":"Two Commands \uD83E\uDDE6 \uD83E\uDDE4","p":["Maybe things are better in pairs, just like socks or maybe gloves. Originally I was thinking I just wanted to be able to save the image of the chart I was generating to a specific directory. I was really happy I had got it all working so I created a quick repository, got an icon, then posted it to the Powershell gallery. Then I was thinking \uD83E\uDD14 what if people just wanted the URL to be generated for there image? No problem I saw that this was one of the capabilities and as I had already done a namespace for the saving of the chart, it really was a case of copying and pasting that editing a few bits, then I suddenly had 2 commands to go with this module instead of just one. Allowing you to either save the image or to generate the automatic URL to view your image online."]},{"i":"code-time","l":"Code Time \uD83E\uDD41","p":["I thought I would post the final .CS code that made up this binary module. So without further hold-up here it is:-","Hopefully you can see why it ended up taking longer than expected, with all the parameters I kept adding, after thinking damn that's a cool parameter to have. As mentioned before there is a lot more parameters I could add should this module be a popular one."]},{"i":"demo-time","l":"Demo Time \uD83D\uDCC8","p":["Okay I guess it's time to show you nice reader how the magic works. I cannot recommend enough that you take time to visit","Image-Charts.com \uD83D\uDC49","To see what you can do with these charts, and how the parameters can affect the display of the chart.","I have not included the chartjs in this module","If I have not included enough documentation on this page or with the help in the parameters that I have included in the module this please check the documentation as well which is located here.","Documentation \uD83D\uDE80","So the next time someone asks me how old all my daughters are... \uD83D\uDE01","Chart Output From Code Run Above"]}],[{"i":"#","p":["Powershell Binary module that produces amazing looking ASCII art. You can even do ASCII art from actual high resolution images, or stick to more basic cartoon pictures. Find out how you can now become an artist in this amazing blog I done"]},{"l":"Image2Text Powershell Module","p":["Powershell Gallery Link","Is that Spiderman drawn in text? Yes it is!"]},{"i":"just-looking-for-something-new","l":"Just looking for something new \uD83D\uDC41️","p":["So looking to hopefully inspire others and make you yes you the reader, believe in yourself more to do what-ever you may think is awesome in Powershell and wham it on the gallery for all other Powershell users to use some of your own handy-work. I was just browsing and thought about ASCII art and how \uD83D\uDE0E cool it looks. So not wanting to reinvent-the-wheel I checked the powershell gallery to see if anyone else had been bold :bold_man: enough to take up the challenge. The only thing I could find was one ASCII text generator. So next step I went to nuget.org to see what C sharp libraries were availble for this. I found a few but these seemed to be built into a form with a browse button. I just wanted a command-line version. Then I found this:- Image2Text Module"]},{"i":"not-quite-the-same","l":"Not quite the same \uD83E\uDD37‍♂️","p":["Although this whole website has been done using the Retype Powershell module. When I got hold of that package it downloaded the .exe and I could then turn that into several binary cmd-lets. However when I used the download syntax for this project not much happened. So I was left thinking, so decided to go to bed. Then sadly one of my younger daughters was really being sick a lot, and not wanting to go to bed with her just being randomly sick, I thought I would do some coding whilst making sure my daughter was okay whilst being sick, as bless her she wasn't even waking up properly...Anyways this then led to a \uD83D\uDCA1 idea that I needed to downlaod a copy of the github repository containing this command-line program then build it. Well the first \uD83E\uDD98 hurdle I had to get over was that I couldn't build the project until I had installed dotnet core 3. Due to me using a rather decrepit personal laptop I use, yes I am still using x86 I downloaded the following:- Image2Text Module You will need this to make the module work. So once I installed that, I was able to then build the github repository project I had downloaded. I then got access to the vital command-line program I needed to make the magic happen. So once I had this working, I was then thinking how I could make this into a Crescendo module as I didn't really need to do any C sharp coding in as .CS file and build and publish that, as I now had access to the command-line executable that was going to do the hard work for me."]},{"i":"ran-a-few-tests","l":"Ran a few tests \uD83C\uDFC3","p":["From this Original Picture To this ASCII Output Image sorry folks small laptop screen shows on a full monitor better","For some reason though I could not seem to get the braille to work. Although I wasn't getting any errors nothing happened. So I just stuck with the pure ASCII format this can produce, which I got to say is rather amazing, like super detailed. For me by the time I had dealt with lots of sick, and with it being early hours of the morning I really needed to get to bed for work the next day. (I can look into this further should this module explode in download numbers)"]},{"i":"mistakes-we-all-make-them","l":"Mistakes we all make them \uD83E\uDDEA","p":["So although it seemed a really good idea to do all this coding and do an initial release of the module at silly-o-clock in the morning it kind of back-fired. I didn't fully realise that you would need that dotnet 3 core link I posted to run the module. Then again I made the bad, thinking yeah people will know to add this to their environment path. So I made some brief notes on the project page I have for this module of installing that Image2Text Module Then I also thought about making an install function for this module to set the path in the system environment variable. Hoping this would make it easy to use for people to use. Plus with this helpful blog kind of telling you that as well, it should double down on the effort."]},{"i":"invincible","l":"Invincible \uD83E\uDD5A","p":["Wow this is such an amazing comic. If you have not heard or seen it, please check it out. Such an awesome story-line and characters. Even Aamzon bought this as an animated series last year, so in massive respect to the Invincible Comic:- Invincible released by Image Comics"]},{"i":"powershell-world-first","l":"Powershell World First \uD83D\uDDFA️","p":["I guess the thing that made me most happy about putting this altogether in the end, was that it is now a world first on the Powershell gallery:- Image2Text Module Wahoo!"]},{"i":"all-july-d-out","l":"All July'd out \uD83D\uDE34","p":["It's quite mad thinking this entire website has been smashed together in this month alone. Not only putting all these blogs together about something, but the blogs I have written about has been after work activity, as these have all been personal Powershell module projects for the greater good. None of this was planned, it's like it just all fell into place. Like I had no intentions of going right July 2022 show the world some of the stuff you can do after a full day in the office solving complicated issues. Show your creative side, show that you can build what-ever you want to build and make it work in Powershell. Again none of this was planned, I just happened to get inspired by a tweet Adam Driscoll did on Crescendo with the Sysinternals suite and I guess that was like giving me the information I needed to know to start doing some new modules based on existing command-line applications that there wasn't an equivalent of in Powershell. So I managed to stick 9 of my own personal projects onto the Powershell gallery and contribute to the Sysinternals Powershell module as well making it 10 modules I was involved in this month alone which are on the Powershell gallery. I also work a full-time job and have 4 daughters I come home to on a daily-basis and 2 Shar-Pei dogs who enjoy long walks. So again I guess feeling inspired by what others were doing things and how they were doing things, has led me to now being able to make Crescendo modules as well as Binary modules from C Sharp code. At first this all seemed a dark-art as not much is out there on the WWW on how to do this. I mean there is more stuff coming out for Crescendo, but the binary module seemed almost like a secret club you needed the password to get in on. However using the material I have posted in the initial blog was enough to get me started. Not everything has gone smoothly, but as these were personal projects there was no time-frame associated with getting the task done. Once I had completed my own first Crescendo module TShark followed by my first binary module ReadPDF things got flowing. I wasn't looking for new modules to build everyday, as I got enough to deal with when I walk through the door coming home from work. Again just was hoping if I put some half useful half crazy modules out-there in the public domain I might get a few more people noticing what I can do, and maybe following me on twitter or linkedin. This seems to be happening so things seem to be going to plan. I mean I am not super famous yet, or super rich, but those were not the plans for this website. Maybe it might lead to a hollywood movie, who knows (i don't think so) but nothing would of happened if I had not bothered this month. Bothered to read up on game changing Powershell techniques that can bring a whole new game to the modules you can release. So if you have not done so already get on youtube checking out these things I mentioned, as this now gives me a few different angles on how to approach a given problem. Like if you cannot do it in pure-Powershell but an old-skool cmd-line exe does then you can now make that into pure-Powershell by using Crescendo. Then as mentioned for my ReadPDF module, Powershell cannot read PDF encoding, it just comes out as whacky print on your screen. So I was able to use a C-Sharp library to do the hard work for me, and make that into a binary module, now allowing you to read a PDF file directly from Powershell. Remember you can find all the code associated with these modules on my Github repositories I have setup for them:- Image2Text Module"]},{"i":"that-s-all","l":"That's all \uD83D\uDC4B","p":["Me in text format","Top tip if you want to make a real picture not a cartoon one into ASCII, then I would strongly advise you open that picture up in MSPAINT. Press CTRL+A then right click and select INVERT COLOR it might make your picture look a bit weird but it seems to give much better results when showing the output. ** Actually every picture you use looks better if you invert the picture first, through recent testing) I guess this is what I would look like made up of text \uD83D\uDE01 Hopefully this blog has got you thinking what weird and wonderful things you could cook-up for Powershell. This blog has probably been one of my hardest to write, as my wife and I looked after my sister-in-law 1 year old baby for 2 days and nights, as my sister-in-law was giving birth, then when I returned their baby all my family got real sick. So did my in-laws. So like everyone was sick and it's been ages since I was sick like this, and well it just sucks. Thankfully I got an amazing wife who found out some kryptonite had somehow gotten into my house and that's what was making me ill. Look if you read this much massive respect. Go do something awesome!"]}],[{"i":"#","p":["Powershell Binary module giving you the power to download YouTube videos directly to your local machine. I know certain websites offer this ability, but again I think it is way cooler to do this all from the shell. So find out how you can download YouTube videos from Powershell console in this blog I wrote here"]},{"l":"YoutubeDownloader Powershell Module","p":["Download YoutubeDownloader","No internet exists in The Realm if you have not read this comic it's a must"]},{"i":"hopefully-something-useful","l":"Hopefully something useful \uD83D\uDCF9","p":["Okay well the title is debatable, but I don't think there is any need for me to explain to you what YouTube is, I am sure you have heard it, used it and maybe even starred in one of your own videos on there. I do think it was a great idea at the start, then obviously google took over it, and well the rest is history. Anyways it is still a great site for obtaining videos on something you are interested in. I have learnt some great things off of YouTube, however sometimes I cannot finish watching the video I am watching or I need to watch it several more times for the information that I am trying to digest to make total sense to me. Well for me it's a whole lot easier if I have a copy of this video but on my local hard disk. That way I can watch it in VLC player which is a far superior media player to any media player on a web interface.","Just because I think VLC is superior it doesn't mean it is, thats just my opinion. Like I think The Realm is one amazing comic you have to read, again my opinion","How to pass time in a world without Youtube, and you cannot even get any likes"]},{"i":"past-solution-to-problem","l":"Past solution to problem \uD83E\uDDE9","p":["Pretty much what I think many others have resorted to, using your favourite search engine to ask the quesiton, and get back a whole host of hyperlinks to select from. As you are also probably aware the internet is not always the safest place, and I personally only like to visit sites I know are safe. However I always get a lurking suspicion that not all youtube video download sites are completely safe. Although I have used one of these sites in the past, it never occured to me to think about making a Powershell binary module to achieve the task. So I guess that inspired this module to become a reality.","Just because you know how to do something one way doesn't make it the only way, or even the best way"]},{"i":"what-is-out-there-already","l":"What is out there already? \uD83D\uDC53","p":["As always I had a quick butchers on the Powershell gallery before embarking on this project, and checking to see what was out there on the gallery. A total of 10 results were returned, one of them being the UniversalDashboard player I did a while back. I did see that a few of these modules did mention the ability to download the video or song. However it seemed that the majority of these modules did not allow you to download. For me that was a good enough excuse to add another Powershell module to the list, and make it nice and clear it did the thing I was looking for download youtube video. So YoutubeDownloader was set for action.","No spoiler alerts but must read solution below"]},{"i":"where-did-you-start","l":"Where did you start? \uD83E\uDDD7‍♂️","p":["Pretty much the same place I started for all my other binary Powershell modules I have made. Which is by having a look on https://www.nuget.org/ to see what is out there, and how I can bring that to an easy-to-use Powershell cmdlet. From having a look through the results returned I decided to use https://www.nuget.org/packages/VideoLibrary this as my choice of package to accomplish my mission. I selected this as there was documentation and it seemed easy enough to follow. The one thing I got reminded by doing this project, is that you really have to read the manual don't try and be a typical male and get building with the example, else you might miss the fact that although on nuget it states dotnet 1.3 on the github project page it says dotnet 4.5 so I like to keep things as backwards compatible as possible, because it wasn't all that long ago I had to install Powershell 7 so I could get building Crescendo modules for Powershell. When you get started on building the binary module the first command you have to issue is dotnet new classlib which actually defaults to dotnet 6 so to make this backwards compatible I used a Powershell 5 compatible dotnet version.","Undiscovered Country comic is also lacking internet, look how mad it makes people"]},{"i":"next-building-steps","l":"Next building steps \uD83D\uDC68‍\uD83D\uDD27","p":["So once you issue the dotnet new classlib command in visual studio this builds a .csproj file for you and a .cs file. On the nuget site on the package you want to use there is a .NET CLI tab which allows you to copy the code to use the package within your project. So after adding the powershell, and videolibrary package I had a .csproj file which looked like:-","Within the .cs file I now had to make the binary module which will be output as a .dll file once the project can be built and published without any errors. Again my knowledge on C-Sharp is very limited, but I am always up for a challenge, and plus the example looked very simple \uD83D\uDE01 this allowed me to create this as the .cs file:-","Trust this is the least code I have ever had to do to get a binary module at the end of it. So the next two steps after having the .csproj and .cs file ready:-","You can obviously only run the publish command if the build command runs without errors at the end of it. As this means your project has all the required libraries and the code is all good for this project to be published. After running the publish command you get the holy grail the .dll file which will allow you to load this into Powershell as a module. So now I needed to open a new Powershell session outside of VS Code which I was using to build this binary module. I then issued the Import-Module cmdlet and entered the path to my .dll file which was created. I gave the module a quick spin and it all worked as planned. When giving the module a quick spin I mean I first verify the cmdlet is showing in the Get-Command -module YoutubeDownloader then I make sure the cmdlet actually works as planned. As I only had one cmdlet within this module, this allowed very quick testing. Next on the menu is to create the .psd1 file which the majority of Powershell users associate modules with. I did this with the New-ModuleManifest cmdlet and passed all the appropriate parameters. I then like to test the module again to make sure I have all the required .dll files as nested modules and the root module .dll file all work when you move the folder to a new location and load from a new Powershell session using the newly created .psd1 file. If all goes well then the final step is to share your hardwork with the community to allow someone else to benefit from using your module. For me this means to publish it to the Powershell gallery. However before I issue that cmdlet I like to make a quick project site, which is a github repository containing the module and an icon file I like to associate with the module. most importantly making sure the repository includes a README which contains some informaiton on the module and how to use it. By creating this github repository and linking this as the project site, this then reflects on the Powershell gallery. Now we can do the finally bit and publish the module to the Powershell gallery.","On the plus side least I didn't have to work as hard as this little fella On the plus side least I didn't have to work as hard as this little fella"]},{"i":"mission-accomplished","l":"Mission accomplished \uD83C\uDFB0","p":["Publish-Module was next on the agenda, quickly making sure before-hand I had all the information I wanted in the .psd1 file. So many times I have published a module, and forgot to include the project page, or the icon, then you have to edit the version of the module and include the missing information then republish. It's more annoying than time-consuming, so always best to triple check things. After a few minutes you should be able to check your module on the Powershell gallery. Even though this was my 117th module I have now published to the Powershell gallery, it always gives me a sense of great achievement of sharing something you have created. I never did University, in-fact I only did a year at college, and IT wasn't even really a thing at school. I got into IT through an apprenticeship paying me a whole £50 a week. I started at the bottom and been trying to climb that ladder ever since. Self teaching myself Powershell wasn't an over-night thing, it took longer than a month, several months. But you keep learning eventually it makes sense. I did believe that Powershell would explode for sysadmin type people managing lots of machines, but to me from what I seen in many work-places it's just not that way at all, Windows admins are point and click type of breed that is not moving away from a full-on GUI anytime soon.","Working towards a better future one module at a time Working towards a better future one module at a time","Undiscovered Country Image comics. This is another amazing comic you need to check out"]},{"i":"example","l":"Example \uD83D\uDC47","p":["The emphasis behind this was the KISS approach Keep It Simple Stupid I wanted to be able to use this module and get a video I wanted downloaded in the time it would take me to find a valid website to do the same thing online, or even better less. I think I got that result, just check how simple this is to use:-","Thanks for reading"]}],[{"i":"#","p":["Powershell Binary module that gives you the ability to display images within the Powershell console window. You do not believe me? Then read this blog I did which proves this is possible with this module I compiled"]},{"l":"ConsoleImage Powershell Module","p":["Available Here","People seem to be wearing less masks now with Covid still rife, not me. I like wearing my mask"]},{"i":"something-fun","l":"Something Fun \uD83C\uDFAE","p":["Maybe it really does depend on what your definition of fun is, but yes this module is another whacky module that probably won't be needed by most, but the few who do want or need it, then kaboom here it is. Images that can actually be displayed in your Powershell console window. Really? Yes, it is for real, no the graphics do not render that well, and the more simple the image is the better the outcome. This does depend on screen resolution to get the better picture.","Maybe life is to short to always be trying to pull of technical stuff, for me this project was just about doing something I had not seen in the shell before, a proper image file being loaded.","Just keeping a watchful eye on my kids"]},{"i":"never-really-thought-about-this","l":"Never really thought about this \uD83D\uDCFB","p":["So to me when you ay Powershell or really even thing of any console, you do not think, yes this is just the application to open and view my images in. In-fact I didn't even know it was possible, as I just had not seen it done before. So I know some other crazy-heads had beaten me to putting something like this on the Powershell gallery, but my excuse for doing this was that I didn't see any of the existing module were using the binary module approach which for the last month or so I have been onvesting my own personal time to understand this better, and release some new modules for the Powershell gallery.","Sometimes I get funny looks going to the shops like this, but I don't care anymore"]},{"i":"example","l":"Example ▶️","p":["Well there is two functions for this, and I can only seem to get good results using the local image as opposed to an image from a URL. I believe this is because by default it wants to open the image from the URL in something else other than Powershell (I cannot blame Windows for this) so the image doesn't seem to work on my personal laptop. However I am more than happy to show some demos of the same picture, original vs being displayed in the Powershell console.","Me not loving the super hot office temporatures","Same picture as above but displayed in Powershell console","The beloved Powershell Icon","Same picture but just in the console"]},{"i":"that-s-all","l":"That's All \uD83D\uDD90️","p":["First off a massive thanks for reading. I know this module will not go down for saving the planet or anything like that. However it may just be what you were looking for? Although most probably not, but at least you know it can be done."]}],[{"i":"#","p":["Powershell Binary module to provide you with that perfect OWASP random password you might require for an end-user. Inspired by previous employment places using websites for this task. Read how to automate it in this blog I wrote"]},{"l":"Get-SecurePassword Powershell Module","p":["Link To Download Module","Gieger is another great read"]},{"i":"super-buzzing","l":"Super Buzzing \uD83E\uDD2F","p":["So I am proper buzzing, like I only started this particular blog site last month in July 2022 as I knew my current contract was coming to an end, and in a bit over a month this is the 15th Powershell module I have contributed, and I done some more blogs on-top of the recent modules, just to kind of verify I am a real human being, including information on past work I could think of which I had to solve which no-body previously could solve. I updated my resume and chucked that on this site, as I am currently looking for work, in hindsight I should have been applying for jobs more, but I have had an amazing few days at home with the family enjoying life with this amazingly hot weather we are still having. Best of all I am not stuck in an office melting through the current heatwave, but on the downside I'm not bringing in any cash sitting at home.","Anyways I am not buzzing due to unemployment, but the fact that this website is getting some attention, like I hit 3GB of traffic, but like the day before it was on 2GB I was like no way. Whilst I been building this website I been trying to promote it in various posts, as these modules may or may not be useful to you. I was kind of hoping it would lead to a new job.","Instead it has now lead to me getting an invite to actually speak about Powershell for a few different events that will then be available on youtube! Damn! Never did I expect that attention to be getting noticed by people inside and outside of the UK and then being invited to stuff that people who I massively respect have been on...It's almost like I been signed by the UFC, but don't worry folks I would never follow in Connor's footsteps and be a sell-out. I want to keep true to my roots, and I tried to do that in this blog. Just feels like that saying when one door closes another opens I know that sounds a bit like a fortune cookie, but just focusing on this massive positive in my life right now, and hoping it can lead to opening a few more doors in the right direction.","Honestly I am so stoked to be invited to speak on anything. I mean I am not an extrovert type of person, I just like to earn money, and spend time with the family. The days of going to raves till silly o'clock in the morning are long gone. I just type blogs till silly oclock instead now.","Sorry got a bit lost in the moment I didn't want to do any spoiler alerts so no event names mentioned"]},{"l":"Super Secure Password Generator","p":["Remember to make your password secure","Back to the agenda of this blog and the reason I gone and smashed another binary module together. It only seems like yesterday that I was typing a blog about a module I wrote...hang-on I was \uD83D\uDE01 yep total Powershell Addict so I as I been looking for jobs as of late, I see a lot all mentioning Active Directory or Azure AD so I kind of figure I will be dealing with those two well know systems again. I am very comfortable using the ActiveDirectory module to carry out tasks, but having been in this industry for quite sometime, I always find companies rely on a particular website to generate the passwords for either new accounts, or people who have forgotten their password.","Thankfully I do not deal with those particular type of calls, but for the people that do, they then have to open a new tab or a browser session go to that website then generate the password, copy it or read it back to the customer. So if that is the set process everytime, I just got thinking randomly tonight how much time is then spent by the human performing that task? It might be a minute? It might be under a minute. But what if that particular support person gets 50 of those types of calls a day? Then how much time in the day is spent following that manual process?","Automation to the rescue, and a new module to let my possible future employer know about. So although I saw a few password generators on the Powershell gallery, I did not see the mention of OWASP nor did I see the mention of binary. For me that was enough to put on the kettle, and make a nice brew of Yorkshire Tea and find a C Sharp library to do the hard work for me.","OWASP Wiki Information"]},{"i":"package-i-used","l":"Package I Used \uD83D\uDCE6","p":["This package has 1.8 million downloads","So this package seemed to tick all the boxes for what I was looking for. So it was time to get to work and build this module and include each parameter for this module. I like building modules that have examples. It was the same when I was building Universal Dashboard modules, it made the job a lot easier understanding the project in another languge if it has an example. This particular package showed several examples that all seemed really easy to understand and follow along. I do struggle a little when doing these binary modules as it is all in C Sharp and I have never ever done any studying or lessons in that language, and unlike Powershell it, is not quite as easy to follow along. Like I know when using a function you can do a Validate list etc, but again as it is a CS file this is being built from I wanted to keep it simple. From looking at the example I figured I could pass all the parameters apart from the password length as oldskool boolean parameters again I know if this was pure Powershell I would have opted for a switch but I don't know how to make the C Sharp behave in that way. Hence I opted for the parameters to all be boolean apart from the password length which is an integer value between 8 and 128 characters long","In my little brain I am now thinking the support agent could now have a tool that they just have to run once, maybe they could make it into a their own function to then just press a play button in the ISE console, saving them from having to browse to the site and then generate the password. Even though this would save a small amount of time, but you add that up over the day, then over a week, then month, then year....you get what I am saying...?"]},{"i":"making-sure-i-added-decent-help","l":"Making Sure I Added Decent Help \uD83D\uDCDD","p":["Due to the UK \uD83C\uDDEC\uD83C\uDDE7 still being incredibly hot at the moment, and the fact we don't have fancy air-conditioning it has meant me getting to sleep has taken a bit longer than usual. So instead of just laying there thinking I'm hot, I'm hot, I'm really hot. I been spending my evenings making some new module, then writing a blog on it. I do feel very creative late at night, so try to use that creativity to do something positive, I can over-look certain things. Like adding a proper help to the module. So this time round I made sure I added a decent help message for each parameter to be used. I also found when testing if I missed a boolean parameter, the module threw a wobbly. So I had to make all parameters mandatory to make sure the underlying .Net OWASP standard password generator would run without issues."]},{"i":"examples","l":"Examples \uD83D\uDD08","p":["Please see these examples below, I also included the output of the command so you can see the type of random secure passwords this generates:-"]},{"i":"find-gif-was-useful","l":"Find-Gif Was Useful \uD83D\uDE11","p":["The Gif I found for the module icon using Find-Gif","I been recently saying to recruitment agencies about how I am passionate about scripting and being able to write advanced modules to be used for more than just one thing. As it turns out Find-Gif helped me locate the icon I used to publish this module with on the Powershell gallery. So it was super cool to be able to not only use that module for my own personal website, but to also use it to find a cool icon for this module. See you really can use stuff for more than just one thing. Okay Find-Gif might not be the prime example, but it saved me wasting time on the internet looking, when I did it all from the shell.","Find-Gif is here","To put it right before your eyes \uD83D\uDC40 a simple explanation on the right-hand-side telling you the new parameter name for the old parameter name like I am sure /S is for the system name of the computer, but -ComputerName for me is a lot more easier, and it goes with the common parameter list for this which other Powershell cmdlets use which again just makes this less like a foreign language to me and a lot more easier to understand."]},{"i":"update","l":"Update \uD83D\uDCAC","p":["Okay I always take on board what people have to sa about my work, or the work I produce. So I had someone saying they thought I should have used the NEW verb instead of the GET verb. I explained my reason behind using get, instead of new, because I wanted to get a secure password. However I decided to bring in the one of the top dogs on this debate, and well it back-fired in doing so, as indeed I should have used the new verb, as a new password is being generated each time. So I decided I would update the module to also include the new verb, and also keep the get verb (as I didn't fancy renaming this whole blog as well) so these both do the exact same thing, just two ways of using the same cmdlet. I know I could of made this an alias but I just thought I would do another namespace for it."]},{"i":"that-really-is-all","l":"That Really Is All \uD83D\uDC4B","p":["I know this is not something brand-new for Powershell, and I know there were a few things on the Powershell gallery already which did this. However as mentioned I didn't see the word OWASP being mentioned, nor did I see the word Binary being mentioned. This was a super cool small project to work on in the evening, as I have also mentioned the fact people are doing this manually, I mean could even package this into an EXE to just let a junior support member double click to get a password each time. It would still save time from having to go to a website, wait for the site to load, point and clicking the generate button, and then getting the password. Well till the next idea I come up with take care and stay safe.","Thankfully the times we live in have not yet gone apocalyptic"]}],[{"i":"#","p":["Powershell Binary module giving you an endless supply of HEX colours that go-together to allow you to pick your perfect colour scheme. Read all about it in this blog I did"]},{"i":"chrissycolors-powershell-binary-module","l":"\uD83C\uDFA8 ChrissyColors Powershell Binary Module","p":["Link To Download ChrissyColors Module","GitHub Link to this Repository ChrissyColors","Just having fun with hex color codes"]},{"i":"powershell-binary-adventures","l":"Powershell Binary Adventures \uD83E\uDD13","p":["\uD83D\uDCA5 Boom Chrissy came back to me to say this did indeed tick the boxes for the problem. So I was so happy I had helped out in some-way in providing a solution to the problem by finding this command-line colour program. But it was bugging me a bit that I could not see the need to turn this into a Crescendo module due to the reasons already mentioned, so this was not a Powershell solution. I got a lot of respect for Chrissy for who she as and the things she has achieved, and how much of a fountain of knowledge Chrissy is for the community and to always share that knowledge back to the community, it is phenomenal hence I got so much respect for Chrissy.","\uD83D\uDCA5 Boom I had now delivered a Powershell solution to the problem even though the original problem was solved, it now seemed a new problem of finding the perfect colour. So instead of manually spending time to find the perfect colour, you can use this module instead. Using Pastel as well with this module allows you to physically see all the colours generated. As you can see in the gif above, without Pastel just the hex codes are shown for the colours, as shown at the start of the gif when I just generate loads, and loads of colour codes in no-time at all. The main time was scrolling through looking at all the beautiful colours that had been automatically generated. The amount of colours returned is controlled by the only parameter -NumberOfResults the higher the integer value, the more colours returned. In the gif example I used 34 as the number of results to return.","Again as always I wanted to give an automated solution to Chrissy in her quest to find that perfect colour. If all this could be done automatically from the shell, then to me that would be well worth turning this into a Powershell Binary Module","Again I was blessed. To my delight I had found the following library","As I love to make command-line tools into Crescendo modules I figured scoop would be a good place to check if something out there existed already for this task at hand.","Boom, the program was installed, so I read the help file and the github repository to see what I could do with this command line program that appeared to tick all the boxes of the given problem","Chrissy tweeted about trying to build something to return hex color codes not to sure if Chrissy is redecorating her home, but I felt I could actually lend a helping hand in this task. Although I didn't know what the actual task fully involved, it just did not seem like rocket science, so I offered my help.","Finally after testing the ChrissyColors.dll I had built and published, I then had the task of creating the actual .PSD1 Powershell module file. New-ModuleManifest is the cmdlet I use to accomplish this task, and I personally fill in as many of the parameters as possible. Once this was done I uploaded this to the Powershell Gallery as to my knowledge no colour generators exist on there. Else I am sure Chrissy would not have needed my help.","Github Repo For Pastel","I even made a small Github repository to host all the code I did on how I made this into a binary module. I do plan on adding to this repository and all my other respositories, GitHub actions to implement a CI/CD process to automate the testing of my modules. Anyways you can find the ChrissyColors repository here","I got chatting with Chrissy again later in the evening to see how using Pastel was going on her personal colour quest. It seemed Chrissy was struggling to find that perfect colour. So I grabbed my mask and cape, and flew over to nuget.org to find a C-sharp library I could use to generate colours.","Link To Nuget Package","My GitHub Repo For This","Now the only thing I had beef with was this program only appeared to return string data which meant that this particular program was a bad candidate to try and make into a Crescendo module, as it would not be able to be converted to a true Powershell objects, and would just be string data. The parameter-set for this application was not difficult for me to understand, so again I could not justify putting this into a Crescendo module because it was easy enough to use as it was, and did not offer outputting in any other formats like JSON or CSV so I would not be able to turn this into Powershell objects. However I did notice from the github page that this allowed pipelines in the program, so I figured I could do this","Powershell Gallery Link","Scoop Search","Showing You This In Action","simple one-liner of code","So I searched for color I know this is not the correct English spelling but for those that have plagiarised the queens speech this is the standard spelling for colour. As I know Chrissy is a fellow geek, I figured I should really try and find a command line tool. Someone was looking down on me, as I found a command-line program called Pastel all I had to do to install this (as I already have scoop installed) was use","So this is quite an epic adventure of a tale featuring Powershell Modules. As I mentioned before I am really happy with some of the people who have accepted my follow request by not blocking me, and sometimes even followed me back on Twitter. One of these amazing people is Chrissy Lemaire. As you probably know Chrissy is an MVP, as well as a GitHub Star and even an author! Damn how many things can one person be? Then on-top of all this I can vouch Chrissy is a really amazing person especially when it comes to showing others some of the super cool things you might not know even exist.","The best things in life are free","This appeared that it could generate me a load of different colours, and being C-sharp I knew it would be super-quick. Like I know there are various colour generators out there to generate colour schemes mainly web-based, but normally the API for these sites is a paid-for service.","To my astonishment Chrissy said that would be a good idea, so I got chatting to Chrissy to find out exactly what the task at hand was. See for me personally the Powershell Gallery used to be my single pit-stop of the go-to, to get something for Powershell. These days I like to look at several other places for something that might already exists to do the job. I do not want to come across as a charlatan but if something already exists why re-invent the wheel?","Yes I know currently the readme for this totally rubbish, but I have written this exclusive blog in the mean-time. As mentioned in the previous paragraph, I got big plans to do more things on GitHub in general."]},{"i":"super-dope-project","l":"Super Dope Project ☺️","p":["Damn, I do love doing this sort of thing, like helping people. It was only a few days ago my lovely wife spotted an old lady struggling to even lift her shopping, I then helped this old-dear by carrying all her shopping back to her car for her, and loading it into the vehicle. Helping people does give me a buzz, being able to lend a helping hand to Chrissy was almost an overdose-buzz, I was buzzing so much that I had chipped in on the colour dilemma Chrissy was suffering. I also found out about 2 other cool things, Pastel, and the binary module I made. I got an enormous amount of respect for Chrissy and I am super thankful for the help she has given. So was nice to be able to repay a small amount of the kindness Chrissy has shared, back to Chrissy. The End.","Just like this comic Reborn, Chrissy to is also super-dope","Thanks for reading the origins of ChrissyColors and how you can use this, and also where you can get it from. Till next time stay safe."]}],[{"i":"#","p":["Powershell Crescendo module wrapping the T-Shark CLI into a Powershell cmdlet driven application. Having recently used Wireshark to solve a problem at work, I thought this would be great to Crescendo it, so I did, read more in this blog I did here"]},{"l":"My Recent Powershell Modules","p":["TShark Module"]},{"i":"windows-administrators","l":"Windows Administrators \uD83D\uDC2D","p":["So I have found over the decades of working in IT that not many system administrators know how to code. Yeah they know how to google and copy and paste code, and run the script they found. But when it comes to modifying that code, it doesn't seem possible to that person, as they don't have a scooby-doo about what the code is doing, or how to read it. Most places I have worked only a very few people can actually code to solve a given problem. Due to the stress of certain jobs, you might find that the one person who can help is a bit like An angry sysadmin coder"]},{"i":"i-needed-a-point-and-click","l":"I needed a point and click \uD83D\uDC01","p":["Yep I hate to admit it but this year I was trying to solve a complicated issue that had existed before I even started the job. On the plus side I knew it wasn't my fault, or I couldn't take the blame. However neither of those plus signs was going to solve the problem. Although I had know about the program for sometime, I hadn't had a real use-case for using WireShark. Before I knew it I had used WireShark to analyze a number of bizarre issues I had been gifted with to solve. Again this got me thinking why isn't there a Powershell equivalent of this program? I did a bit of training on the program through various sources and it was mentioned there is the command-line version TShark.exe which could also be used to take network captures."]},{"i":"tshark-for-powershell","l":"TShark for Powershell \uD83E\uDD88","p":["TShark lets you hunt down network issues just like a real shark","First of all just incase you didn't know, but WireShark has a command line tool that allows you to capture a network trace file. Although this may not be as graphical as the GUI version, it does give you all the same functionality, and allows you to do cool things like starting a network capture, that will output in 50MB files and make 10 of these files then keep cycling through over-writing the oldest file, so you could keep a network trace running for a long time, without worrying about filling up the disk, or having a gigantic trace file at the end of it. This is just one of the many things you can do with TShark. One of the things I do not like about using certain command line tools, is the parameters they use sometimes make little to no sense, or they might just be a bit too much to remember. By re-building this command line tool TShark into a Powershell module I would be able to decide on the parameter names, and which parameters to include. The only downside to deciding to rebuild an application into a module using crescendo, is it will not include the program in the module. However a few lines of Powershell code that you can install WireShark which includes TShark:-","I have included the code above in the module as an additonal function, to allow you to automatically install the required software to use the module. This module is a function module, please look through the code to see what it does, as I did spend a good amount of time on the help for this module so that you could fully understand how to get a network trace easily from Powershell to then either diagnose in the shell or to open the captured trace file in WireShark."]},{"i":"examples","l":"Examples \uD83D\uDC46","p":["If you look at the bottom of the above code I did include a help file for this module, and a couple of examples of how to use this program. Once again please remember this module does not install the software automatically, although it does include a function to do this automatically for you after you have downloaded the module."]},{"i":"i-hope-this-helps-you","l":"I hope this helps you \uD83C\uDF31","p":["So if you find yourself with a pickle of a problem to solve and know it could be network related, then give this tool a chance to find that issue for you. I really hope you enjoyed reading the about the first recent module I released and how this could potentially help you solve a complex problem \uD83D\uDE01"]}],[{"i":"#","p":["Powershell Crescendo module allowing you to run an Internet Speed Test right from your Powershell console. Please note this requires a x64 machine, so I had to borrow the wifes laptop to make this dream come true. Find out how you can use this module in this blog I wrote"]},{"l":"SpeedTestCLI Powershell Module","p":["Module Download Here","This is who I call when my internet is slow"]},{"i":"internet-speed","l":"Internet Speed \uD83D\uDC0C","p":["The internet is never fast enough for some users. Or like what do you define as slow internet? Normally you might inform the person you will do a speed test, but then you may find yourself inundated with the best web site to perform this speed test on. Or having to deal with figuring out why one site is telling you a different result to the previous site. Everyone seems to be in such a hurry these days. Again I didn't want to be stuck being the normal point and click solution type of guy"]},{"i":"speed-test-cli","l":"Speed Test CLI \uD83D\uDDE8️","p":["Again using Crescendo I was able to convert the only speed test cli out there into a Powershell module the only downside to this module for me was that speedtest-cli does not support x86 so I had to borrow my wifes' laptop to create this module. Just thinking how awesome it would be to be able to get a really decent speed test done without having to use a browser. The wifey and me"]},{"i":"code-behind-the-module","l":"Code behind the module \uD83D\uDC68‍\uD83D\uDCBB","p":["I wanted to make this module as easy to use as possible so made most of the parameter sets auto-fill, or a switch parameter. Really all you need to do is just run the following Start-SpeedTest"]}],[{"i":"#","p":["Powershell Crescendo module for some of the Sysinternals tools. I had only been using one of these tools recently, so when I found out you could do it in Powershell I jumped at the chance. Find out more in my blog"]},{"l":"Sysinternals Powershell Module","p":["Get it Here","Sysinternals the perfect weapon"]},{"i":"sysinternals-suite","l":"Sysinternals Suite \uD83E\uDDF0","p":["Yeah when I think of Sysinternals I do kind of think about Bloodshot the comic character (not Vin Diesel) as this guy is unstoppable with multiple abilities who is not a one-trick pony. So that pretty much sums up Sysinternals, if you don't know about it you should know about it","The man himself","Seriously this guy is about as close to a superhero you get. He not only out-smarted Microsoft with troubleshooting their own product, he also created an amazing toolkit ❤️ \uD83E\uDDF0 yes that's right FREE as my mate Mark (we are on first name basis) now works for the mighty Microsoft the Sysinternals Suite is also an official Microsoft download."]},{"i":"not-convinced","l":"Not convinced? \uD83E\uDD14","p":["Honestly any Microsoft Windows bug, feature or problem can be solved with the Sysinternals Suite. Why do I keep using the word suite? Well because this really is a bunch of tools in a toolbox. It would take me too long to write about each tool and why you should know how to use it. Essentially it is either a GUI executable or a command-line executables that are included. Please check the link below if you want more information on this brilliant toolkit:-","Microsoft Docs \uD83D\uDD0E"]},{"i":"what-about-powershell","l":"What about Powershell? \uD83E\uDD28","p":["So sadly I didn't make it to the Powershell European Conference mainly because I don't have an in-date passport. But if I did make it there...I would of for sure been to the talks Adam Driscoll presented. This guy is another legend in not only Powershell but many other things. This guy is the genius behind Powershell Universal, Powershell Pro Tools and a good number of other projects and modules. If you have not visited this site you really need to:-","Ironman Software \uD83D\uDD0E","Back to the Powershell European Conference I missed. Personally I really look up to Adam (yes we're on first names too) he is such a sound bloke who really cares about his customers and the product he invents by making them better, and listening to the community using them, and what they would like added to them and well somehow he basically makes that happen. Anyways so as I follow Adam on twitter I saw that he posted a link to the recent Sysinternals module he had released using Crescendo. So as soon as I read Sysinternals \uD83D\uDC40 I wanted to know more. He kindly posted this link:-","Github Repository \uD83D\uDD0E","I was like \uD83D\uDE36 lost for words as it now adds the output as objects not strings. So I made a \uD83C\uDF74 fork of the project and added to it, following the instructions and template provided."]},{"i":"i-contributed","l":"I contributed \uD83D\uDCA5","p":["I have so much respect for Adam as he is such an inspirational person to me. So as it happens I had recently applied a temporary fix for a bug in a program to automatically fox this issue. Whilst applying this fix I was querying the event log of a remote machine, and well I was using Powershell ISE to do this. I found trying to cancel the query by pressing CTRL+C just made the notification change to stopping and well not much else. Now yeah I could have killed the process or end task, but I had other important script jobs running on this same ISE session and didn't want to loose that information. So I used good old handle.exe to save the day. So when I saw this was part of the Powershell Module Sysinternals that Adam Driscoll had put together I was like damn I can now use this. However it didn't include the close capability so I added that. I then added a couple of other tools from the Sysinternals Suite to the module. I then see today that Adam approved the changes and pushed the new release to the Powershell Gallery","Powershell Gallery \uD83D\uDD0E"]},{"i":"wait-there-s-more","l":"Wait there's more \uD83D\uDE2F","p":["I bought the first edition of the Sysinternals book that Mark wrote. I cannot recommend this book enough. You will have your kids asleep in no-time reading this as bedtime stories. You will also \uD83D\uDE15 all non-technical \uD83D\uDC7D people you know. They will think you work for \uD83D\uDC68‍\uD83D\uDE80 NASA or something. There is now a second edition book out for Sysinternals which you can buy at many different places, but here is a link on Amazon offering this book","Sysinternals 2nd Edition Book \uD83D\uDD0E"]},{"i":"find-time-to-learn","l":"Find time to learn \uD83D\uDCDA","p":["I cannot recommend learning as many of these tools as you can, although the Powershell Module does not include the complete suite of tools, you can make that possible by also contributing. Only today I used Process Explorer to remove a 56GB log file that was pretty much using the majority of space on the main operating system drive. Why did I use process explorer? Well because a colleague was stuck trying to delete it, by getting the dreaded Cannot delete this file as the file is in use message. Within minutes I had closed the handle using that and deleted the file meaning the disk was no longer close to being completely full and the alert went away on the system. It certainly is worth learning as many as your \uD83E\uDDE0 brain can handle and reading the book to get a really good understanding of how you can see what is going on under the hood on your Windows systems you manage. Thanks for reading \uD83D\uDC4D"]}],[{"i":"#","p":["Powershell Crescendo module which is architecture friendly as this was built on my x86 laptop, which again is a Crescendo module allowing you to do speed-tests from your shell window. Read more here in my blog"]},{"l":"SpeedTest-CLI Powershell Module","p":["Get your copy here","This blog has nothing to do with ice-creams"]},{"i":"another-speedtest-module","l":"Another SpeedTest Module \uD83D\uDCA8","p":["Well Adam why on earth did you go and do another Crescendo Powershell module for an internet speed-test when you did one of these last month? Dearest reader, as I have 4 beautiful daughters who I try my very best to provide for, means that me aka Dad is left to still use his very old x86 laptop. So to actually even build the last speedtest module I needed to borrow my Wifes' much newer x64 laptop and build and deploy the module. Which meant that when I was writing the blog for the last speedtest module, I didn't include any screen-shots of the actual module in motion as I could not even run it on my laptop \uD83D\uDE2D To make things right, I found another speedtest command line program that is compatible with both x86 and x64 meaning I could actually run this speedtest module I was building on my own laptop. Which to me was worth the effort to build this, as there are probably countless other dads out there having to make do with their decade old laptop, but also want to run speedtests via the command line right?","As this is a complete stand-alone command-line execuatable I couldn't just magically make this work with you just downloading the module. So you will need to install this speedtest program which I will show you how","I will be showing you via scoop which has nothing to do with ice-creams"]},{"i":"scoop","l":"Scoop \uD83C\uDF66","p":["Scoop is a great place to find useful applications","I have used Chocolatey in the past, but at the moment I have Scoop installed. So I am going to produce the super quick guide to installing Scoop and getting this speedtest installed. Are you ready?","\uD83D\uDCA5 that's is all you have to do, 3 lines of code, to install scoop, add the extras, and install the program needed for this module. Now you have scoop installed, and the actual program, you could just get running it, but where would be the fun in that if you are not using a cmdlet to run the program?"]},{"i":"example","l":"Example ▶️","p":["Not that I do not trust all my readers, but I will just be outputting the simple results, as I do not wish to share my personal IP address or ISP, but this information is shown in the tests. So lets get round to some good old fashioned examples:-","From running the above command I can now easily view my internet connection all from the comfort of my own shell","So today using my home broadband connection I can see I got 102.51Mbps download, and 9.58Mbps upload. This program will select the closet server to you, but you can over-ride that:-","Gives me a list of all the available servers, I need to select this via the number","So now if I wanted to test my connection but to a server in Japan (listed as number 82) instead of London which it would have defaulted to I can use:-","Without the -Simple switch parameter you do get more information As expected slower results from testing my internet speed with a Japanese server","Please see all the available parameters I included below","I showed how to use 3 of these parameters, all the parameters minus the -Server parameter are switch parameters, so they are either on or off.","Thanks for reading I hope this module finds a place in your toolkit. \uD83D\uDE01"]}],[{"i":"#","p":["Powershell Crescendo module bringing back the old-school robocopy wrapped into a Powershell advanced function using the mighty Crescendo module from the Powershell Team. Read all about why I did it in this blog"]},{"l":"RoboCopy Powershell Module","p":["Link To Download","RoboCopy minus the y"]},{"i":"another-crescendo-module","l":"Another Crescendo Module \uD83D\uDE87","p":["Today I was looking at some freelance work, just seeing what is out there, as I would quite fancy just being a full time Powershell scripting person. It just seems that the jobs for pure Powershell just do not exist. It seems most Powershell jobs in the United Kingdom consist of being a senior cloud engineer, where it seems only a tiny bit of the job role mentions Powershell. Anyways whilst looking at Powershell project work available out there in the wild. This all stemmed from me trying to be helpful, and answer a question on a LinkedIn Powershell group. Next thing I know I am getting lots of messages from this random person, basically asking me to re-write the existing script they have as it is not working. I spent a good 20 or more minutes helping this person to even run the script. So I kind of politely mentioned that I sadly cannot devote my entire evening as time is money. Next thing I know is they actually said they would pay me for my time, and they had posted the job on people per hour site. So next thing I knew I was on there:-","Me on People Per Hour","Going back to the project I saw which was on another site, someone wanted to copy file paths longer than the 260 limit, but in Powershell. I was thinking I am sure this cannot be done, as I did put a bid in for the project. So to get one step further in being able to pull this off, I needed a way to be able to copy file directories longer than the 260 limit in Powershell. After a bit of reading I find that this is possible to do with the trusted robocopy.exe but this is not pure powershell. So I made it into a Powershell cmdlet with parameters that actually made sense.","As this beauty is built into Windows there is no need to use Chocolatey or Scoop to install anything additional this module just works once installed.","This was such a classic when it came out"]},{"i":"robocopy","l":"RoboCopy \uD83D\uDDA8️","p":["On the Powershell Gallery","The thing I find with these classic DOS commands, is the parameters used as in the way you type the parameter normally makes no sense in correlation to what that parameter does. I normally find myself reading the help on the parameters for DOS programs more than once to make sure I fully understand it. So the great thing with RoboCopy is a lot of the actual parameters are just switch parameters either on or off. I mean I didn't include every-single possible parameter as I wanted to get this built and published within a small time-frame. So going back to what I was saying about complicated named parameters for what they actually do, I thought I can now eradicate that, with some slightly longer named parameters, but named with what they actually do.","RoboCopy is just as tough as RoboCop"]},{"i":"example","l":"Example ▶️","p":["As mentioned pretty much all the parameters are switches apart from the -NumberOfRetries and the -WaitTime which expect an integer for the parameter value.","Example 1","Example 2"]},{"i":"update","l":"Update \uD83D\uDD08","p":["So I guess the Powershell people are more movie die-hards than comic-book aka graphic novels type of people. Why do you say that? Well not that I am the best at tweeting, but I am lucky to get a like. You mention Robocop in a tweet, suddenly you are the new cool-kid in town \uD83D\uDE0E and for the first time since being on twitter I got triple digit likes Amazed by the amount of likes for this project...thank you I mean this week I am looking for work and was feeling a bit down that I am thinking it's day 3 I should have found something by now, then \uD83D\uDCA5 boom this happens and made me feel much happier \uD83D\uDE04 that even if it was for the icon to accompany the module it got some love aka likes, which was way more than planned \uD83E\uDD70 so just how to make someone feel better when they looking for a job give them over a 100 likes ❤️ I can vouch it really does work. Anyways I was on twitter and just chilling with my homies and was recommended to get on discord for Powershell. Now I know my Mrs uses that for her gaming, but personally I think I tried it like once but then forgot about it, but anyways I got back on discord and saw about someone saying that wanted to implement a robocopy type script. I was like, dude I just made the robocopy.exe into a cmdlet, you could use that. I then posted him the link to the official robocopy Microsoft page here (which in hindsight I should have posted earlier on in the post) Official Microsoft Docs for Robocopy.exe He was like I need the /MOVE parameter and I was like \uD83D\uDE44 oh yeah I didn't include that one \uD83D\uDE36 give me 5 minutes...","Uppdated RoboCopy module","Which now shows","I added a new parameter -MoveThenDeleteFromSource which does exactly what it says on the tin. It will use robocopy to copy the contents to the new directory then delete the contents from the original destination once the copy is completed.","I know I may have broken some best methods or practices, but I just wanted the parameter names to make as much sense as possible, as I know that personally that is what puts me off using oldie but goodie DOS commands.","Listing of the parameters I did include on this initial release for the RoboCopy module.","Thanks for reading I hope this module finds a place in your toolkit. \uD83D\uDE01"]}],[{"i":"#","p":["Powershell Crescendo module giving you the power to use an old-school takeown dos command and giving you a nice easy way to use this in Powershell. Read more in this blog I wrote"]},{"l":"Takeown Powershell Module","p":["Link To Download","These guys know all about takeown honest"]},{"i":"yep-another-crescendo-module","l":"Yep Another Crescendo Module \uD83E\uDD71","p":["No please give me a moment to explain, this is a world first. Trust. Search the powershell gallery if you do not beleive me. So why else would I commit my time to the masses? I bring a time of happiness back to the 90's with this little gem \uD83D\uDC8E","I love old skool DOS commands but not the parameters","I really did love the 90's and the music it brung to the dance-floors up and down the \uD83C\uDDEC\uD83C\uDDE7 UK and all the music being illegally played in farmers fields, where new types of music was being created, and the Rave scene began. Sadly I was a bit too young to be going to the illegal raves, as I was stuck at a military boarding school in the middle of no-where. Trust not much fun there. So why am I banging on about the 90's no it's not to re-live the days of Rave music but to remember a tool you may have forgotten about. So what is this tool you are talking about? \uD83D\uDCA5 It is in the title but it is the mighty takeown.exe So what is so great about this tool then? Well I recently used it to make a script to be the equivalent of a delprof script. For some weird reason even as a local or domain admin it didn't have access to some directories. I did use this in conjunction with another tool, but that shall come in another blog soon. Anyways back to the whole 90's vibe, and it is because I read somewhere that this was in NT4 which I believe was released in 1996. Sadly I don't have an NT4 Operating system to hand to find out, and I do not have a comments section so maybe send me a postcard if you have an NT4 system and want to confirm that fun but maybe not true statement."]},{"i":"set-acl","l":"Set-ACL \uD83E\uDDE8","p":["Look I know the clever people in the Powershell team at the world of Microsoft brought us Set-ACL but again to me it needs a lot of attention to use the cmdlet correctly. I am not a crash-bang scripting just chucking things together and hoping for the best. I like to feel 100% confident in all the scripts I write that the cmdlet does or will do exactly what I programmed it to do with no side effects. So I know an official Powershell cmdlet exists for this job, but me personally being a simple man from a small town in the \uD83C\uDDEC\uD83C\uDDE7 I like to keep things simple. I might have a super supportive amazing wife, but I also got blessed with 4 daughters who can make my life complicated enough, as well as 2 dogs 3 cats. So yeah if I have to spend more time studying a cmdlet rather than using the cmdlet then maybe that is not the cmdlet for me to use? Maybe that quote will go down in Powershell history, probably not, but sitting here typing this blog, it makes total sense to me, to reach back to the old-skool and use something I know that works is simple to use (apart from the parameter names) and gets the job done. Yes I know this may not be the fasted approach to getting the job done, but again do we not have background job capability to run long running scripts in Powershell...Yes we do. So again in my book that is that hurdle jumped."]},{"i":"set-ownership","l":"Set-Ownership \uD83C\uDF89","p":["Do not stop reading...Bomb Queen wants you to pay more attention to what I am saying","So another quick ramble but thinking \uD83E\uDD14 about it I was the only kid in my year who was allowed to drop \uD83C\uDDEB\uD83C\uDDF7 French for GCSE. Why? I was really, really bad at it, about the only \uD83C\uDDEB\uD83C\uDDF7 French I was good at saying was je suis désolé so fast-foward a number of years, and when I starting looking at DOS it just reminded me of French lessons at school. Nothing really made sense, it seemed like a totally foreign language I was going to have to learn, then as well as the command line you were issuing there were all these weird parameter names that just made it even more confusing. Then a really good friend of mine (well I wish he was, he has tweeted me a reply once or twice that means we are bff right?) aka Jeffrey Snover only went and invented Powershell. Something that was an object-orientated language but in English. Or well just words that made sense, parameters that made sense. \uD83D\uDCA5 So my journey with this most amazing language began, because I could understand it. Well to a certain degree at the start, but the more I used it the more it made sense. Enough rambling, I was thinking to keep this in-line with good quality spoken English...Ladies and Gentlemen I bring you Set-Ownership which is a complete wrapper with all the parameters of takeown","takeown Micorosft Documentation","To put it right before your eyes \uD83D\uDC40 a simple explanation on the right-hand-side telling you the new parameter name for the old parameter name like I am sure /S is for the system name of the computer, but -ComputerName for me is a lot more easier, and it goes with the common parameter list for this which other Powershell cmdlets use which again just makes this less like a foreign language to me and a lot more easier to understand."]},{"i":"parameters-explained","l":"Parameters Explained \uD83D\uDC68‍\uD83C\uDFEB"},{"i":"example","l":"Example \uD83D\uDD08","p":["Just a nice plain demo:-","Gave me the ownership on my CV I have on my desktop. Wahoo! But yeah in all seriousness this saved my bacon \uD83E\uDD53 (pun intended \uD83D\uDE02) when I needed ownership of certain directories, and instead of doing it the point and click way recursively through lots, and lots of directories I used takeown.exe within my Powershell script. So as I got so much passion for Powershell I thought why not make this into a fully fledge cmdlet to remind people sometimes the old-skool tools just get the job done in a more simple manner. I do not have a masters degree in computer science, I don't claim to be super-intelligent, I just like to smash the jobs I get assigned to me in the most effiecient manner possible with me understanding the complete process A to Z."]},{"i":"pun","l":"Pun \uD83E\uDD23","p":["Think if I broke Powershell naming conventions and called this Do-Takeown you could of had That is why we do not break Powershell naming conventions Verb-Noun"]},{"i":"why-do-this-now","l":"Why do this now? \uD83D\uDC74","p":["Well I mention this on the home page but I am 40 now...I remember when I was young like single digit young 40 was proper well old age. So now being at this youthful stage of my life, I am thinking do all the new-school kids on the block know about these classic commands from a time before they were even born? Possibly, but most likely if it is not a Powershell cmdlet then to some people it is not worth using, or possiblly knowing about. Obviously scripts and modules I might develop in work-time have to stay at work, hence I normally do weird-and-amazing modules that may or may not be to everyones liking. So thought why not write a blog on a DOS tool I have recently used, but even better spend time on that to make it into a full on Powershell cmdlet through the power of Crescendo and bring this old-skool command back to life","I really hope you enjoyed this read, and please do not go turning super evil like Irredeemable did and become the worlds worst Super-Villain"]}],[{"i":"#","p":["Powershell Crescendo module wrapping the amazing Microsoft Log Parser 2.2 into a Powershell module allowing me to run this without installing","If only this guy knew about the power of PSLogParser"]},{"i":"pslogparser-module","l":"\uD83D\uDD2C PSLogParser Module","p":["PSLogParser Module"]},{"i":"where-have-you-been","l":"Where have you been? \uD83D\uDD2D","p":["Nope I not been hanging out with these two","Okay I know it has been a while since I last wrote a blog. This is due to me being 100% focused on my new job. Like this is the best job I have ever had and I just want to be 100% focused on it. Make sure I meet expectations and complete tasks I get asked to do. Then in the evening before I know it, I am going to bed and another day begins.","I did tweet that I was going to take a hiatus from smashing out Powershell Modules almost daily as I wanted to hopefully inspire others to get building and publishing modules, and to be 100% committed to my new job. Honestly feeling so blessed to have landed this position, I felt like it was a wind-up as it was just like my dream job.","So many good things have come from this web-site being put together, like the talks and presentations, speaking to various members of the powershell Team directly, chatting with Chrissy LeMaire who has just been such a \uD83D\uDC7C guardian angel for me. Like seriously Chrissy is a \uD83E\uDDB8‍♀️ super-hero, so to actually have been chatting and working with Chrissy on some mini-projects has been incredible. Something I never envisaged happening, so I would certainly like to carry-on these good-vibe momentums. Working with Powershell Universal again has been super-cool and I got to have some chats with another super-hero \uD83E\uDDB8‍♂️ Adam Driscoll who through his software has just made me better at coding, by wanting to create modules for the community, and in doing so has just improved my coding by the challenges this has presented me to complete these modules to make them work.","Although it has been 12 days since I wrote my last blog.","I hope the wait has been worth it. As this blog has the ultimate Powershell way to read any given log file. So if you want to find out how to impress your friends with this amazing super-power then keep reading","He should have mentioned about the big log file he had to read with PSLogParser instead"]},{"i":"why-build-this-as-a-module","l":"Why build this as a module? \uD83D\uDC77","p":["The origins of finding this gem \uD83D\uDC8E of a tool was actually in my previous position whilst analyzing IIS log files. The very kind @PrzemyslawKlys whipped up an IIS log parser module and even did a blog on the module. When I first looked at being given the task at hand I did even try the IISParser module to see if it would decipher the log file at hand","Link to IISParser Module","Sadly as I was not reading a IIS log file I got nothing returned \uD83D\uDE2D so I could not use this particular module that was kind of made for me a little while back by the kind @PrzemyslawKlys. I did tweet about this like 4 months ago, saying I was shocked no-one had done like a Powershell version of the Microsoft Log Paser tool.","Link to the Microsoft Log Parser","When I first used this tool I was just like \uD83E\uDD2F WOW this is an amazing tool from Microsoft, but just not needing to analyze lots of logs never really looked at a way to automate this task. So when I used this tool originally for analyzing IIS log files I was just really amazed at how you could query the log for the data you wanted returned.","So one of my recent tasks was to read a log file but I am not allowed to install software on my work laptop without going through the proper procedure. When-ever I get a task to automate something, I like to try and complete it the same-day to get that buzz I get from coding. So I tried this on my home laptop to see if it would read the log file at hand from getting the sample log from my one-drive.","Boom \uD83D\uDCA5 just as planned I got the results from the log, using the trusted Microsoft Log Parser. Which I personally think is a really underated tool, as I was also able to convert this output to CSV which just happened to also be part of the challenge. I was not 100% sure on the exact data required so the SQL query part was not my main focused at the moment it was just the fact I had pretty much accomplished the challenge.","However, as this needs to be an automated task, and I could do this using an external executable, it does require you to install this on your system even though it is just an executable cmd-line application. Once you have it, you could just copy that and then run it on another machine, but again although this is a great tool, some of the parameters can be a bit clunky in my personal opinion as in I need to read the help file to be able to understand what the parameter stood for and how to use it.","So had one of those \uD83D\uDCA1 ideas pop-in-my-head like why don't I just build this as a Powershell Crescendo module kind of like I dreamed about 4+ months ago before knowing all about the totally awesome Powershell Crescendo Module which again I would \uD83D\uDC96 love to see Microsoft do a dedicated website on Crescendo to push this more to the Powershell community on how awesome this is. Like I included everything in my build folder for this module including the licensing information for the Microsoft Log Parser application. For me this would be the best of both as I could then wrap this into a module and install the Powershell module as opposed to installing an application on my work laptop.","Think of a plan to make this happen"]},{"i":"i-needed-a-solution","l":"I needed a solution \uD83E\uDDEA","p":["Once I knew which data was required, I was able to parse the output of this CSV to use Import-CSV and then pipe that to a Where-Object to filter the data matching a certain certeria on a particular column. This then brought back only the data that was required to then be analysed. As I now had a working solution to automate the task, I wanted to make this into a Crescendo module and package the executable all within the module to just make it work out-the-box. I am sure Micrsoft are \uD83D\uDE0E cool with me doing this as I am trying to promote this amazing free tool that is just not talked about enough.","This would also get me round my own personal dilemma of not being able to install software without getting pre-approval, as I am not actually now installing any software, only a Powershell Module to the current user scope aka my profile. I was not trying to cut-corners by doing it this way, but just figure that once you tell the installer of the original MSI where to install it, you only need the executable to run it, as it is a cmd-line application that relies on the dll file included. Obviously if this software was not from the mighty Microsoft then I might have my own suspicions on running it in the first-place.","I mean for those who still do not want to take the leap into the world of the command-line \uD83D\uDC1A shell then there is even a graphical user interface of this tool which you can also download for free from Microsoft find out more here","Introducing Log Parser Studio","Link to download Log Parser Studio","Depending on how far you like to look into issues and what types of problems you deal with. I am sure at some-stage in your IT career you will have to read and understand a log file to find out why something is happening. As most applications of importance will output a log file. I am hoping this will be your \uD83D\uDC51 crown \uD83D\uDC8E jewels when that time comes.","I said it before the best things in life are free\uD83C\uDFA4 now I discovered what log parser means to me as it was Friday evening it was time to crack open the \uD83D\uDCBB laptop and make some \uD83E\uDD13 dreams of automating log files come true \uD83D\uDE3B","Yes I know how to rock my Friday evenings to the maximum \uD83E\uDD21"]},{"i":"build-steps","l":"Build Steps \uD83E\uDD7C","p":["Time to put on those glasses and get building","So I did include this in the module as build.ps1 file, which contains the following Powershell code","From running this I got the following JSON file which I edited to look like this","All that was needed to create the actual module was for me to type this one-line of code","Which then produced the function and the module file needed to publish this to the Powershell Gallery. I mean I would like to tweak the function to make some of these parameters have a defined list of items to choose from. For me though this was a super-quick win to now enable me to automate the entire task from my work laptop using this module that only took about 15 minutes to complete from start to finish","As you can see from the actual code steps I needed to do, it was not a great deal of work involved, but now I have the ability to run one line of Powershell code to get the goodness of any given log file supplied in the FROM clause of the SQL query.","Which I know is more wording than the original parameters contained but as you can tab complete you shouldn't notice the difference. This for me is a lot easier on the eye to read and just makes more sense to me. I even included a -WhatIf parameter. Anyways again this was a personal task that I had to complete but as this tool is so powerful at being able to read any given log file from any system. I wanted to share this with the community. As I did want this exact same thing myself over four months ago, but just didn't know a way at the time on how this could be accomplished. As another module was published which then allowed me to read the IIS log files I needed at the time, I just did not see the need to build another module which would do the same thing. However no Powershell module out there I knew of or tried would parse this particular log file I needed to get into CSV format. As I am looking at a variety of log files, more than just IIS logs, I need a reliable tool to read these and output the data to the desired format. This for me ticks all those boxes, and now gives me and you the ability to read any given log file."]},{"i":"i-hope-this-helps-you","l":"I hope this helps you \uD83C\uDF31","p":["Next time you get tasked with reading a log file and making sense of it, or being able to determine what the log contains. Then I really do hope this Powershell module becomes your tool of choice to get the goodness from the given log file. This really has saved my \uD83E\uDD53 bacon a good few times already. I do hope this blog has given you an idea for your favourite cmd-line tool to run in Powershell, from the cmdlet name and parameters you specified whilst building it.","Till next time take care and read this comic"]}],[{"i":"#","p":["Powershell Crescendo module wrapping the super sweet duplicate file finder jdupes.exe into a Powershell module allowing me to run this without installing","Everyone is guilty of it, maybe not of duplicating yourself, but for sure files on your computer"]},{"i":"psdupes-crescendo-module","l":"\uD83D\uDDC4️ PSDupes Crescendo Module","p":["Get the PSdupes Module using this link"]},{"i":"another-weekend-another-module","l":"Another Weekend Another Module \uD83D\uDCC1","p":["So I have had another amazing week at work, working with a super-team doing more Powershell goodness. Honestly I know I been coding for a good number of years, but to have a job where you have the time in the working day to code a solution, it just makes every-day a dream day.","Just in the past I have to put these ideas into practice in my own-time then still work a full working day the next-day. Just nice to be employed to do a job and have the time and the team to support you to doing that in the working day","Again just had so many instances in previous positions where they do not want you to script a solution. Which never made sense to me, as you then eliminate human error, and most importantly you save a massive amount of time. I personally felt that those people possibly felt I was trying to replace them with a script. Which is not the case, I just want to work smarter not harder, to me that is what computers are all about. Let the computer do the hard work, why should I have to point and click things manually in 2022?","To be working somewhere where scripting and automation is embraced, encouraged and implemented. It just makes every-day a joy to be getting up in the morning, to be blessed with all these things as well as a great team just makes me a very happy automation platform engineer.","Just because a file has a different name it could still be a duplicate. Just like this clone one has a beard the other does not but yet they are still the same person"]},{"i":"why-build-this-as-a-module","l":"Why build this as a module? \uD83D\uDC77","p":["So after having a lovely day with my family visiting family, I put on my laptop and thought about my disk space. Like I have had this laptop a very long time, and I know I have duplicate files on this laptop.","My plan was to have a butchers at finding all the duplicate files I might have. I know Powershell has a Get-FileHash and various other methods and exisiting scripts and functions, even modules out there that exist already to find duplicate files. As well as many graphical user interface programs out there that do this task of finding and reporting on duplicate files.","I turned to duckduckgo.com to search for a script to do this for me, and the first link I came across looked like it ticked all the boxes, I had a skim through it and thought yep that will do nicely","However running this script it just gave me one line to tell me to wait. So I waited and waited. I even waited some more, then I just got bored, and did a ctrl+c and thought there must be another quicker way or just like a decent progress-bar. I did not want a point and click program, I just wanted to be able to type one line of code and get some results back.","I always think before doing something coding related, what is the point of me spending loads of my own-time to cook something up, if I know this has been done many, many times before. So I headed over to the official scoop site to have a butchers at what was available. That is where I found this command-line solution.","A powerful duplicate file finder and an enhanced fork of fdupes","This was great, as it was super fast, and gave me progress on the screen so I at least knew it was doing something and how long it would roughly take to complete the task. Not only that but it had a load of parameter options to use with the executable. Most importantly I saw it had JSON output, which means that I also had the ability to turn these results back into objects for Powershell to display.","Think of a plan to make this happen"]},{"i":"i-knew-this-worked-well","l":"I knew this worked well \uD83C\uDFB6","p":["After having a look at the help file for this program and running it a good few times, it just made sense to me to smash this into a Powershell Crescendo Module to give to the masses and share this very efficient tool of locating and detailing duplicate files.","The only beef I have with using tools that I never used before like jdupes.exe is that it normally means I will have to read the help file at least once to grasp how to use the application. Then if I do not use something on a frequent basis I will have to use the help file again, mainly this time is just because I cannot remember the -m stands for summarize the information. Or that -M means to summarize the information but also show the file matches. In my head it just makes more sense to have -m as -Summarize and how about -M as -SummarizeMatchTypes I know these are more of a mouthful, but as they are switches, it now makes total sense what the switch does, as it is practically named."]},{"i":"slight-issue","l":"Slight Issue \uD83D\uDD25","p":["I was so excited when I saw that this application had JSON output, I even let out a YES loudly, and my daughter was like Dad what are you happy about. When I explained it did not look like I had brought that same excitement to my 7 year old daughter.","However this excitement was short-lived. Why? Well because this particular application does not support JSON output with every-single command. The way the JSON file is configured it would happen on every parameter passed, it would try to convert it to JSON. This meant that the summary information was not displaying correctly, and I was also getting the dredded red error text on my screen, even though I was using -ErrorAction SilentlyContinue","No problem I thought, I can just edit the PSM1 file that gets built with the JSON file. I then changed my mind and decided to just remove it from the JSON file then re-exported the module from this JSON, and every command worked correctly now. This also gave me the opportunity to still make the JSON output into proper Powershell objects to inspect, or format differently for reporting."]},{"i":"build-steps","l":"Build Steps \uD83E\uDD7C","p":["Time to get making a Crescendo Module to find those pesky duplicates","So I did include this in the module as build.ps1 file, which contains the following Powershell code","From running this I got the following JSON file which I edited to look like this","All that was needed to create the actual module was for me to type this one-line of code"]},{"i":"a-few-examples","l":"A few examples ☕","p":["This will recursively search within the directory specified as all child sub-directories within the parent directory typed in the path parameter It displays how many files has been searched, how many duplicates have been found and the amount of space these duplicate files are using.","This will do the same as the above command as well as list all the duplicate files found with the complete path.","Will automatically delete all the duplicate files found, but keep the first item in the list, therefore leaving you with only one copy of the file. This will not prompt you to delete the files, as the -NoPrompt parameter has been used.","Turning the ouput of the JSON switch then convert this from json back into a Powershell Object. As I stored this in a variable I can now produce some results from this variable as it is holding Powershell objects. Just pipe this variable to Get-Member to see the cool things you can now report on. $Duplicates.matchSets is good for starters","Although I did not include every single parameter included within the original application I believe I included enough to complete the task of finding duplicate files on any given Windows system. This allowed me to clean-up my laptop of duplicate files and did this in a timely manner with progress indication which helped on letting me know how far into the process it was."]},{"i":"i-hope-this-helps-you","l":"I hope this helps you \uD83C\uDF31","p":["House-keeping is always a good task to perform on any system that has been built for a good number of years ago, as it will most likely contain a number of duplicate files. Unless it is food, I do not believe you need duplicate files on the same disk drive. Next-time you decide a machine needs a good house-keeping on checking for duplicate files, then please give this module a go, as it really does work well, and should be intuitive enough to just use it without needing to study the help behind it.","Till next time take care and read this CLONE comic from Image Comics"]}],[{"i":"#","p":["Powershell Universal Component that adds a nice zoom in effect when hovering over an image. This is my first custom component I have built in a long-time. Find out how I did this project in this blog"]},{"i":"udimagezoom-powershell-universal-component-module","l":"UDImageZoom Powershell Universal Component Module \uD83D\uDDBC️","p":["Link To Download UDImageZoom Module","GitHub Link to this UDImageZoom Repository","Great to be using Powershell Universal again"]},{"i":"powershell-universal","l":"Powershell Universal \uD83C\uDF0E","p":["I have mentioned this a good few times in previous blogs that I really miss using Powershell Universal. I mean when I first got using this, it was just called Universal Dashboard. This then grew into a product offering three main features Jobs, APIs and Dashboards. This became Powershell Universal, read all about what it can do here:-","More information on this great product here","To me this product is just so amazing. Not only does it contain a huge amount of components for your dashboards, images, cards, accordians, buttons, select options, graphs and lots more the developer of this software also gave the opportunity to allow you as an end-user build custom components to extend the list of components that can be used.","Check out the demo instance of this software to get a feel for the main product portal where you can control all the super cool stuff you can do.","Demo instance of the product"]},{"i":"react-component","l":"React Component \uD83D\uDD27","p":["Yes I know I keep mentioning the word component but you may know this as a widget or self-contained application, or maybe a mini application to me a component does its own thing using its own bit of the webpage and can have certain parameters associated with it. So you could have a graph component that has a refresh button. Back in the old web days, this would refresh the whole webpage to then re-render the graph. Where-as a React component would just refresh that component, and anything else on the web-page would be un-affected by this refresh happening on the graph component. This is why to me they are isolated objects on the web-page all running in their own run-spaces.","Although Powershell Universal is like amazing, like so amazing. It is using that material-ui theme, and all the associated components with that theme. All the components for this react theme are listed here:-","the first of the Material-UI components","So hopefully by now you know what I mean by the word component. If you are still confused then please check-out the official documentation for the components that are included into this product. Seriously this is well worth reading the documentation to understand this product more, as just like it was for me, all this was brand-new stuff to learn, and get my head around what these different components did, how they displayed on the screen, and how I could use them for particular parts of my dashboard.","Official Documentation for Powershell Universal Components"]},{"i":"custom-component","l":"Custom Component ⚒️","p":["There are many places you can find custom react components that either individuals have built, or a team of people working together to build a component. One site I like to see custom react components on is npmjs.com there is also https://bit.cloud/ however I prefer to use:- Official NPMJS website","Seriously the react component library is massive, like really, really big. There are just so many components out there. Like looking at card components, hundreds are returned...but end of the day they are all card components...just a bit different looking (themed). So as always just like pretty much all my modules I try to produce I try to find something that does not already exist, and will hopefully benefit others.","I know I have done a fair-few image components in the past, but I wanted something new.","Previous image component","Another previous image component","Another one","And another image component","Just for good measure another one","One last one to show","I probably got a few more, but you get the idea, I have done a fair few components already, however none of these offered the effect this component was going to bring. This technique is also used on a lot of modern sites such as Amazon, when looking at the product you want to buy, it is always helpful to get an extra good look at that product before you press that buy button."]},{"i":"fate","l":"Fate \uD83D\uDC7C","p":["I am not a man of faith, but I do believe in fate. It seems life has assigned a guardian angel to look out for me and help me through a difficult patch. This particular guardian angel has allowed me to have a decent machine I can use to get back into Powershell Universal, as I have mentioned before but I only run on a really old rubbish x86 laptop. Sadly Powershell Universal is only x64. Thanks to my guardian angel I got a great cloud machine to now use."]},{"i":"image-zoom-effect","l":"Image Zoom Effect \uD83D\uDD0E","p":["As with all good guardian angels, they like to know you are committed to becoming that better person, or being that person you believe you can be. My particular guardian angel suggested I should make more Powershell Universal components, and this time make a image zoom component.","First step was to go to www.npmjs.com to see what I could find on there. I believe I hit that jackpot, and found a nice image zoom component that ticked all the boxes of looking great and doing what it needed to do, which was to magnify the image when the mouse hovered over it.","The component I found react-img-zoom","I always appreciate it when someone has the time to write good documentation on how to use something, and this component had just that, as well as a demo site showing you the component in action. Another great thing is this component had zero dependencies, meaning I only needed this one npm package in order to build this component. This was a major blessing as well, as in the past I can remember some components, having lots and lots of dependencies, which will slow down the build process."]},{"i":"github-template","l":"Github Template \uD83D\uDC7E","p":["Super Important You Need This","The next section on building the custom component relies on you having a local copy of this repository which is a template you can use to convert any react component into a Powershell Universal dashboard component. I mean how amazing is that. You can convert something written in a completely different language and make it work with native Powershell commands, using Powershell. It still blows my mind how amazing this is, as now there so many possibilities on what you can now display in your dashboard."]},{"i":"building-the-component","l":"Building The Component \uD83D\uDEA7","p":["There is an outline of how to build a custom component here:-","Official Documentation","Further official documentation can also be found on the blog on the ironman software site. This documentation personally made more sense to me:-","More official documentation","Even though I had previously built a good amount I think 90+ custom components, that was using a different technique, as the software has since been updated to use a newer version of react, and so the build method changed. Honestly this change has given a ginormous improvement in the time it takes to build the custom component. When I was building these custom components on my x86 laptop, it was taking sometimes up to 20 minutes or longer to build the component depending on the amount of dependencies the component had. However using this new build technique it only takes about 5-10 seconds! Yes seconds not minutes, so using this new method is a massive time saver in itself."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component I did this by copying the command from npmjs.com","So once that was installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above.","Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had one package to install as no dependencies) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the **.PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built. My output directory now contained the following four files index.5e8cb3b240ba9ee67c1f.bundle.js,index.5e8cb3b240ba9ee67c1f.bundle.map,UDImageZoom.psd1,UDImageZoom.psm1. Next stage was to now test this in a simple dashboard, I made a directory called UDImageZoom within C:\\Program Files\\WindowsPowerShell\\Modules* and copied these newly created files into this new folder directory **C:\\Program Files\\WindowsPowerShell\\Modules\\UDImageZoom*. I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","The result was just as planned","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component that provides a simple jigsaw captcha slider for the end-user to slide into place to correctly move on. To my knowledge a captcha does not exist for Powershell Universal. So thought this would be an excellent project read the blog I wrote here"]},{"i":"udslidercaptcha-powershell-universal-component-module","l":"UDSliderCaptcha Powershell Universal Component Module \uD83D\uDD11","p":["Link To Download UDSliderCaptcha Module","GitHub Link to this UDSliderCaptcha Repository","Gif Demo of the component in action"]},{"i":"powershell-universal","l":"Powershell Universal \uD83C\uDF0E","p":["If you read my last blog, then please feel free to skip these first few paragraph titles. I just want to re-emphasize how ** amazing Powershell Universal is, and how it could change the way you code, and think about displaying your code. I have mentioned this a good few times in previous blogs that I really miss using Powershell Universal. I mean when I first got using this, it was just called Universal Dashboard. This then grew into a product offering three main features Jobs, APIs and Dashboards. This became Powershell Universal, read all about what it can do here:-","More information on this great product here","To me this product is just so amazing. Not only does it contain a huge amount of components for your dashboards, images, cards, accordians, buttons, select options, graphs and lots more the developer of this software also gave the opportunity to allow you as an end-user build custom components to extend the list of components that can be used.","Check out the demo instance of this software to get a feel for the main product portal where you can control all the super cool stuff you can do.","Demo instance of the product"]},{"i":"react-component","l":"React Component \uD83D\uDD27","p":["Yes I know I keep mentioning the word component but you may know this as a widget or self-contained application, or maybe a mini application to me a component does its own thing using its own bit of the webpage and can have certain parameters associated with it. So you could have a graph component that has a refresh button. Back in the old web days, this would refresh the whole webpage to then re-render the graph. Where-as a React component would just refresh that component, and anything else on the web-page would be un-affected by this refresh happening on the graph component. This is why to me they are isolated objects on the web-page all running in their own run-spaces.","Although Powershell Universal is like amazing, like so amazing. It is using that material-ui theme, and all the associated components with that theme. All the components for this react theme are listed here:-","the first of the Material-UI components","So hopefully by now you know what I mean by the word component. If you are still confused then please check-out the official documentation for the components that are included into this product. Seriously this is well worth reading the documentation to understand this product more, as just like it was for me, all this was brand-new stuff to learn, and get my head around what these different components did, how they displayed on the screen, and how I could use them for particular parts of my dashboard.","Official Documentation for Powershell Universal Components"]},{"i":"custom-component","l":"Custom Component ⚒️","p":["There are many places you can find custom react components that either individuals have built, or a team of people working together to build a component. One site I like to see custom react components on is npmjs.com there is also https://bit.cloud/ however I prefer to use:- Official NPMJS website","Seriously the react component library is massive, like really, really big. There are just so many components out there. Like looking at card components, hundreds are returned...but end of the day they are all card components...just a bit different looking (themed). So as always just like pretty much all my modules I try to produce I try to find something that does not already exist, and will hopefully benefit others. I remember a good few years back I looked at a captcha but it was too difficult to implement, and I am not an expert on tokens to verify, which it seemed all captcha components required. Still to this day there is no official captcha component for the official product. So to me this was a change to prove to my guardian angel I was back on the path to making things happen."]},{"i":"slider-image-captcha","l":"Slider Image Captcha \uD83D\uDD10","p":["First step was to go to www.npmjs.com to see what I could find on there. I believe I hit that jackpot, and found a captcha that did not rely on tokens or other servers providing that information and authenticating the captcha that way. Instead it uses one jigsaw puzzle that you need to simply slide onto the one missing spot.","The component I found react-puzzle-confirm","I always appreciate it when someone has the time to write good documentation on how to use something, and this component had just that, as well as a demo site showing you the component in action. Another great thing is this component had zero dependencies, meaning I only needed this one npm node package in order to build this component. This was a major blessing as well, as in the past I can remember some components, having lots and lots of dependencies, which will slow down the build process. The other super cool thing about this particular react captcha component is this react component did not require any tokens, or registering to a provider such as google, as this module is using CSS to complete the captcha. To me this was the perfect choice of component for me to build, and this really would prove a human has completed the action, to prevent someone trying to spam your dashboard, depending if you are hosting something externally."]},{"i":"github-template","l":"Github Template \uD83D\uDC7E","p":["Super Important You Need This","The next section on building the custom component relies on you having a local copy of this repository which is a template you can use to convert any react component into a Powershell Universal dashboard component. I mean how amazing is that. You can convert something written in a completely different language and make it work with native Powershell commands, using Powershell. It still blows my mind how amazing this is, as now there so many possibilities on what you can now display in your dashboard."]},{"i":"building-the-component","l":"Building The Component \uD83D\uDEA7","p":["There is an outline of how to build a custom component here:-","Official Documentation","Further official documentation can also be found on the blog on the ironman software site. This documentation personally made more sense to me:-","More official documentation","Even though I had previously built a good amount I think 90+ custom components, that was using a different technique, as the software has since been updated to use a newer version of react, and so the build method changed. Honestly this change has given a ginormous improvement in the time it takes to build the custom component. When I was building these custom components on my x86 laptop, it was taking sometimes up to 20 minutes or longer to build the component depending on the amount of dependencies the component had. However using this new build technique it only takes about 5-10 seconds! Yes seconds not minutes, so using this new method is a massive time saver in itself."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component I did this by copying the command from npmjs.com","So once that was installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above.","Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had one package to install as no dependencies) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the **.PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built. My output directory now contained the following four files index.73fa2acffb0788575395.bundle.js,index.73fa2acffb0788575395.bundle.map,UDSliderCaptcha.psd1,UDSliderCaptcha.psm1. Next stage was to now test this in a simple dashboard, I made a directory called UDSliderCaptcha within C:\\Program Files\\WindowsPowerShell\\Modules* and copied these newly created files into this new folder directory **C:\\Program Files\\WindowsPowerShell\\Modules\\UDSliderCaptcha*. I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","The result was just as planned","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component which displays a beautiful animation from the lottie site. I learnt some new things in this project, so come learn them too, and find out more about this great resource for your dashboard"]},{"i":"udlottieplayer-powershell-universal-component-module","l":"UDLottiePlayer Powershell Universal Component Module \uD83C\uDFA6","p":["Link To Download UDLottiePlayer Module","GitHub Link to this UDLottiePlayer Repository","Gif Demo of the component in action"]},{"i":"powershell-universal","l":"Powershell Universal \uD83C\uDF0E","p":["If you read my last blog, then please feel free to skip these first few paragraph titles. I just want to re-emphasize how ** amazing Powershell Universal is, and how it could change the way you code, and think about displaying your code. I have mentioned this a good few times in previous blogs that I really miss using Powershell Universal. I mean when I first got using this, it was just called Universal Dashboard. This then grew into a product offering three main features Jobs, APIs and Dashboards. This became Powershell Universal, read all about what it can do here:-","More information on this great product here","To me this product is just so amazing. Not only does it contain a huge amount of components for your dashboards, images, cards, accordians, buttons, select options, graphs and lots more the developer of this software also gave the opportunity to allow you as an end-user build custom components to extend the list of components that can be used.","Check out the demo instance of this software to get a feel for the main product portal where you can control all the super cool stuff you can do.","Demo instance of the product"]},{"i":"react-component","l":"React Component \uD83D\uDD27","p":["Yes I know I keep mentioning the word component but you may know this as a widget or self-contained application, or maybe a mini application to me a component does its own thing using its own bit of the webpage and can have certain parameters associated with it. So you could have a graph component that has a refresh button. Back in the old web days, this would refresh the whole webpage to then re-render the graph. Where-as a React component would just refresh that component, and anything else on the web-page would be un-affected by this refresh happening on the graph component. This is why to me they are isolated objects on the web-page all running in their own run-spaces.","Although Powershell Universal is like amazing, like so amazing. It is using that material-ui theme, and all the associated components with that theme. All the components for this react theme are listed here:-","the first of the Material-UI components","So hopefully by now you know what I mean by the word component. If you are still confused then please check-out the official documentation for the components that are included into this product. Seriously this is well worth reading the documentation to understand this product more, as just like it was for me, all this was brand-new stuff to learn, and get my head around what these different components did, how they displayed on the screen, and how I could use them for particular parts of my dashboard.","Official Documentation for Powershell Universal Components"]},{"i":"custom-component","l":"Custom Component ⚒️","p":["There are many places you can find custom react components that either individuals have built, or a team of people working together to build a component. One site I like to see custom react components on is npmjs.com there is also https://bit.cloud/ however I prefer to use:-","Official NPMJS website","Seriously the react component library is massive, like really, really big. There are just so many components out there. Like looking at card components, hundreds are returned...but end of the day they are all card components...just a bit different looking (themed). So as always just like pretty much all my modules I try to produce I try to find something that does not already exist, and will hopefully benefit others. I remember a good few years back I looked at a captcha but it was too difficult to implement, and I am not an expert on tokens to verify, which it seemed all captcha components required. Still to this day there is no official captcha component for the official product. So to me this was a change to prove to my guardian angel I was back on the path to making things happen."]},{"i":"lottie-player","l":"Lottie Player \uD83C\uDFA5","p":["First step was to go to www.npmjs.com to see what I could find on there. The great thing when looking to build components is that you can learn something new. So I never knew about this awesome website to obtain graphics from.","Lottie Files Offical Site","The style of these graphics reminded me of","undraw.co","Which I have done two custom components for already on the Powershell Universal market place. However these graphics included movement, yeah you may think whoopy-doo it is just a GIF. No dear reader this is far more than just a GIF, check out the lottie files site for the evidence.","The component I found @lottiefiles/react-lottie-player","I always appreciate it when someone has the time to write good documentation on how to use something, and this component had just that, as well as a demo site showing you the component in action. Another great thing is this component had one more dependency, which did not have any sub-dependencies, meaning I only two npm node packages in order to build this component. This was a major blessing as well, as in the past I can remember some components, having lots and lots of dependencies, which will slow down the build process. The other super cool thing about this particular react component is the props aka parameters that are available. I have tried to include all of these in the end finished module."]},{"i":"github-template","l":"Github Template \uD83D\uDC7E","p":["Super Important You Need This","The next section on building the custom component relies on you having a local copy of this repository which is a template you can use to convert any react component into a Powershell Universal dashboard component. I mean how amazing is that. You can convert something written in a completely different language and make it work with native Powershell commands, using Powershell. It still blows my mind how amazing this is, as now there so many possibilities on what you can now display in your dashboard."]},{"i":"building-the-component","l":"Building The Component \uD83D\uDEA7","p":["There is an outline of how to build a custom component here:-","Official Documentation","Further official documentation can also be found on the blog on the ironman software site. This documentation personally made more sense to me:-","More official documentation","Even though I had previously built a good amount I think 90+ custom components, that was using a different technique, as the software has since been updated to use a newer version of react, and so the build method changed. Honestly this change has given a ginormous improvement in the time it takes to build the custom component. When I was building these custom components on my x86 laptop, it was taking sometimes up to 20 minutes or longer to build the component depending on the amount of dependencies the component had. However using this new build technique it only takes about 5-10 seconds! Yes seconds not minutes, so using this new method is a massive time saver in itself."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component I did this by copying the command from npmjs.com","So once these were installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built. My output directory now contained the following four files index.b3e974780ae961d2bc5e.bundle.js,index.b3e974780ae961d2bc5e.bundle.map,UDLottiePlayer.gif,UDLottiePlayer.psd1,UDLottiePlayer.psm1. Next stage was to now test this in a simple dashboard, I made a directory called UDLottiePlayer within C:\\Program Files\\WindowsPowerShell\\Modules* and copied these newly created files into this new folder directory **C:\\Program Files\\WindowsPowerShell\\Modules\\UDLottiePlayer*. I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","The result was just as planned","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component that allows you to play sound on your dashboard. I have seen this being asked in the ironman software forum. How to play sound? So I found a component which does just that, read all about it in this blog I wrote"]},{"i":"udawesomeaudio-powershell-universal-component-module","l":"UDAwesomeAudio Powershell Universal Component Module \uD83C\uDFA7","p":["Link To Download UDAwesomeAudio Module","GitHub Link to this UDAwesomeAudio Repository"]},{"i":"powershell-universal","l":"Powershell Universal \uD83C\uDF0E","p":["If you read my last blog, then please feel free to skip these first few paragraph titles. I just want to re-emphasize how ** amazing Powershell Universal is, and how it could change the way you code, and think about displaying your code. I have mentioned this a good few times in previous blogs that I really miss using Powershell Universal. I mean when I first got using this, it was just called Universal Dashboard. This then grew into a product offering three main features Jobs, APIs and Dashboards. This became Powershell Universal, read all about what it can do here:-","More information on this great product here","To me this product is just so amazing. Not only does it contain a huge amount of components for your dashboards, images, cards, accordians, buttons, select options, graphs and lots more the developer of this software also gave the opportunity to allow you as an end-user build custom components to extend the list of components that can be used.","Check out the demo instance of this software to get a feel for the main product portal where you can control all the super cool stuff you can do.","Demo instance of the product"]},{"i":"react-component","l":"React Component \uD83D\uDD27","p":["Yes I know I keep mentioning the word component but you may know this as a widget or self-contained application, or maybe a mini application to me a component does its own thing using its own bit of the webpage and can have certain parameters associated with it. So you could have a graph component that has a refresh button. Back in the old web days, this would refresh the whole webpage to then re-render the graph. Where-as a React component would just refresh that component, and anything else on the web-page would be un-affected by this refresh happening on the graph component. This is why to me they are isolated objects on the web-page all running in their own run-spaces.","Although Powershell Universal is like amazing, like so amazing. It is using that material-ui theme, and all the associated components with that theme. All the components for this react theme are listed here:-","the first of the Material-UI components","So hopefully by now you know what I mean by the word component. If you are still confused then please check-out the official documentation for the components that are included into this product. Seriously this is well worth reading the documentation to understand this product more, as just like it was for me, all this was brand-new stuff to learn, and get my head around what these different components did, how they displayed on the screen, and how I could use them for particular parts of my dashboard.","Official Documentation for Powershell Universal Components"]},{"i":"custom-component","l":"Custom Component ⚒️","p":["There are many places you can find custom react components that either individuals have built, or a team of people working together to build a component. One site I like to see custom react components on is npmjs.com there is also https://bit.cloud/ however I prefer to use:-","Official NPMJS website","Seriously the react component library is massive, like really, really big. There are just so many components out there. Like looking at card components, hundreds are returned...but end of the day they are all card components...just a bit different looking (themed). So as always just like pretty much all my modules I try to produce I try to find something that does not already exist, and will hopefully benefit others. I remember a good few years back I looked at a captcha but it was too difficult to implement, and I am not an expert on tokens to verify, which it seemed all captcha components required. Still to this day there is no official captcha component for the official product. So to me this was a change to prove to my guardian angel I was back on the path to making things happen."]},{"i":"react-audio-component","l":"React Audio Component \uD83C\uDFB5","p":["First step was to go to www.npmjs.com to see what I could find on there. The great thing when looking to build components is that you can learn something new. Like how I ended up constructed the JSX file for the component was a bit different to anything I have done before. I was thinking about audio, as again when searching the official documentation for the components that come with the product I could not find anything for audio, so decided an audio component would be a good component.","The component I found react-awesome-audio","Yes this was the reason behind the naming convention of this module was the name of the actual react component.","I always appreciate it when someone has the time to write good documentation on how to use something, and this component had just that, as well as a demo site showing you the component in action. Another great thing is this component had zero dependencies, meaning I only needed one npm node package in order to build this component. This was a major blessing as well, as in the past I can remember some components, having lots and lots of dependencies, which will slow down the build process."]},{"i":"github-template","l":"Github Template \uD83D\uDC7E","p":["Super Important You Need This","The next section on building the custom component relies on you having a local copy of this repository which is a template you can use to convert any react component into a Powershell Universal dashboard component. I mean how amazing is that. You can convert something written in a completely different language and make it work with native Powershell commands, using Powershell. It still blows my mind how amazing this is, as now there so many possibilities on what you can now display in your dashboard."]},{"i":"building-the-component","l":"Building The Component \uD83D\uDEA7","p":["There is an outline of how to build a custom component here:-","Official Documentation","Further official documentation can also be found on the blog on the ironman software site. This documentation personally made more sense to me:-","More official documentation","Even though I had previously built a good amount I think 90+ custom components, that was using a different technique, as the software has since been updated to use a newer version of react, and so the build method changed. Honestly this change has given a ginormous improvement in the time it takes to build the custom component. When I was building these custom components on my x86 laptop, it was taking sometimes up to 20 minutes or longer to build the component depending on the amount of dependencies the component had. However using this new build technique it only takes about 5-10 seconds! Yes seconds not minutes, so using this new method is a massive time saver in itself."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component I did this by copying the command from npmjs.com","So once this was installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above.","Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","As mentioned I had never passed props like this before, it did take me a few attempts to figure out this syntax would be valid. As VSCode was not complaining about any of the code above, so now I needed to edit the **.PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built. My output directory now contained the following four files index.c6435f30658b7e03be80.bundle.js,index.c6435f30658b7e03be80.bundle.map,UDAwesomeAudio.psd1,UDAwesomeAudio.psm1. Next stage was to now test this in a simple dashboard, I made a directory called UDAwesomeAudio within C:\\Program Files\\WindowsPowerShell\\Modules* and copied these newly created files into this new folder directory **C:\\Program Files\\WindowsPowerShell\\Modules\\UDAwesomeAudio*. I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace","Enjoy this component"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component which allows you to perfectly fit text onto one line or more. This for me is perfect for headings that maybe one character to long to fit on one line. Problem solved with this component, read all about it in this blog article I wrote"]},{"i":"udtextfit-powershell-universal-component-module","l":"UDTextFit Powershell Universal Component Module \uD83D\uDCDD","p":["Link To Download UDTextFit Module","GitHub Link to this UDTextFit Repository","Does not fit on one line","Now fits perfectly"]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["So this component was built to please those who like me sometimes wish that text could be formatted a little better, like keeping a title to one line. Sometimes this is not possible, and like I have done on a good few of these blog pages, you end up with a title that spans just over one line, but the next title size down looks a bit to blantant that you have made that title smaller. Would it not be awesome if the text just magically sized itself to fit? Well folks now you can see why I decided that this particular component would be a good component to add.","Orginal React Component Here","Demo of the original component"]},{"i":"using-new-site-to-find-components","l":"Using New Site To Find Components \uD83D\uDCF0","p":["Yep so even though I am providing the link to the official react component above which is pointing to npmjs.com it seems for some reason when I am searching on npmjs.com I get limited to 20 results no matter what. Like I used to get back thousands of results, and scroll through pages and pages of components till I found the one I was looking for. I even signed up to npmjs thinking maybe you now need to be a member to get back all the results, but I was still only getting 20 results back.","Thankfully the internet has more than just one webpage to find react components, and I then landed on:-","I am now using yarnpkg to find React components","Which was bringing back the number of results I used to get on npmjs and it even gave me the link to the npmjs package page.","So I know this is not the most super-fancy react component but as mentioned I could really see this being useful if your title spills one or two characters long to fit nicely on the line you are typing. As this is a pretty basic react component with a few parameters I have included all of these in the JSX file which was used to build the final Powershell module."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component as I saw this needed more than one dependency I used the following website to detect all the dependencies to save me clicking","Find Dependencies Easily","Needed all these dependencies","I then copied this list into notepad then ran this one line to install all these dependencies","So once these were installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","Please note I still need to edit this before I can publish it to the gallery as no description","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built.","I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to allow you to select how many lines of text should be displayed, then will provide a link to read the rest of the text in a full article. You can find out the benefits of using this in this blog"]},{"i":"udtruncatetext-powershell-universal-component-module","l":"UDTruncateText Powershell Universal Component Module \uD83E\uDD90","p":["Link To Download UDTruncateText Module","GitHub Link to this UDTruncateText Repository","Maybe you have a lot of text and not enough space","Truncating the text to give the less is more approach"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83E\uDD2A","p":["A real quick and easy dashboard to demonstrate the power behind this component."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["Okay so I know if you are a web-designer or know your HTML and JavaScript well enough you could probably just hard-code the solution. However I am just a guy who loves to use Powershell to make things work, and try to provide an easier solution to the given problem.","What was the problem? Me, yes that is right the problem was me. I was looking for another component to build, one that did not exist already in the eco-system. It is getting tough to find a useful component that I have not already built or is not included in the product by default. However I saw this component and thought \uD83D\uDCA1 this would be a great idea to build this as a custom React component for Powershell Universal.","Orginal React Component Here","Demo of the original component"]},{"i":"using-new-site-to-find-components","l":"Using New Site To Find Components \uD83D\uDCF0","p":["IF YOU READ THE LAST ARTICLE YOU CAN SKIP THIS PARAGRAPH","Yep so even though I am providing the link to the official react component above which is pointing to npmjs.com it seems for some reason when I am searching on npmjs.com I get limited to 20 results no matter what. Like I used to get back thousands of results, and scroll through pages and pages of components till I found the one I was looking for. I even signed up to npmjs thinking maybe you now need to be a member to get back all the results, but I was still only getting 20 results back.","Thankfully the internet has more than just one webpage to find react components, and I then landed on:-","I am now using yarnpkg to find React components","Which was bringing back the number of results I used to get on npmjs and it even gave me the link to the npmjs package page.","So I know this is not the most super-fancy react component but as mentioned I could really see this being useful if you have a super busy dashboard with so much information to display to the user, so instead of giving the end-user a brain-overload. Why not present just enough information to the end-user then let them decide if they wish to read the full article associated with the truncated text."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component as I saw this needed more than one dependency I used the following website to detect all the dependencies to save me clicking","Find Dependencies Easily","I then copied this list into notepad then ran this one line to install all these dependencies","So once these were installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built.","I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to allow you to find the perfect HEX colour. This component also has a nice little preview box of the colour selected. Read more about it in this blog I wrote here"]},{"i":"udcolorful-powershell-universal-component-module","l":"UDColorful Powershell Universal Component Module \uD83D\uDC68‍\uD83C\uDFA8","p":["Link To Download UDColorful Module","GitHub Link to this UDColorful Repository"]},{"i":"demo-of-component","l":"Demo Of Component ⌚","p":["A real quick and easy dashboard to demonstrate this component.","Is all you need to type to get this component displaying on your dashboard.","This is a demo of the component in action"]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["I did see the other week that the developer behind this amazing product, the man himself \uD83E\uDD41 Mr Adam Driscoll had actually published a colour picker himself. Like I thought this was a really good idea, why haven't I done one of these?","UniversalDashboard.ColorPicker","So this was my new project, to build an awesome colour picker, but have it only pull back the HEX colour code so this could be used to help people modify their dashboard to their own colour needs. I also read that Chrissy LeMaire has developed a bunch of themes for Powershell Universal and these will now be included in the product. Great work there for sure!","Everyone is different though, and although you may use one of these pre-built themes you may wish that the colour was slightly different on certain text, or components on the dashboard. Having a live-real-time colour picker is the answer. I thought this was particulary nice the fact it also displayed the current colour selected, as well as giving you a small preview of the colour selected.","Orginal React Component Here","Demo of the original component"]},{"i":"using-new-site-to-find-components","l":"Using New Site To Find Components \uD83D\uDCF0","p":["IF YOU READ THE LAST ARTICLE YOU CAN SKIP THIS PARAGRAPH","Yep so even though I am providing the link to the official react component above which is pointing to npmjs.com it seems for some reason when I am searching on npmjs.com I get limited to 20 results no matter what. Like I used to get back thousands of results, and scroll through pages and pages of components till I found the one I was looking for. I even signed up to npmjs thinking maybe you now need to be a member to get back all the results, but I was still only getting 20 results back.","Thankfully the internet has more than just one webpage to find react components, and I then landed on:-","I am now using yarnpkg to find React components","Which was bringing back the number of results I used to get on npmjs and it even gave me the link to the npmjs package page.","Okay I may have not been the first person to build a colour picker now for Powershell Universal, but all the same as this particular component did not have any dependencies, I actually built this first thing in the morning when I woke up, and from start to finish was only like about 10 or 15 minutes in total, which was great to have a component working in that amount of time."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component","So once this was installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built.","I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component which automatically turns URL addresses or email addresses to automatic links. All you need to do is type. How cool is that, read more on this component here"]},{"i":"udlinkify-powershell-universal-component-module","l":"UDLinkify Powershell Universal Component Module \uD83D\uDD17","p":["Link To Download UDLinkify Module","GitHub Link to this UDLinkify Repository","Maybe you have a lot of links and forget to use new-udlink for each link","This component automatically detects hyperlinks and mail-links"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDCA5","p":["A real quick and easy dashboard to demonstrate the power behind this component. As you can see I have just used plain text to type all the information I need, and this component automatically turns these into correct hyperlinks."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["After having found a few other nice text components that did not already exist to my knowledge for Powershell Universal, I set out to find some more. I came across another simple but yet highly effective and useful React component","Orginal React Component Here","Demo of the original component"]},{"i":"using-new-site-to-find-components","l":"Using New Site To Find Components \uD83D\uDCF0","p":["IF YOU READ THE LAST ARTICLE YOU CAN SKIP THIS PARAGRAPH","Yep so even though I am providing the link to the official react component above which is pointing to npmjs.com it seems for some reason when I am searching on npmjs.com I get limited to 20 results no matter what. Like I used to get back thousands of results, and scroll through pages and pages of components till I found the one I was looking for. I even signed up to npmjs thinking maybe you now need to be a member to get back all the results, but I was still only getting 20 results back.","Thankfully the internet has more than just one webpage to find react components, and I then landed on:-","I am now using yarnpkg to find React components","Which was bringing back the number of results I used to get on npmjs and it even gave me the link to the npmjs package page.","Again this might not be the best looking or most fancy component that is out there to use, however it will save you the time of having to remember to use New-UDLink and I can see this being extremely useful for people who just like to type the content and not worry about making sure the hyperlink is a hyperlink."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component as I saw this needed more than one dependency I used the following website to detect all the dependencies to save me clicking","Find Dependencies Easily","I then copied this list into notepad then ran this one line to install all these dependencies","So once these were installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built.","I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to add a nice scroll progress bar to your dashboard page. This component needs UDStyle to position it correctly on the page so please read this blog to find out more"]},{"i":"udscrollprogress-powershell-universal-component-module","l":"UDScrollProgress Powershell Universal Component Module \uD83D\uDCDC","p":["Link To Download UDScrollProgress Module","GitHub Link to this UDScrollProgress Repository","Please note the below GIF did not record that well, the component does look really nice trust me Demo of component"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDCA5","p":["A simple dashboard full of nonsense text to bulk up the page to allow the progress scroll bar to be put to good use. Please notice the use of ``New-UDStyle``` this was required to get the position of this component to display just perfectly. I did try to build this into the JSX file but failed so took this option instead."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["Again this is to me is just another \uD83D\uDE0E nice add-on component to give a little more bling to the dashboard you are making. Especially if it involves scrolling, this gives a really nice indication of how much more of the page you need to scroll, or have scrolled through.","Orginal React Component Here","Demo of the original component"]},{"i":"using-new-site-to-find-components","l":"Using New Site To Find Components \uD83D\uDCF0","p":["IF YOU READ THE LAST ARTICLE YOU CAN SKIP THIS PARAGRAPH","Yep so even though I am providing the link to the official react component above which is pointing to npmjs.com it seems for some reason when I am searching on npmjs.com I get limited to 20 results no matter what. Like I used to get back thousands of results, and scroll through pages and pages of components till I found the one I was looking for. I even signed up to npmjs thinking maybe you now need to be a member to get back all the results, but I was still only getting 20 results back.","Thankfully the internet has more than just one webpage to find react components, and I then landed on:-","I am now using yarnpkg to find React components","Which was bringing back the number of results I used to get on npmjs and it even gave me the link to the npmjs package page.","Well like the last few times, I do not think this will turn anyones world upside-down with this react component, but to me it is a really nice feature to have on a page where there is a lot of content and scrolling is involved. It just gives the page that finishing touch, and I really like it and the effect it brings, nice and subtle. Hence I wanted to build it."]},{"i":"component-jsx-file","l":"Component JSX File \uD83D\uDDC3️","p":["So there are a fair few good files you need to edit in some shape or form to build a component, I think it would be a good idea for me to document this process to show how simple it really is. Before I could edit this JSX file within the components folder I needed to make sure I had installed the npm pacakge for this react component as I saw this needed the one npm package I just did","So once this was installed, and I had renamed the .PSD1 and .PSM1 file to the module name I wanted. I then edited the .PSD1 file to include the RootModule as the newly named .PSM1 file, I edited the component.build.ps1 file to copy the newly named modules","also edited line 20 in the webpack.config.js file to be","Within the components folder there is an index.js file my edited file looked like","Please keep case-sensitive lower-case for the webpack.config.js file which then reflects what is typed as first arguement within the parenthesis as shown above. Once you have made all these edits to the existing template files, and installed the npm package and all dependencies (in this case I only had two packages to install as only one dependency) it is time to construct the actual component that will be displayed on the dashboard. This is done by editing the component.jsx file witin the components folder within the github template you downloaded. This is my final edited component.jsx file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"ready-steady-go","l":"Ready, Steady, Go! \uD83D\uDEA6","p":["So once you have followed the above, you are now ready to run:-","As long as you read the official documentation on building a custom component you would have already downloaded all the prerequisite modules and software required to build custom components. I did find I needed to also install the psake module as well. This process literally took 10 seconds or less. As long as you do not get any errors, and the process completes then within the output directory you will have you brand-new custom component you built.","I restarted the PowershellUniversal service then logged into the main portal. Verified the module was being picked up by the software, by searching the available modules within the program. Once I verified my new module was included, I then did a test on the dashboard.","I now had a fully working react custom component loaded into the Powershell Universal dashboard I had created. I then verified all the parameters worked, which they did then it was time to publish this module to the Powershell Gallery. Please note to include ud-component within the module tags to enable your custom component to be found on the market place exclusive to this product.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to animate text in a loop display. There is a huge amount of customisation that can be done to the animation, so read this blog to find out more"]},{"i":"udtextloop-powershell-universal-component-module","l":"UDTextLoop Powershell Universal Component Module \uD83E\uDD73","p":["Maybe you like looping in time like this fella","Link To Download UDTextLoop Module","GitHub Link to this UDTextLoop Repository","How this looks in action"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDE0E","p":["I did tweet this exact dashboard, honestly there is so much tuning you can do with the looping effect but I thought this looked good for a demo purpose"]},{"i":"revisiting-a-component","l":"Revisiting a component \uD83E\uDDD0","p":["It was only after building this module, like almost immediately after. I thought damn I am sure I have done a text loop before. However I am pretty sure this is using a slightly different package than the previous text looper. I have delayed writing this blog, as this component did not seem to be responding to a particular parameter. Ends up I was to blame. Although I try to be careful when I type, I had made a tiny-typo on the hashtable in the function, so the name was not matching the prop name being defined in the main component JSX file. Hence the parameter was not working fully. Once this was corrected it was time for me to cook up a demo dashboard displaying how to use this component should you so wish."]},{"i":"remember-it-is-your-imagination","l":"Remember it is your imagination \uD83E\uDD2F","p":["Recently on the forum someone wanted a component to be displaying slightly wider. I was like I am sure you can get the result you want using New-UDStyle. I posted an example of how I am using this for the reading progress bar. Boom a few days later they replied to say they had solved it with New-UDStyle. I know to use this software Powershell Universal you do not need or require any HTML,JS or CSS knowledge, as the majority of the customization can be done via parameters built in. Or possibly choosing one of the hundreds and hundres of new themes the lovely Chrissy Lemaire spent time working on."]},{"i":"cascading-style-sheets","l":"Cascading Style Sheets \uD83E\uDD13","p":["Only sometimes you need to dig-deep and try a little sprinkle of CSS. So without going off on a marjor side-track all about Cascading Style Sheets basically in a nut-shell this is what is used to apply certain styling to certain elements of the webpage. This gives greater flexibility and control how styling is done on only the elements of the webpage you want styled. For a complete break-down on what CSS is then just search the web to find out more information on it, but this is a brief introduction to what CSS is and why it is used. It is like a simple hash table, you have a key, then you have a value associated to that key."]},{"i":"making-it-possible","l":"Making It Possible \uD83D\uDE2F","p":["It really does seem anything is possible with Powershell Universal but yeah you might have to learn some new-tricks to make your exact vision of the perfect idea become a reality. For me CSS was almost like the missing ingredient I had to learn to make the perfect receipe for a nice visually looking display exactly how I wanted.","In hind-sight I suppose I could have wrapped this textloop with custom CSS styling built into the div it is nested in. Again having not used this software for a while these thing will come back to me or I can add a new version to the gallery if this is popular enough or requested by someone.","However as I mentioned early on in this blog New-UDStyle can add that bit of styling you want for your particular component. So this is why I have wrapped the demo in New-UDStyle as I wanted this to be bold and big on the page. I wanted all the text to have a big impact, so this is why I relied on CSS for the finishing touches."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["Orginal React Component Here","Codebox Demo of the original component","Again you may look on npmjs and be like wahoo this only has two dependencies, however that may not be quite true, as those two dependencies, might have sub-dependencies and so on. This had a total of ten different dependency packages that needed to be installed","Use this site to identify dependencies","Find Dependencies Easily It can save you a lot of clicking"]},{"i":"normal-procedure","l":"Normal Procedure \uD83D\uDDC3️","p":["After discovering that this needed a fair few dendencies I decided to do the normal procedure I follow of renaming files and certain bits of the files (please see previous blogs if un-sure on this process","I then copied this list into notepad then ran this one line to install all these dependencies","This is the final version of the component JSX file:-","So VSCode was not complaining about any of the code above, so now I needed to edit the .PSM1 and .PSD1 file to finish this component off before running invoke-build so this is my final PSD1 file below","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to allow you to add a wizard guide with steps and input fields, validation and custom messages. This is super neat so read more here"]},{"i":"udwizardry-powershell-universal-component-module","l":"UDWizardry Powershell Universal Component Module \uD83E\uDDD9‍♂️","p":["This module does not contain any spells","I just want to clarify that the naming of these modules is influenced by the actual name of the original react component I am rebuilding to make work in Powershell Universal. So I did not think Wizardry is maybe the best noun to use but this component is based upon react-wizardry hence the name UDWizardry.","Original React Component","By no means am I a react master. But as I understand as this product is constantly being updated, you can now use hooks within the main component JSX file to allow it to communicate with the dashboard you are using. This does make the whole process a lot slicker, as I do not know a lot on JS coding for react.","Link To Download UDWizardry Module","GitHub Link to this UDWizardry Repository","How this looks in action"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDE01","p":["When building this component which I will detail in a moment, but I needed a more efficient way of passing the actual stepper page with the inputs you wanted on it. Therefore I created a sub-function. I have limited this to a maximum of 7 inputs per-step-page. Just feel if you are using more than 7 inputs then maybe you should consider breaking it down into more steps. You can extend the amount of inputs but you will need to manually modify the function within the PSM1 file."]},{"i":"reason-behind-component","l":"Reason behind component \uD83D\uDCA1","p":["Although I have built stepper bars in the past, I had not built a true full wizard stepper component. So now that I am using the software again I thought I would have a look on the forum to see what was happening:-","Ironman Software Forum","I saw on here that a few users were requesting additional features on the stepper component that is built into the software. I do not have any official ties to the company but I can only assume that using a particular react themed engine like Material-UI you really need to stick to using all their components to keep the consistency through-out the dashboard components. This does not apply to me though, as I just like building components for this product to hopefully make the world a better place. Seriously though I do enjoy building components, and if I think I can build something that others will find useful, or be that missing piece in the puzzle, then I will try and build it. From the posts I was reading this particular component react-wizardry seemed to tick all those boxes. I was also amazed by the few dependencies this component required."]},{"i":"making-it-possible","l":"Making It Possible \uD83E\uDDE0","p":["It really does seem anything is possible with Powershell Universal but yeah you might have to learn some new-tricks to make your exact vision of the perfect idea become a reality. Two new tricks needed to be learnt in order to put the finishing touches to this component. After getting the required dependencies I used the demo of this component to help me construct on how I was going to build this component:-","CodeSandBox Basic Demo","So this proved that the component could indeed be built using the template Mr Adam Driscoll has kindly provided. It also proved that this would also eliminate the current issues with the built-in stepper component. But...The big but was how am I going to pass the stepper pages and input? And how was I going to get the actual data back that had been entered? as the example just showed this going to the console within the browser, which did work, but how could I bind that to Powershell Universal?","I know I had done components which had done this sort of thing before, but that was when the product was Universal Dashboard which was using an older version of react and a totally different themed react engine Materialize I believe with this theme. Old theme but everything has now changed as no longer using this, or the template used to build those components. Plus I mentioned before I am not a react developer, but I do look at some issues I have had building recent components, and it is complaining of the old style syntax in some of the node files which I have had to manually change."]},{"i":"what-did-i-do","l":"What did I do? \uD83D\uDE4F","p":["Well what else do you do when you have a complete pickle of a problem to solve with Powershell Universal? Ask the man himself Adam Driscoll. Although I never met the geezer in-person, he has always 100% been super helpful and kind enough to answer fan mail (I mean serious technical mails). I posed the question about being stuck on these two issues, I was trying to solve issue one, which was displaying the pages but for problem two I did not have a Scooby-doo how I was going to make that bit work.","As I had a repo setup for this project I shared the link and Adam kindly blessed me with his knowledge of how this could be accomplished by pushing a merge to the github repo with the required changes. To my complete shock there was not a lot of code that needed to be added or altered to get the data back. I will comment this in the code I share below."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["This is the final version of the component JSX file:-","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"bit-more-explaining","l":"Bit more explaining \uD83E\uDD71","p":["I had the challenge of how to construct the wizardry pages and wizardry input fields and how many input fields. So the solution was not as elegant as I had hoped, and in the function I wrote for this you are limited to a maximum of six input fields you could modify the function to over-come this limit.","You need to pass the design in an array format. The first item is the TITLE of that wizardry page. Then you need to nest another array to now include the fields. In a specific order, first item will be the LABEL displayed on the input field, the second item in the nested array will be the NAME of that field. Third item defines the TYPE of input that the field should be (please see below for a complete list of all the different types of input this component supports). Forth item is a boolean value to declare if this is a required input or not. Lastly you can type a custom validation message","Code below is showing a three step wizard that has three inputs on the first page, one input on the second step, and two inputs on the final third step."]},{"i":"fun-challenge","l":"Fun Challenge \uD83D\uDCAF","p":["I can honestly say this was a super-cool project to build as it gave a fun challenge to complete.","Please note, input types supports the following:","All the above input types comes with inbuilt validation.","So there is a lot you can do with this stepper, totally open to ideas to make the data easier to pass, I did it this way as it worked and I got the results I wanted. Always happy for you to ask me on twitter if none of this makes sense on how to use this component.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to display the estimated read time and word count of the text supplied. Similar to what is on most blog sites. This can be customised so read this blog to find out more"]},{"i":"udreadtime-powershell-universal-component-module","l":"UDReadTime Powershell Universal Component Module \uD83D\uDCDA","p":["Everyone loves a good read","So the inspiration behind this component was actually blog sites I have done in the past. Prior to this website, I have a few other personal websites that run off of github using a jekyll template. I noticed on the cards displaying the page it has an estimated read-time on it.","Again maybe if I knew enough JS I could just use the Invoke-UDJavaScript cmdlet and just do it that way. However I am more about Powershell, and doing things using Powershell. So I set off to find a component I could tweak to meet these needs.","This is the underlying component which made all this possible:- Original React Component","You can get yourself a copy of this module on the Powershell Gallery:- Link To Download UDReadTime Module","Here is the GitHub repository to this module which also includes all the project directories and files associated in the building of this component:- GitHub Link to this UDWizardry Repository","A simple screen-shot showing the component on a Powershell Universal dashboard:- How this looks in action"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDC47","p":["On the plus-side. When making this component I did put a good amount of thought into how I could allow you as the end-user to customise this component as much as possible. Although the below demo only shows this component using a couple of parameters I did actually include a lot more so you can tweak this component as much as possible. I did default a lot of those parameters to a specific value, so do not worry if you do not like everything about this component as you can customize it a lot."]},{"i":"reason-behind-component","l":"Reason behind component \uD83D\uDCA1","p":["So I already explained the reason I wanted to choose a reading time component. Before I stumbled across this particular component, I did have a good butchers at a fair few other react reading time components. However to me, this seemed like the most straight-forward easy-to-use component to get the goal accomplished. Which was to have a reading time component."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["This is the final version of the component JSX file:-"]},{"i":"check-out-all-the-props","l":"Check-out all the props \uD83D\uDED2","p":["In the code above, all the time you see the word props that is referring to the parameter name associated to that. So above you may notice the word props being used a lot, and this is why, as I wanted to allow a lot of customisation to this component.","With great customisation, comes a lot of options. Again you may think, well I really do like the time estimation, but I do not like the word count feature of this component. No problem, as I nested each of these factors into seperate div tags which are defaulted to displaying inline(side-by-side) but as I made a validated set for this particular parameter you also have the option of none in the validate set list. This will allow you to completely hid this text, so you will only have the actual read-time showing, and not the word count as well. So I just wanted to point out that this time I put a fair amount of thought into customising this component as much as possible.","To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"yes-lots-of-parameters","l":"Yes lots of parameters \uD83E\uDD13","p":["Even if you just glanced through the above code, you should hopefully notice that I did include a decent help file for each parameter so here is the help just on the parameters","Just to go through these parameters and what they are for, let us just have a quick glance through the official help file I did for this module.","As you can now hopefully appreciate, although this is a small component that gives you an estimated reading time and word count, there is also a great deal of customisation you can do with this component to have it display and look exactly how you want. This should hopefully be opening your mind to all the creative things you could do","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component which is like an Accordian Component but intended to be used for Frequently Asked Questions. As every good website should have a FAQ section"]},{"i":"udfaq-powershell-universal-component-module","l":"UDFAQ Powershell Universal Component Module \uD83D\uDCAD","p":["Frequently Asked Questions are always coming up. Like I don't remember Alice In Wonderland looking quite like this","This is the underlying component which made all this possible:- Original React Component","You can get yourself a copy of this module on the Powershell Gallery:- Link To Download UDFAQ Module","Here is the GitHub repository to this module which also includes all the project directories and files associated in the building of this component:- GitHub Link to this UDFAQ Repository","A simple GIF showing the component on a Powershell Universal dashboard:- How this looks in action"]},{"i":"a-long-time-ago","l":"A long-time ago... \uD83D\uDD75️‍♂️","p":["Yes for those of you who have been rolling with this product since its early days when it was just Universal Dashboard may remember a very similar component called the accordian. Well yes you would be correct in thinking that. However when looking at the latest documentation:-","Official Online Documentation","I could not find the old faithful accordian component still in the list of components to use. I am sure there is a good reason for this, however as I once used the accordian on a dashboard I designed years ago, I was thinking lets bring this component back to Powershell Universal.","As I mentioned in a previous blog I am trying to stick with the name of the actual react component that I am making the component from. Hence why I did not choose to use accordian, as this component was named a FAQ component, I stayed with that. I also went ahead and built this, as I always feel every-site should have a good FAQ section to answer the most common questions."]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDC47","p":["Once again when making this component I did put a good amount of thought into how I could allow you as the end-user to customise this component as much as possible. Although the below demo only shows this component using a couple of parameters I did actually include a lot more so you can tweak this component as much as possible. I did default a lot of those parameters to a specific value, so do not worry if you do not like everything about this component as you can customize it a lot."]},{"i":"please-look-how-the-data-is-passed","l":"Please look how the data is passed \uD83D\uDE44","p":["Okay so there is a reason on why I am saying this. That reason is pretty simple. Unless you pass the data in the format the component is expecting, then the component will not work. If you look at the original component you will see the rows is what is passing this data. You will also see it is specified in the following JSON format:-","Above is only a snippet of the total code, but this is showing two questions and two answers. On the UDFAQ component there were five values required for each input. This component you only require two inputs, the title (question) and the content (answer to the question). I decided that I could easily pass this data by using the following method","If you need more questions and answers to those quesitons, as you probably will, then just look at the demo dashboard code to see how easy it is to add another ordered hashtable to this arrary you are passing to the custom FAQ component."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["This is the final version of the component JSX file:-"]},{"i":"powershell-function","l":"Powershell Function \uD83D\uDCAA","p":["To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build"]},{"i":"yes-lots-of-parameters","l":"Yes lots of parameters \uD83E\uDD13","p":["Even if you just glanced through the above code, you should hopefully notice that I did include a decent help file for each parameter so here is the help just on the parameters","Just to go through these parameters and what they are for, let us just have a quick glance through the official help file I did for this module.","So all you need to provide to get this component working is a Title and Content. I hope this component makes it to your dashboard, as mentioned I think every-site should have a FAQ page and now you got the perfect component to use.","Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to display a card with a testimonial written as the main content, with a nice picture embedded into the top of the testimonial card"]},{"i":"udtestimonial-powershell-universal-component-module","l":"UDTestimonial Powershell Universal Component Module \uD83D\uDC96","p":["Appreciation is great to recieve so show some more appreciation in your life","This is the underlying component which made all this possible:- Original React Component","You can get yourself a copy of this module on the Powershell Gallery:- Link To Download UDTestimonial Module","Here is the GitHub repository to this module which also includes all the project directories and files associated in the building of this component:- GitHub Link to this UDTestimonial Repository","A simple PNG showing the component on a Powershell Universal dashboard:- How this looks in action"]},{"l":"Showing my appreciation","p":["Best pic I could find to show my appreciation","So as I been using this product since it first came out, I thought this is something else that is missing. Like yeah I could have done this using New-UDCard but isn't it nicer when pretty much all the work is done already, and you have to just add the finishing touches?","I totally get that some people may think this is over-kill, but I think it is another great feature to add to an already abundant choice of components built into the product.","It is only human nature to be happy when someone else is happy about the thing you have done. Personally I have received thanks from various people in the Powershell community. These were proud moments knowing I done something good. So why not celebrate that goodness with a react component.","One person I really want to give my thanks to, and really who this component was designed for is Adam Driscoll. He made all this possible, and I know there is a thriving community behind this software, but again personally I do not feel enough people are giving appreciation, for just how amazing this is, and the endless possibilities it gives you. So here is my thanks Adam Driscoll you the man!"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDC47","p":["First card with styling applied","How this component will look by default","I just tweaked some CSS attributes to get the desired look I was after which is shown in the first picture."]},{"l":"Please look at New-UDStyle","p":["As you may have spotted, in the demo dashboard I have used two New-UDTestimonial objects however they look quite different, how is this possible? By using the built-in New-UDStyle to give me complete control over how the component displays. This is done by me being able to pass pure CSS as the Style being applied to the component specified in the Content.","So how did you know how to adjust just those CSS styles? Simple answer I didn't know. So how did you do it then?","Quite simple dear reader. I right clicked on the part of the component I was interested in, then selected inspect element. This then showed the developer tools of the CSS styles being applied. I then simply spent sometime tweaking the various values within the browser to see the immediate effects of the values I was changing. Once happy with the changes, I copied the rule from the browser and then pasted it into the style parameter of New-UDStyle. Yeah I did spend a bit of time figuring these exact settings out, but to me this is now looking exactly how I wanted it to look.","Again I could have possibly included the CSS as properties within the JSX component file. However I want to encourage users of this software to try to learn new skills, look at playing with CSS values and adding new properties and values, to end up with the desired result you are after.","Originally I thought the component looked nice enough, but I know what I may think is nice, someone else might think is garbage, until you can tweak it enough to their pleasing. I have said it enough times, but that is why I think the possibilities with this software are limitless. You can really do what-ever it is you want."]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["This is the final version of the component JSX file:-","I was feeling on a bit of a roll, as I had just finished building the New-UDFAQ module. As this particular component had zero dependencies, and was easy enough for me to understand. This literally did not take very long at all from start to finish. In-fact customising the CSS was the longest thing about this project."]},{"i":"powershell-function","l":"Powershell Function \uD83E\uDD13","p":["To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build","Even if you just glanced through the above code, you should hopefully notice that I did include a decent help file for each parameter so here is the help just on the parameters","There are only four additonal parameters in total. The Name parameter, this will be displayed at the bottom, this is the name of who has given the testimonial. The Image parameter allows you to specify a string path to an image, I choose to use a URL. The Text parameter is the main text that will be displayed on the testimonial card. Last but not least is the Project parameter which is the project the testimonial refers to, this appear underneath the name displayed within the testimonial card."]},{"l":"CSS Breakdown","p":["The .jss1 is refering to the main card where I am setting the colour of the main card, the box-shadow settings to be applied to the main card, and finally rounding those sharp corner edges.","The .jss5 h3 is refering to the name being displayed, so I have set the colour from the default orange it applies to this custom blue colour.","The .jss2 and .jss3 both refer to the image that is displayed in the middle at the top of the card. The size, padding, positioning and a few other options were set here, to make the picture display slightly bigger than the default settings.","The .jss4 > p:before and .jss4 > p:after refer to the speech marks enclosing the main text within the card. A few changes were made here to get the position and font looking how I wanted it to look.","The .jss4 > p is refering to the main text part being displayed on the card and the .jss4 refering to the speech marks surrounding the main text","The .jss5 P is refering to the Project parameter text you specified, which will appear at the very bottom of the card."]},{"l":"MarketPlace link","p":["Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to display amazing looking link previews. Turning plain boring hyperlinks into a beautiful preview of that webpage"]},{"i":"udlinkpreview-powershell-universal-component-module","l":"UDLinkPreview Powershell Universal Component Module \uD83C\uDF81","p":["Nothing like a good work-out to get your brain-cells going","This is the underlying component which made all this possible:- Original React Component","You can get yourself a copy of this module on the Powershell Gallery:- Link To Download UDLinkPreview Module","Here is the GitHub repository to this module which also includes all the project directories and files associated in the building of this component:- GitHub Link to this UDLinkPreview Repository","A simple GIF showing the component in action on a Powershell Universal dashboard:- How this looks in action"]},{"i":"happy-friday","l":"Happy Friday \uD83D\uDE0F","p":["Hope your Friday is going better than this","Yes it is Friday the end of the working week for most office-based individuals. So I heard this phrase being bumped about recently Happy Friday. So what better way to appreciate a Happy Friday is with a brand-new Powershell Universal Component.","I worked out recently using the blog I have done and the dates recorded on them, that I have built 15 Powershell Universal Modules in the last 20 days. So I only had 5 modules I missed out on for a module a day. I thought that was a pretty amazing fact to share with you all.","Possibly the 5 days were spent searching for a component that did not exist already. Like I nearly built the syntax highlighter to only then search the Powershell Universal Market-Place to find out it had already been done by Adam Driscoll so there was no need to build that. I looked at animation, then I discover in the new documentation that animation now comes built-in, so again there was no need.","Honestly it has been really tough to find useful components I believe are worthy of bringing to Powershell Universal, this is down to having built a load of custom components already in the past, and the fact as I mentioned in the last paragraph and previous blogs there are now so many built-in components to choose from with-in Powershell Universal, that you are already spoilt for choice"]},{"i":"why-build-custom-components","l":"Why Build Custom Components? \uD83E\uDDE0","p":["For me as I have said many times before, that this software Powershell Universal gives you unlimited possiblities on what you can do and display with the code you produce. The product has matured a lot since it was first released, and as mentioned before has a thriving community behind the product, who like me love using it. So as this product has been about for a good few years now, over that time-period various requests and moving to a new React component library Material-UI a lot more components have come as standard out-the-box.","I really do believe this is a magical bit of software to give you that opportunity to express yourself through the code you write. I am not a web-designer by trade, I have dabbled in doing bits here and there, and maintaining IIS servers. However I have never been employed as a front-end designer. So for me to try and start coding that sort of thing would take a lot of time to learn new tricks, and for me would go against just using Powershell cmdlets for the dashboards I build. What I am on about it the exact component I just built.","Said it before so will say it again, but I really am amazed at the feed-back I have had from this personal blog website, and the opportunites it has presented, as well as playing a part in helping me land this new dream-job. I have been sharing various links from this site on Twitter and LinkedIn to share what I have been working on to bring new modules to Powershell. Each time you share a hyperlink on a social-media site it will automatically turn that hyperlink into a preview link showing you a picture from the site, and a bit of information on the page, the domain and a link. Again I am not a web-designer by trade, or front-end designer, but this to me is really, really cool.","I know this product has New-UDLink to be able to display hyperlinks, but having shared a lot of links recently on social-media sites I really do like the link preview that automatically happens when you share a link. As in a bit of information about that particular hyperlink is automatically displayed like the domain, a picture or media, and some information on that webpage the link leads to. This to me is really nice it turns plain text hyperlink into something that looks much more attractive. It also personally gives me a bit more confidence about the link I am clicking on, and the type of webpage I expect to land on after clicking the link.","So for me this is a prime opportunity to bring this feature of a link preview to the mighty Powershell Universal to expand the eco-system of components, and giving end-users more choice on things you can do with this software. I do not know why more community members do not get building custom components? As all the information on how-to do this is out there, and I am really hoping these blogs will inspire some others to have a go at creating a custom component they want for their dashboard.","Like I could have done some Powershell scripting to obtain this information, by writing a function and placing that within the dashboard, and display this information on an existing component such as New-UDCard and achieving the same or similar results. I do not like to think of this as taking a short-cut (as this particular component took me a lot longer than anticipated to complete) to writing a Powershell function, for me it is like why am I going to re-invent-the-wheel if the wheel already exists. In this scenario the wheel is the link preview component I was sure that one would exist that I could use, and further-more by building this as a dedicated component, it makes it far-easier for other Powershell Universal users to use this."]},{"i":"package-problems","l":"Package Problems \uD83E\uDD7A","p":["So my problems were not as bad as this particular problem which made me happier about the situation, as it could have be worse like this picture displays a real bad problem to deal with","Before selecting a component to build I like to actually look at the read me to find out more about the component and the props (parameters) I can pass to the component. First-off the choice was more limited to what I was expecting, the majority of the packages were all forked from one-particular package.","I tried numerous variants of these packages and the official package they were based on, but it seemed very hit-and-miss with the results. Like the component would work, I would tweak a CSS setting in the main project file, and then it would stop working, then possible start working after a good amount of time, or have issues displaying multiple cards. I almost got annoyed by the process, as I was thinking it had something to do with existing node packages. Like the time to load the actual end result seemed to also vary a great deal. Sometimes it would just be stuck on the CSS loading bit, and it would only become evident that there was an issue when looking into the developer browser tools to see there was an error, and that link I had parsed was never going to be retrieved.","Only after reading a full article on on of the forked packages I noticed they had a small section saying if using this for to display URLs then it can be very sparodic on the results. Damn I wish I had of read all the articles from start to finish as I only normally look at the code section and the prop section. So it was not me or me changing the code, it was the end API server being at fault. I mean some of the packages I tried did not even have an API configured. There was also a section on how you could configure and install your own server to be able to fetch the preview link information. Wow this was starting to become over-kill even for me. I looked on the internet briefly for an API server but these all seemed to either require you to sign up for a key, and then was limited to a certain number before it came a paid-for-service.","As always I did not want to stop once I got started looking at this component. I think I tweaked my search-phrase I was using to find this component a little then I found a preview link component, that also offered you a link to the API server it was using which allowed me to test to see how reliable the results were. This seemed fantastic, and exactly what I was looking for first time round, after having already spent a good number of hours trying and customising numerous node packages for this project, only to find they did not work, or were too un-reliable to release as a component.","This is why this particular project took me a lot longer than I originally anticipated. As finding a package which ticked all the boxes and was also very reliable seemed near impossible. Thankfully I did not give-up on that challenge and kept persevering until the end.","A Demo of a single link preview display. Looks nice right \uD83D\uDE01"]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDC47","p":["For me this was a super-simple way to design a very rich looking dashboard with information to various contents, that you have the chance to read about on the card displaying the link preview. I took the time to customise the original CSS file it was using to display the information. I did not pass these as props in the main component, this does not mean you cannot customise it to your requirements. It just means that you will have to use New-UDStyle to adjust the appearance if you do not like the look of the default appearance.","Again this process took a bit longer than I originally thought, as I really liked the look of certain displays, but then found this mis-aligned the height of some cards depending on the image. I could not decide where the picture would look best, as originally it was on the right-hand-side. Eventually I decided placing the image on the top of the link preview looked the nicest setting. I customised all the font-displays and certain colours, to give that nice easy read appeal to the font.","Weirdly, and this was the same for the other packages I had already spent hours testing, was that although you got a beautiful link preview and the cursor automatically changed to a hand cursor as if the item was able to be clicked, clicking on the link preview did nothing. So now faced another challenge that I needed this item to actually be a hyperlink as well, as to me it would only be half-a-job if you could not actually click on the link preview to visit the site. Thankfully this was not too difficult and is shown in the below JSX file I constructed to build this component"]},{"i":"the-project","l":"The Project \uD83C\uDFD7️","p":["This is the final version of the component JSX file:-","This particular component also offered two props which other components did not offer. This was custom loading text and custom page not found text which would also give the end-user more options for what they wanted displayed on the screen during this period of loading, or if the page could not be found, the appropriate text to be displayed. I done a good amount of testing with this package and not once have I had any issues with the content displaying, hence I have decided to release this as another custom component for Powershell Universal.","Just being able to display hyperlinks like this, just makes me want to click it so much more than a regular plain looking hyperlink. All I had to do was supply a URL and I got this display back"]},{"i":"powershell-function","l":"Powershell Function \uD83E\uDD13","p":["To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build","Even if you just glanced through the above code, you should hopefully notice that I did include a decent help file for each parameter so here is the help just on the parameters","There are only two additonal parameters to the one mandatory parameter. The code I provided for the demo dashboard shows me only using the one required mandatory parameter to display the beauty of this component to the end-user. I just wanted this to be as easy-as-possible to use, and produce amazingly good looking results, all from a plain looking hyperlink. I think that particular mission has now been accomplished."]},{"i":"marketplace-link","l":"MarketPlace link \uD83E\uDD2B","p":["Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Universal Component to display in full screen mode, like when watching a video in full screen on the internet."]},{"i":"udfullscreen-powershell-universal-component-module","l":"UDFullScreen Powershell Universal Component Module \uD83D\uDCFA","p":["Sometimes bigger is better","This is the underlying component which made all this possible:- Original React Component","You can get yourself a copy of this module on the Powershell Gallery:- Link To Download UDFullScreen Module","Here is the GitHub repository to this module which also includes all the project directories and files associated in the building of this component:- GitHub Link to this UDFullScreen Repository","A simple GIF showing the component in action on a Powershell Universal dashboard:- How this looks in action"]},{"i":"super-sunday","l":"Super Sunday \uD83D\uDE0F","p":["Giving myself sometime away from the screen let me attack this fro ma brand-new angle","So what makes this a Super Sunday..? Well apart from it being the local car-boot which I do enjoy going to, it is a super Sunday because I managed to get another component smashed for Powershell Universal and what makes this even better, is that this particular component was not even my idea.","See I got nominated shall we say by a fellow Powershell Universal user. I have worked with this chap before on the google chart components I did a good while back, and I think he is a sound bloke. Just to get the feel for the true bromance on the forums going on then check out the origins of this component request right here:-","Nominated for the task","Not sure if like me when you was really young, you had mates that would double-dare you to do something potentially dangerous, just so they could see if it was safe for themselves to do. Although I did not feel any danger was directly involved with this, I did feel like it was a double-dare moment from childhood past.","Once I got the component confirmed it was time to put on my mask and cape, and go make something awesome. Or that was the plan. The link I was sent lead me to a GitHub repository right here:-","GitHub Link to what was wanted","Looking at the readme provided I saw it was using the react-full-screen package. How did I know this, well it is shown right at the top of the JSX file you need to build import { FullScreen, useFullScreenHandle } from react-full-screen; Next step was go check this package out, as I knew the exact name of the package I went to use npmjs.com and this lead me to the following page:-","The Component I needed to build","Honestly it has been really tough to find useful components I believe are worthy of bringing to Powershell Universal, this is down to having built a load of custom components already in the past, and the fact there are now so many built-in components to choose from with-in Powershell Universal, that you are already spoilt for choice This was requested by the community hence I did this component."]},{"i":"i-have-never-thought-about-this","l":"I Have Never Thought About This \uD83E\uDDE0","p":["Time to fly into action","For me as I have said many times before, that this software Powershell Universal gives you unlimited possiblities on what you can do and display with the code you produce. The product has matured a lot since it was first released, and as mentioned before has a thriving community behind the product, who like me love using it. So as this product has been about for a good few years now, over that time-period various requests and moving to a new React component library Material-UI a lot more components have come as standard out-the-box.","I really do believe this is a magical bit of software to give you that opportunity to express yourself through the code you write. I am not a web-designer by trade, I have dabbled in doing bits here and there, and maintaining IIS servers. However I have never been employed as a front-end designer. So for me to try and start coding that sort of thing would take a lot of time to learn new tricks, and for me would go against just using Powershell cmdlets for the dashboards I build. What I am on about it the exact component I just built.","Just to prove anything is possible I took on the challenge of building this component to use within Powershell Universal. It is a bit odd, as I have not thought of building a full-screen component. Like probably just thinking I did not know one existed. It just does not come-up in the search results I get when looking for components. However it is an exceedingly good idea \uD83D\uDCA1 to have an option to display stuff in full screen, especially if you are displaying the amazing dashboard you built on a TV on the wall, or you want to give a presentation on your dashboard, then yeah this is the component for you."]},{"i":"package-problems","l":"Package Problems \uD83E\uDD7A","p":["Remember when coding stay calm and focused else you could end up like this","Getting the package dependencies was not the issue, as this pacakge only needed two additional pacakages to make the component work. The issue was I could not get the component to originally work after building it from the demo-code supplied on npmjs. So as you probably know the internet can bee a great tool to turn to when you need a different example of the code. So I turned to codesandbox and I found this particular demo:-","Online demo of the component","Using this example I was able to get a fully working version of the component, based on this demo code supplied in the link above.","I wanted to customise the component a little, just to add my sprinkle of uniqueness to it. So instead of using the button icon from the code I ended up using the react-icons and selecting the full-screen and normal-screen icons from this package. I then added props to the CSS styling to allow you as the end-user to the customise the full-screen and normal-screen buttons to your exact needs as parameters.","However now the problem was I could only display text in this component. Like I could not figure out how I was going to bind child Powershell Universal components to this component. This was doing my head-in as I was so close to the finish-link, but this would not be a great component if you could only display static text in full-screen mode it kind of goes against the whole-point of these dashboards being able to display beautiful content if you cannot view them in the full-screen mode, but only boring plain static text."]},{"i":"don-t-give-up","l":"Don't Give Up \uD83D\uDE2B","p":["It is too easy in life to give up if something does not work out first-time. Not just in coding, but in general. I guess that is why we have become such a throw-away society, as you can just replace things, and give-up on them, instead of trying to figure out what is wrong with it.","I did not manage to get the content displaying within the component the first-time. Would of been easy to say nope it is not possible. But I knew this could be possible, I just did not quite know how. I tried some usual methods I thought would work, but each time it kept failing.","Not sure what caused this spark in my brain but I thought why not look at the universal-dashboard node package that is used as part of the build process. Behold there was a readme that contain this golden nugget of information","This function is used to render other Universal Dashboard components. This might be handy if you support child components for your component.","Okay so now I had this bit of information time to make it work...Well not being a react developer this seemed slightly harder than I first expected, as I was trying to call it using","Where I wanted the content to be displayed, however this just did not work. I did not want to give-up but I needed to go to bed as was already early-hours of Sunday morning by this point."]},{"i":"eureka-moment","l":"Eureka Moment \uD83C\uDF86","p":["The feeling of awesomeness was what I was feeling","I was just getting ready to set off on a long drive, and just wanted to update the thread on this topic on the forum. Not sure why I did not think about this Saturday but thought there must be an example of how this is done on the installation I have on the Cloud machine I am running this off of. Searching around in the location you install Powershell Universal I was able to find the associated .MAP files for the components in use. Now again I do not know for like sure, but I believe the map file just compresses the output to remove any white-space and just give you just the guts-and-bones without all the pretty formatting. So this was not the easiest thing to read, but reading it gave me the exact answer I needed","I could not believe my luck. The render component was mentioned in that readme I found but this was showing me how it was used in an official component to link child Powershell Universal components."]},{"i":"final-jsx-file","l":"Final JSX File \uD83C\uDFC1","p":["Wow just one-line of code can make all the difference to a project. This is how my final JSX file for this component looks, which now allows you to bind child Powershell Universal components within this component."]},{"i":"demo-dashboard","l":"Demo Dashboard \uD83D\uDC47","p":["I was really happy with the dashboard I had designed for my last blog post. So why not just use this same dashboard to this demo, but with a slight twist.","That twist is basically nesting that entire dashboard I did in my previous blog, as the -Content to be displayed as the content of the full-screen."]},{"i":"powershell-function","l":"Powershell Function \uD83E\uDD13","p":["To make the actual cmdlet behind this component you need to edit the pre-defined function in the .PSM1 file so this is my finished .PSM1 before running the invoke-build","Even if you just glanced through the above code, you should hopefully notice that I did include a decent help for each parameter most parameters are for styling the buttons, think of this component like a New-UDCard component, anything you embed within the -content parameter will be displayed in full screen"]},{"i":"marketplace-link","l":"MarketPlace link \uD83E\uDD2B","p":["Link to this module on marketplace"]},{"i":"that-is-how-this-powershell-module-was-done-till-next-time-take-care","l":"\uD83D\uDCA5 That is how this Powershell module was done. Till next time, take care"}],[{"i":"#","p":["Powershell Southampton Group have invited me to talk in-person at an event being held in Southampton. I am really exicted to be offered a chance like this to demo Retype and Crescendo, in-front of real-people."]},{"i":"celebrations","l":"\uD83E\uDD29 Celebrations","p":["Just like these comic characters, we to could be hanging out together"]},{"i":"southampton-powershell-group","l":"\uD83C\uDFA4 Southampton Powershell Group","p":["Feeling blessed to be speaking at this event with these guys"]},{"i":"feeling-blessed","l":"Feeling Blessed \uD83E\uDD29","p":["As I mentioned in a previous blog it is sad not to be using Powershell Universal. It is just such an amazing product, that can really help you push yourself to new levels.","Find out more on Powershell Universal here:-","A while back I was contacted by the organiser of the Southampton Powershell group about doing a talk on Powershell Universal. Although I would have loved to have given the speech on this, I was not using the product, and it had been sometime, so I did not feel comfortable on giving a talk on something I was not actively using, as that particular product has evolved so much and keeps evolving I just did not think I was the best person.","However as I got actively building modules to try and help out the community, make myself a better scripter, and potentially find a new job from it as my work contract was coming to an end. So I got building modules that I thought were cool, or that hopefully other people would also find cool and useful. One of these modules was Retype, which I am sure I have said it, but it is what I used to build this entire website. Yes Powershell Retype Module and Notepad.exe is the two things I have used to build this entire site.","I know people who have paid for domain names and never hosted their site, because they never built it. Retype takes the pain out of making websites, and documenting information in a stylish manner. Then you can host it for free on either github or netlify like I have done.","So I replied to the Southampton Powershell Group organiser once I had got using this module I ported across to powershell as it is a .Net application and developed the cmdlets to run the 4 different tasks this Retype application can perform, and tested it out. I didn't think anything would really come of it as I know this module is no-where near Powershell Universal standards, but it does allow easy web development to document information from what-ever it is that you are working on.","Boom...I got a reply to say would I like to talk about this module at the next Southampton Powershell User Group meetup. Damn, I was like...yeah! So that pretty much brings me to why I done this blog is because it is now official with an event and a raffle, and not 1, not 2 but 3 Powershell speakers. Totally star struck to be speaking alongside Brett and Jaap, feels like a plan is coming together","Information on the event","I love it when a plan comes together","Information on the Powershell Group"]},{"i":"hope-to-see-you-there","l":"Hope To See You There \uD83D\uDC4B","p":["Be great to meet more enthusiastic Powershell users so if you live in the South East of England it would be amazing to see you there."]}],[{"i":"#","p":["The Powershell Podcast have also offered me to talk on their podcast show. Wow what an honour to be talking on the Powershell podcast, as past guests have been heroes of mine. More information in the blog"]},{"i":"more-celebrations","l":"\uD83E\uDD29 More Celebrations","p":["Thankfully both hosts Andrew and Jordan made me feel comfortable throughout the talk, unlike this chap"]},{"i":"powershell-podcast","l":"\uD83C\uDFA4 Powershell Podcast","p":["\uD83C\uDFA4 You can listen to the podcast here:-"]},{"i":"feeling-blessed-again","l":"Feeling Blessed Again \uD83E\uDD29","p":["So I am just an average guy in my head, I may wish I wore a cape and spandex but sadly I got a dad bod going on these days, and doubt I would be much use in fighting crime. Instead I have been trying to use my super-powers to release unique and wonderful modules to the Powershell Gallery. And of course try to keep regular content coming to this blog in one way or another. Seems this is like the worst time of year to look for a new job as I am still looking. However totally awesome things are also happening in my life despite no employer out there looking for someone like me right now. Why am I sounding so positive in this dark time for me? Well because I got invited to the Powershell podcast of course! The only sad thing was I did dress up as Powershell Man to do this talk, yep I had my cape the mask, my body armour, even had the nunchucks at my side. But due to some technical difficulty beyond my control, this video footage could not be released, and you can just settle for the audio version, thinking about me in my amazing Powershell Man outfit. Well once again I was feeling blessed that the people running the Powershell Podcast","The PowerShell Podcast highlights what makes PowerShell so great, the community. Each week we want to highlight people, blogs, videos, and modules that have gone into making PowerShell so great.","I was stunned to see the previous guests on this show. Seriously clever people. Then I got the invite? Felt like the UFC needing to fill the card, so offer someone aka me a short notice fight. However apparently I had been given a shout-out to go on the show? Either way I was still feeling like a win, win situation. I been doing IT for a long time now, and never got to ever do a talk to like people actually wanting to listen to what I say. I have an issue trying to get my kids to listen to me all the time. I think all in all it went pretty good. I wish I had of borrowed my kids xbox headset, and not used \"you know\" so much, but hey I am only human (and it was my first talk). I was shocked to find out the show was over when it was as both Andrew and Jordan very easy to speak to and I could have waffled on a lot longer. Well I hope you do get to check out the podcast and I hope it inspires you to build something you dont think you can build, or go solve that problem no one else wants to.","The Powershell Podcast crew"]}],[{"i":"#","p":["Powershell blog made for the Southampton Powershell Group talk, explaining how to get started with Cresecendo, what Crescendo is, how to use it, and even videos from the man himself Jason Helmick"]},{"l":"Crescendo","p":["I felt like I was in dream-land having a chat with Jason and Jim"]},{"i":"crescendo","l":"\uD83D\uDCE2 Crescendo","p":["krə-shĕn′dō is how this word is pronounced just to be clear from the get go","When I look at the above krə-shĕn′dō it makes me think of a special move you could do on Street Fighter 2. Something like krə-shĕn′dō Kick looking up this word I find:-","A gradual increase in the volume or intensity of sound in a passage.","A passage played with a gradual increase in volume or intensity.","A steady increase in intensity or force.","So the one chance I had to ask the brains behind this, aka either Jason or Jim about why they called it Crescendo I totally fluffed and didn't ask. Which would be a perfect reason to have another chat with the delightful Jason Helmick and Jim Truher. Jim Truher has been on the Powershell team since Jeffery Snover v1 days! So to be speaking to such a key player in the Powershell world this was crazy. Then Jason Helmick the Powershell PM on the Powershell team, like damn did I hit the jackpot? I was gutted that I had some technical issues which prevented my camera working, but damn I wanted a screen shot for proof I really did talk to these two guys. So just believe me it really did happen. Honest!","Why on earth would Microsoft want to talk to a little tiny fish in the sea like me? Well sadly it wasn't to offer me an amazing work from home job to create weird and wonderful modules (drats) it was to talk about Crescendo. Still despite no job offer, (which there never was I just made this up) I was still over the moon to be speaking to these guys about this totally awesome Crescendo Module","Lets cover what Crescendo is and why you as someone who obviously it into Information Technology and use Powershell to do some or all of your job. Well Ladies and Gentlemen...Crescendo in a nutshell allows you to make any command line executable into a Powershell Module to share with the masses. Hmmm I hear you ask, but why would I want to do that when I can already run a non-powershell command-line-executable from a Powershell script anyways yes dear reader, you are correct you could invoke a native CLI from a script, but can you then easily access the output of that using the Powershell pipeline? The output is most likely plain string data that is returned not an actual object you could inspect so Crescendo bridges that gap and has the capability of making the output into objects.","Official documentation on what Crescendo is if you do not believe me, or if what I wrote doesn't make sense to you:-","\uD83D\uDCE2 Official documentation:-"]},{"i":"what-got-me-into-crescendo","l":"What got me into Crescendo? \uD83E\uDD13","p":["So I am really lucky not to have just got to speak to Jason and Jim, but over the years I have spoken to a fair amount of MVP people. Trust people there is a reason Microsoft gives the people they give an MVP. They are genuinely great people who do amazing work. Anyways I saw this tweet from Adam Driscoll about this Sysinternals Module he had done using Crescendo. I know all about the Sysinternals tools and one of the particular tools he did handles I was recently using to un-stick the not responding Powershell ISE sessions I was having when trying to cancel code from running. So I looked at the Github repo then was shocked when I read a few lines basically explaining how he did the module and how you could add to it. I felt like a kind in a candy shop all the CLI programs I was thinking about that I too could now make Crescendo modules out of. Boom that alone was enough to sell this to me on a plate. Right so step one for me, was I needed to install Powershell 7 to be able to install the Crescendo module yep I was still running Powershell v5 as it did everything I needed until now.","I guess as I explained I felt like a kid in a candy shop, and I just wanted to eat those sweets, when in hind-sight I should have read the instructions, as although I was able to build these Crescendo modules very easily using the Github repo template Mr Driscoll had kindly provided, I did not know about Crescendo other than it could make the magic of making this old-skool CLI or even nu-skool CLI run as if it was a native Powershell cmdlet or function.","Let us demystify what Crescendo does and does not magically do, as I know from personal experiance you try to find this information there is either a lot to read, or a lot to watch. I want to stream-line the goodness into your brain, so please keep reading.","Just hope Jason and Jim did not regret the call"]},{"i":"demystify-crescendo","l":"Demystify Crescendo \uD83E\uDDD0","p":["I felt I was late to this party, as Crescendo has been about for a little while now, and I had only just discovered it, via a tweet, which I am super glad I read. However I did not build my Crescendo modules using the proper method and this although got me into Crescendo I didn't fully appreciate what it is actually doing, or how to properly use it.","Do you want the good news or the bad news?","It is not real magic, there is no magic involved","It will not automatically generate all the parameters from the chosen executable you wish to covert","It will not automatically make the output into an object output for Powershell","It is not complicated to understand","It will automatically build a very complicated PSM1 file for you","Editing the JSON file is very easy and has built in intellisense.","JSON is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and arrays. It is a common data format with diverse uses in electronic data interchange, including that of web applications with servers","Using the JSON file is not difficult and will help populate the end module with the attribute-value pairs specified.","Trust this will all become clear shortly if this is your first glance at Crescendo, I just do not want to mention JSON later on and you be like what the heck is JSON","Why does Crescendo not make every CLI into objects then? Well dear reader, Crescendo can only make the CLI into outputted Powershell objects if the original CLI you are wrapping supports some sort of output other than just text. Newer CLI do maily support JSON output or others may support CSV output. So for me this was something I didn't grasp at the start. For instance the Robocopy module I made, robocopy being a really old CLI does not support JSON or CSV output, so I cannot make the returned data from this into Powershell objects, so you can view the properties or methods of particular objects. It is just string data. So why bother doing that one then? Simple it is written in the blog I done, but these old-skool CLI had very interesting parameters that didn't make sense unless I read the help for each one. So for me just to be able to give simple param names is enough, and to remind all the young-ones out there that these old but quality CLI can still come in use, just a case of knowing if they exist.","Think about it folks, I am not just talking Windows built in CLI you could convert. How about anyone of these CLI you could make into a Crescendo module Azure cli, AWS cli, Docker cli, Kubernetes cli, Microsoft PowerApps cli, Jenkins cli, Github cli, vSphere cli...the list just goes on and on. All these different CLIs that exist out there all doing different things, but we could bring all this goodness to the Powershell gallery by making these into Crescendo modules. Which then means if any of the above mentioned have quirky parameter sets you could make the CLI a lot easier for everyone else by making decent easy to understand parameters. Secondly as most of these are modern CLI then they should support outputting the format into something like JSON or CSV to then allow Crescendo to make this into proper objects when you query the CLI you are converting. Please note there is like one-line of code you have to add in the JSON file for this magic to happen.","Yes you will have to manually construct all the parameters you want to use from the original CLI into the JSON file. Crescendo will not magically go ah I see it has all these params I will automatically insert these into the JSON file. However that being said, once you right your first parameter, you can pretty much copy and paste that small code block to use for the rest of the parameters you wish to include."]},{"i":"in-a-nutshell","l":"In a nutshell \uD83E\uDD5C","p":["So I created a folder named SpeedTest-CLI within that folder I created the following .PS1 file, to be able to create the JSON file which you will need to edit.","JSON file that this generated by the above command. Don't worry this can be trimmed down.","Trim the JSON file down a bit to make it less daunting to start modifying it, see much better.","Now I added the --json into OriginalCommandElements to make this parameter automatically run each time the command is run. Then I gave it a Description, after that I added the parameters, then most importantly as I wanted objects, and this was using JSON output, I used one line of code into the OutputHandlers to make it a true Powershell object the data this CLI returned. Below is the final JSON file finished. I just wanted to show you the steps on this JSON file as this is a critical process to understand to actually make the end module.","So the big-takeaway lessons to be learnt, is the below code does the intellisense within VSCode","also this original executable I wanted to convert aka librespeed-cli.exe did indeed support JSON output format. I found this out by actually looking at the help for this executable, which showed it supported both CSV and JSON","I needed this original CLI to always include the --json parameter everytime it was run, which in-turn I could then use as Powershell objects in the module","By using the above tiny bit of code in the JSON file now means whenever you run this within Powershell it will always use this parameter. This will allow it to return proper objects, we just need to do one last thing for this to actually work by using the following line of code in the JSON file:-","Boom. Without that line of code specified, the magic of making this CLI into a Powershell Object to allow you to use the pipline, would not have happened.","Do not worry readers you only need one Crescendo cmdlet to export this into a magically generated module file.","As me and Jason are good mates now I strongly recommend you watch his videos which explain this in better detail than I wrote here."]},{"i":"videos-to-watch","l":"Videos To Watch \uD83C\uDF9E️","p":["Seriously check out the videos below to let Jason ease you into Crescendo"]},{"i":"magical-psm1-file","l":"Magical PSM1 file \uD83E\uDDD9‍♂️","p":["Why is this so magical? Well reader it is because Crescendo automatically did this for me using that end JSON file. Check out all this code","Obviously the last thing I do before publishing my Crescendo modules is to make sure my help file for the module is all in-place and makes total-sense I why I done the module and how to use it."]},{"i":"i-hope-this-helps","l":"I hope this helps? \uD83E\uDD17","p":["I got some big plans for Crescendo as I do think it is an amazing module. Just currently I am limited in the CLIs I can use, but once I get using something big that I can share I certainly will do. I also hope that this has also demystified Crescendo for you, and shown you how to implement it on an existing CLI out there.","Thanks for reading if you got this far"]}],[{"i":"#","p":["Powershell getting started with Retype how to get the module and how to get-up and running with this super awesome static site generator. So awesome I use it for this blog site. This blog was intended for the Southampton Powershell Group talk"]},{"l":"Retype Powershell Guide","p":["Let us start a super cool journey together"]},{"i":"retype-powershell-guide","l":"\uD83E\uDDAE Retype Powershell Guide","p":["After doing the above commands exit the current pwsh terminal, then launch a new pwsh terminal.","All you got to do is have a little belief in yourself. Trust this is not complicated. Retype uses MarkDown which is super simple","All you got to do is repeat steps 5 and 6 creating new pages, with different content, once you are done, you then issue","create a file with the name index.md and add the following content to this as the contents of the index.md file","Have a directory ready to build your website something like C:\\Mywebsite\\ then issue the following command","Now in the same directory what you specified in step 3, in the example this was","Now you can view your lovely website by issuing the following cmdlet","Once you have the above .net package installed, which has to be x86 version due to me building this on an x86 laptop. You can now install the module from the Powershell Gallery","PLEASE MAKE SURE YOU RUN PWSH AND EXECUTE THE BELOW STEPS RUNNING IN THAT TERMINAL WINDOW","See no magic involved here","The directory name specified in the output of the retype.yml file is where your website will be built to. I then upload this folder to publish it on the world-wide-web","This file controls what is shown on the main template for your website. Please visit https://retype.com/configuration/project/ for full information on how to configure this to your requirements.","This will have now created a retype.yml file in the path specified which will contain the following information","You must install this particular version","You need this specific version of .net in order for this program to run retype.exe command-line-interface program to run correctly","Your default browser should now open the URL http://localhost:5000/ showing you your first webpage"]},{"i":"making-the-site-better","l":"Making The Site Better \uD83D\uDCAD","p":["Again some people get a bit worried when you start bringing more languages into the mix. Like mentioning you will have to configure YAML files for the main template. It is not rocket science. So dear reader, let us take a look at the file I have configured as my main retype.yml file for this very blog.","Line 1 defines that any file or directory and sub directories within the present working directory aka the website directory will be included in as input to build the website from.","Line 2 Will output all the HTML files that are automatically generated from the markdown files when you issue the Initialize-RetypeBuild cmdlet.","Line 3 the URL only matters when you actually publish your site.","Lines 4-8 define how I branded this website, and showing I opted to use a logo instead of a label. Lines 9-15 are setting the links and logos/text displayed for each link.","Lines 16 and 17 define the footer.","Read more information on how to configure the YAML file","If you followed the 7 steps above you should now have a very basic website. By editing the main retype.yml you can then set the main theme for your website, as in the text displayed in the top left, and label or icon. The links and text displayed along the top of the page, as well as the copyright information. Remember every page you then create must be a mardown file .md extension, and must include front matter. What the heck is this front matter shell bomb you just dropped?","This is an official link on Front Matter","Basically my Front Matter for each page is the same but a few things change. So lets look at the front matter for this page:-","So literally all I have to do is change the following date, icon, label, order those are the four things I change each time, as all my blogs are centered around Powershell so I keep the description the same each time. Again I do not change the image often which is the image displayed when you copy and paste the link to either twitter,linkedin, email etc. Again you may wish to change the categories that are listed. For me as long as I change the following date, icon, label, order my site will have the correct dates on blog pages. Will have a unique icon associated with that webpage, the label for the hyperlink will be different for each webpage and the order the webpages will load correctly based on the order number the lower the number the newer the webpage. Hence I would recommend starting at 99 and go down. I started at 50 for this particular website, so have over 30 pages built in less than two months using this technique, which I think it pretty good going, as this included a lot of developing of the actual modules I am blogging about."]},{"i":"making-it-even-better","l":"Making It Even Better \uD83E\uDD13","p":["If you got this far without throwing your computer out of the window, then you are doing great. Hopfully you have your first webpage built by following the 7 step-by-step getting started guide. Really all the information you need on this awesome static site generator is listed on their official webpage which is right here:-","Official Retype Site","Well if like me you do not like to read and try to process to much information then just bookmark that link for later. Because right now I am going to give you some more links to bookmark. That is because Retype has built-in to use two different sets of icon types these are Emojee and Octicons icon sets","Emojee Official Site","Octicons Official Site","Again for me this is gold-dust to be able to produce any of these icons super-easily on my webpage using the codes shown on these webpages. As you can see I use these icons for the different paragraph titles in my blogs, and the main links on the left hand side menu."]},{"i":"retype-components","l":"Retype Components \uD83E\uDDD0","p":["Components in Retype markdown mean allowing you to display a particular bit of your webpage in a certain style, just like this panel you are reading","To see all of the components available to use check out the link below Please Read The Link","Retype Components","Again bookmark for now if you do not want to read it all at once, but believe me this makes inserting images,hyperlinks,badge,buttons,panel,alerts and lots more other things a piece of cake. No HTML required, just simple markdown like three equals signs top and bottom then anything inbetween is a panel, this is why I only need notepad.exe to build these webpages, instead of some fancy program, just because the syntax is so easy to learn and use.","Please take time to read through the links I provided in a safe environment"]},{"i":"retype-in-a-nutshell","l":"Retype In A Nutshell \uD83E\uDD5C","p":["Retype is a .net cli that gives you a predefined theme that has some really nice features built-in. Such as the light and dark mode, the ability to search your site, gives you the ability to view your history of the pages you have visited, custom icons for webpages and branding of the main site. I have built and hosted a few websites off of GitHub using Jekyll but this process to me was quite hard to grasp and required me to install ruby, then configure gems. I was like proper confused when I first tackled it, and almost felt like giving up before my page was hosted. I know you will need to install the following .net version to make this all work","You must install this particular version","For me this is a far less stress and hassle than installing ruby which is more than double the size of this .net installer, and then have to configure gems, pretty sure I had to install python as well, and it took me hours and hours before I could even get going with Jekyll. Now I can do the same thing from scratch in a tiny fraction of that time, using Retype to design and publish documentation websites.","Even on my ancient x86 laptop, I can build an entire site of over 30 webpages in less than 10 seconds so this module gets you stylish documented webpages super-fast"]},{"i":"retype-is-designed-for-documentation","l":"Retype Is Designed For Documentation ✒️","p":["So I know that Retype cannot produce fancy real-time graphs, live API data or interactive components. This is because Retype was built for documentation, not making the most amazing website or dashboard possible. It is only using simple markdown text to produce these webpages, which is pretty damn-slick when you think about it. This gives anyone, ** yes anyone the chance to produce top quality documentation that is easy to produce, easy to update and looks much more stylish than the plain text you inputted.","I really do hope you give this a go as it really will not take long to learn and spin up your first generated site. Once you create your first webpage using the markdown method I have run through, every webpage after that initial page should become an easier task, as you know the process is not very complicated.","As always I think the best things in life are free, and that is exactly what this Retype module is.","See this is not that difficult. It could be worse"]},{"i":"visit-the-official-site","l":"Visit The Official Site \uD83D\uDCAC","p":["So I found this static website generator on nuget then I converted it into a binary module, and wrote an additional function to actually install configure the system path to include the path to where the retype.exe is located after installing the module. I did not design or create React, I merely made a way you could obtain this program and use it all via Powershell apart from the contents of the actual webpages which is the text I want to document and I choose notepad.exe as my application of choice, because it loads real-quick on my laptop, and I can just type-and-go. Basically if you got more queries on what Retype can and cannot do please visit the official retype website.","Official Retype Website","See no magic involved thanks for reading"]}],[{"i":"#","p":["Personal blog on my invitation from a member of the Powershell team to talk on the Microsoft Powershell Community Call. Dreams coming true with invites like this"]},{"i":"happy-days","l":"\uD83D\uDE0D Happy Days","p":["Just like these comic characters, we to could be hanging out together"]},{"i":"microsoft-community-call","l":"\uD83C\uDFA4 Microsoft Community Call","p":["Last month in August 2022 unknown to me but I kindly got a shout-out in the Microsoft Powershell Community Call by Mike an MVP who was updating the community news and mentioned the robocopy crescendo module I had published, and the fact it was the first cresecendo version of robocopy which I do need to re-visit to add some more parameters to it, and to actually make a github repo for this module. I just never knew it would gain so much interest.","With that interest came an invitation from Steve Lee on the Microsoft Powershell team to demo some of my recent modules. Wow I mean holy cow what another honour to get an invite to be on the next community call.","I was recently given some advice on my modules to possibly tidy them up, into main categories, and stick all the various modules associated inside that particular category. So I decided a good start would be to tidy up this website a bit, hence I have now placed the modules I have made into these categories.","Please remember I do all my development on my own crummy x86 laptop, so I needed to use my wifes' laptop as mine does not have a camera. However I only actually developed one module on my wifes' laptop which was the first speed test crescendo module I built, as I could only get this software in x64 format. However, I did not think it would be fair to neglect the other modules I have recently been working on. Please remember all this work, including this website only started in early July 2022. Just like my I tell my daughters I do not have a favourite, the same with the modules I publish.","I did feel a bit of a douche-bag as I got an amazing opportunity to demo a Powershell module but I used the time to talk briefly on various modules I have been doing Advanced Functions, Binary Modules, Crescendo Modules, Powershell Universal Modules. I knew I did not have a massive amount of time, so I wanted to use the time I had to be passionate about the stuff I have recently been doing, and hopefully inspire others out there wanting to make modules, get on and make those modules they been dreaming of."]},{"i":"talk-time","l":"Talk Time \uD83D\uDE0A","p":["I have been busy lately and feel I should have done more preparation for this talk, but I also wanted it to be natural and not mundane script I was reading from.","I was cautious on time as I know I can waffle on for ages, but I am hoping I did not pause to much and kept the talk flowing and engaging. I promise if I ever get an opportunity to do another talk on this show I will make sure I do an actual demo of one of my modules. I feel it went well, and seemed to get positive feedback in the live chat when the recording was going on.","Information on the event"]}],[{"i":"#","p":["The Powershell Podcast have invited me back onto their podcast show. Again an honour to be talking on the Powershell podcast, as past guests have been heroes of mine. More information in the blog"]},{"i":"more-celebrations","l":"\uD83E\uDD29 More Celebrations","p":["Once again both hosts Andrew and Jordan made me feel comfortable throughout the talk"]},{"i":"powershell-podcast","l":"\uD83C\uDFA4 Powershell Podcast","p":["\uD83C\uDFA4 You can watch the podcast here Powershell Podcast with me"]},{"i":"blessed-again-in-2023","l":"Blessed Again in 2023 \uD83E\uDD29","p":["Well as you probably know, I have not been blogging so much as I was last year. Few reasons behind this, reason number one is I want to be 100% committed to the work I do which pays me at the end of the month. Spending time with my family would be the second reason, like although I am working from home, I separate myself from my family and work in my own room. But to be able to finish work and be straight at home with your family is just the best feeling ever.","I love my new job so much, I did put it on LinkedIn the other day about being asked why I come to work when I was in my early 20s. The reason I gave was to get paid. The reason I was given by the HR lady was she came to work because she loved her job. I finally get it nearly 20 years later that great jobs do exist, and I just feel so blessed to have landed one.","So, although I have not been the crazy person blogging all the time on weird and wonderful modules that either do not exist or have a very niche focus on what that module does. It has been amazing that I have had people reach out to me on Powershell related things. Most crazy start to the year was to be re-invited back onto the Powershell Podcast for round 2. Like honestly, have you seen all the Powershell legends that have been on the show? Boom they are invited the simple lad from Gosport back onto the show, who in comparison to the other guest it feels like I am ‘Z’ list status. Nevertheless, the invite was genuine, and I was so thrilled that despite my lack of recent blogging I was being given another chance to come back on the show and chat to Andrew and Jordan who are two totally awesome guys. It just seemed quite surreal to be honest, but I did have a few people reach out to me after the last-time I went on the podcast.","As mentioned, there are a lot of real-life super-heroes for me who have been invited onto the podcast, but to me these people were genuinely talented people, or people who seemed super clever at a young age, or who went to university, or worked as a developer already or even people who work at Microsoft. Like none of that is me. I just feel like a regular guy who has been grafting hard for a long-time and was just lucky to get learning Powershell when it first came out and didn’t give up when it didn’t make sense. Like to try and understand Powershell from scratch without having some computer degree or having like-minded people at work who would rather carry on pointing and clicking, does not make it a quick journey. I wanted a better life for my family that was growing, I didn’t want to be skint at the end of each month, or worse over-drawn. So was amazing to get the chance to be speaking on the podcast again to hopefully connect with other IT people out there who may feel stuck in a rut in their current job. Or people struggling to learn Powershell thinking what is the end goal?","Finally in 2023 in the UK businesses finally seem to know about Powershell and what it can do for them. I was blessed back at the end of September in 2022 to be offered a job to use my Powershell skills and contribute to the team I would be working in. It seemed too good to be true, and honestly every-morning is a great feeling to get up to be working for this company, I love the work I do and the scripts I get to write or modify. Means a lot to me as well that opinions I suggest are considered and not dismissed as they have been in past jobs. Even tasks I take on that are not considered to be a scripting answer, it is just awesome to be able to think, well if I just write a small function for this I can re-use it and possibly pipe the data to something else. I just hope this podcast comes out well as the camera worked this time round without any audio delays, so hoping others can relate to this talk, and the fact if you can believe in yourself and the scripts you write, then do not ever give up on your dreams or goals you want to achieve in IT. I truly believe after landing this current role, that I know these roles do exist, and I certainly want to stay in this line of work, as it is providing a better future now for my family, which was the goal of learning Powershell all those years ago in version 1.","The Powershell Podcast crew"]}],[{"i":"london","l":"\uD83D\uDCA5 London","p":["Super Day"]},{"i":"powershell-podcast","l":"\uD83C\uDFA4 Powershell Podcast","p":["Wow what a blast this event was PSDayUK 2023, which was hosted in the big city of London. This also meant it was a bit different to the normal getting up at 05:50 getting on a train at like 07:20 then arriving in London, figuring out the tube as it has been a while since I last visited London, then using a trusted satnav on my phone to then walk the last 8 minutes of the journey to where the event was being held."]},{"i":"getting-to-the-event","l":"\uD83D\uDE8B Getting to the event","p":["So, I live right on the south coast which is nice to be by the sea and all but means getting to London via a train would take two-hours, so I was lucky enough to have relatives I could stay at which then meant the train journey was only 35 minutes instead. So, I travelled the night before and thankfully my Aunty who works in London was able to provide me excellent directions written on good old-fashioned paper. The main worry for me was getting to the event on-time, as I am not the best at getting up early, but that day was different I was feeling juiced, as I had a presentation to deliver. Like seriously for me this was a dream come true, being invited to PSDayUK, as literally I only applied to be a speaker at the last moment with a good nudge from Adam Cook. Normally my excuse is that I do not own a valid passport, and all the PowerShell events normally are over-seas. Which prevents me from travelling to them."]},{"i":"presentation","l":"\uD83D\uDCFD️ Presentation","p":["I used Marpit to design my presentation which was done in Markdown in VSCode Marpit Markdown I then put that same Markdown presentation on GitHub here for everyone to see:- Presentation Here","This presentation I put together was designed to inject ideas into your brain on how you can make your output of PowerShell scripts more beautiful or easier to understand to the colleagues you present the data too. Like to me that is the one main common factor in scripts, or functions, is that they normally 99% of the time produce some-sort of output. Although PowerShell is object-orientated language and is amazing, end of the day when you are showing your boss or colleague this amazing script, and all they see is text in a terminal window, it may not look that great to them. Using one of my previous modules I have pushed to the PowerShell Gallery I wanted to show how you could dramatically improve the output of this script using one of the mentioned modules. It was such an honour to present at this event and to speak to the people there. Like so many creative-minds in one-place, it was an amazing day. I just wish I had of plucked up more courage to speak to more people at the event, I was feeling a bit out of my comfort zone in the big city. I just hoped my talk inspired others and injected some new ideas on things you can do with PowerShell to make your output better.","Believe in yourself"]},{"i":"cheers","l":"\uD83D\uDCD6 Cheers","p":["Thanks for reading."]}]]